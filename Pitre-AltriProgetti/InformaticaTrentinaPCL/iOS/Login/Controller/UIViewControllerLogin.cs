// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using Foundation;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Menu.Storyboard;
using InformaticaTrentinaPCL.Login;
using InformaticaTrentinaPCL.Login.MVP;
using InformaticaTrentinaPCL.Login.MVPD;
using TestRefit.Network;
using UIKit;
using InformaticaTrentinaPCL.iOS.Login.Session;
using InformaticaTrentinaPCL.Network;
using Xamarin.iOS.DGActivityIndicatorViewBinding;
using InformaticaTrentinaPCL.iOS.PasswordExpired;
using InformaticaTrentinaPCL.ChangePassword;
using InformaticaTrentinaPCL.iOS.ChooseInstance.Storyboard;
using InformaticaTrentinaPCL.Interfaces;
using ObjCRuntime;
using InformaticaTrentinaPCL.iOS.PasswordDimenticata;

namespace InformaticaTrentinaPCL.iOS.Login.Storyboard
{
    public partial class UIViewControllerLogin : UIViewController, ILoginView, ILoginViewChooseInstance, IUITextFieldDelegate
    {
        public static string NAME_STORYBOARD = "Storyboard_Login";
        public static string NAME_CONTROLLER = "UIViewControllerLogin";
        // private ILoginPresenter presenter;
        private LoginPresenter presenter;
        private bool isRemember = false;
        LoginAdministrationState state;
        UIVControllerPasswordExpired controllerPasswordExpired;
        Keyboard keyboard;
        private UIAlertController alertUpdate;

        [Export("textFieldShouldReturn:")]
        public virtual bool ShouldReturn(UITextField textField)
        {
            if (uitextfiled_password.Text.Length > 0 && uitextfield_username.Text.Length > 0)
            {
                textField.ResignFirstResponder();
                ActionButton_Login(null); // auto login 
            }
            else if (uitextfiled_password.Text.Length > 0)
            {
                uitextfield_username.BecomeFirstResponder();
            }
            else if (uitextfield_username.Text.Length > 0)
            {
                uitextfiled_password.BecomeFirstResponder();

            }

            return true;
        }

        public UIViewControllerLogin(IntPtr handle) : base(handle)
        {
        }

        public void ConfigureTablet()
        {
            this.marginLeft.Constant = StyleTablet.MarginRightAndLeftForViewController();
            this.marginRight.Constant = StyleTablet.MarginRightAndLeftForViewController();
            //this.marginDown.Constant = StyleTablet.MarginBottomAndTopForViewController();
            this.marginUp.Constant = StyleTablet.MarginBottomAndTopForViewController();
        }

        private void ConfigureText()
        {
            // I campi DEFAULT_USERNAME e DEFAULT_PASSWORD sono valorizzate solo se 
            // NON siamo in Produzione
            //uitextfield_username.Text = NetworkConstants.DEFAULT_USERNAME;
            //uitextfiled_password.Text = NetworkConstants.DEFAULT_PASSWORD;

            //TODO rimuovere questo aggiornamento del presenter 
            //valido solo per i casi in cui vengono user e pwd sono popolati in automatico
            presenter.UpdateUsername(uitextfield_username.Text);
            presenter.UpdatePassword(uitextfiled_password.Text);
            uitextfiled_password.Placeholder = Utility.LanguageConvert("password_Login");
            uitextfield_username.Placeholder = Utility.LanguageConvert("username_Login");
            uilabel_rememberPassword.Text = Utility.LanguageConvert("remember_password_Login");
            eviromentTitleLabel.Text = Utility.LanguageConvert("change_instance_login_title");
            
            uilabel_rememberPassword.Hidden = true;
            Font.SetCustomStyleFont(enviromentLabel, Font.INPUT);
            Font.SetCustomStyleFont(eviromentTitleLabel, Font.LABEL);
            labelRemember.Text = Utility.LanguageConvert("Remember");
            
            UIButton_Login.SetTitle(Utility.LanguageConvert("button_Login").ToUpper(), UIControlState.Normal);
            changeEnviromentButton.SetTitle(Utility.LanguageConvert("change_instance_button"), UIControlState.Normal );
        }

        private void ConfigureStyle()
        {
            viewcheck.Layer.BorderWidth = 1;
            viewcheck.Layer.BorderColor = Colors.COLOR_BLUE_TEXT_ROW_COLOR.CGColor;
            viewcheck.Layer.CornerRadius = viewcheck.Frame.Height / 2;
            uilabel_rememberPassword.TextColor = Colors.COLOR_BLUE_TEXT_ROW_COLOR;
            labelRemember.TextColor = Colors.COLOR_BLUE_TEXT_ROW_COLOR;
            if (!Utility.IsTablet())
            this.View.BackgroundColor = Colors.COLOR_NAVIGATION;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            presenter = new LoginPresenter(this, IosNativeFactory.Instance());
           
            ShowAdministrator(false,String.Empty);
            state = LoginAdministrationState.DEFAULT;
            uitextfiled_password.Delegate = this;
            uitextfield_username.Delegate = this;
            ConfigureText();
            ConfigureStyle();
            presenter.OnViewReady();
            this.UpdateAppVersion();
            IsRememberActive();
            RecoveryCredenzial();
            viewEnableCheck();
            StyleIphone();
            ConfigureKeyboard();
            SetEnviromentIfSaved();
            //#if DEBUG || SVIL
            //            var longPressGesture = new UILongPressGestureRecognizer(LongPressMethod);
            //            UIButton_Login.AddGestureRecognizer(longPressGesture);
            //#endif

#if DEBUG
            uitextfield_username.Text = NetworkConstants.DEFAULT_USERNAME;
            uitextfiled_password.Text = NetworkConstants.DEFAULT_PASSWORD;
            presenter.UpdateUsername(NetworkConstants.DEFAULT_USERNAME);
            presenter.UpdatePassword(NetworkConstants.DEFAULT_PASSWORD);
            EnableButton(true);
#endif
        }

        private void SetEnviromentIfSaved()
        {
            if (InstanceUrlIsSaved())
            {
                SetUrlSaved();
            }
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            OpenChooseInstanceViewIfNeeded();
            SetEviromentDescriptionIfNeeded();
            presenter.VerifyUpdate("IOS");
        }

        private void SetEviromentDescriptionIfNeeded()
        {
            if (InstanceEviromentDescriptionIsSaved())
            {
                SetEnviromentUrlDescription();
            }
        }

        private void OpenChooseInstanceViewIfNeeded()
        {
            if (!InstanceUrlIsSaved())
            {
                ShowChooseEnviromentViewController(animated: false);
            }
        }

        private bool InstanceEviromentDescriptionIsSaved()
        {
            var preferences = new Preferences();
            var savedDescription = preferences.GetString(Constant.KEY_INSTANCE_SAVED, null);
            return !string.IsNullOrEmpty(savedDescription);
        }

        private bool InstanceUrlIsSaved()
        {
            var preferences = new Preferences();
            var savedUrl = preferences.GetString(Constant.KEY_INSTANCE_URL, null);
            return !string.IsNullOrEmpty(savedUrl);
        }
     
        void LongPressMethod(UILongPressGestureRecognizer gestureRecognizer)
        {
            if (gestureRecognizer.State == UIGestureRecognizerState.Began)
            {
                presenter.ChangeServer();
            }
        }

        private void ConfigureKeyboard()
        {
            if (Utility.IsTablet())
            {
                keyboard = new Keyboard();

                keyboard.KeyboardListenerWillDidShow((rect) => {
                    this.View.Frame = new CoreGraphics.CGRect(0, UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() ? -90 : -150, this.View.Frame.Width, this.View.Frame.Height);
                });

                keyboard.KeyboardListenerWillDidHide((rect) => {
                    this.View.Frame = new CoreGraphics.CGRect(0, 0, this.View.Frame.Width, this.View.Frame.Height);
                });

            }
        }

        public void StyleIphone()
        {
            downImg.Constant = Utility.IsTablet() ? 160 : downImg.Constant;
            bottomButton.Constant = Utility.IsTablet() ? 70 : bottomButton.Constant;
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
            //TODO Check this behaviour
            presenter.Dispose();
        }

        /// <summary>
        /// Views the enable check.
        /// </summary>
        void viewEnableCheck()
        {   // al momento non è un requisito
            // viewcheck.BackgroundColor = UIColor.White;
            //if (animationcheck != null)
            //    animationcheck.RemoveFromSuperview();
            //if(isRemember)
            //animationcheck = Animation.AnimationLOTApp("simple_check", viewcheck, false);			
        }

        /// <summary>
        /// Ises the remember active.
        /// </summary>
        /// <returns><c>true</c>, if remember active was ised, <c>false</c> otherwise.</returns>
        public bool IsRememberActive()
        {
            isRemember = false;
            var preferences = new Preferences();
            var remember = preferences.GetBoolean(Constant.REMEMBER_KEY, false);
            isRemember = remember;

            return isRemember;
        }

        /// <summary>
        /// funzione in acolto sul bottone ricordami
        /// </summary>
        /// <param name="sender">Sender.</param>
        partial void ActionbuttonCheck(Foundation.NSObject sender)
        {
            isRemember = !isRemember;
            viewEnableCheck();
        }

        /// <summary>
        /// Recoveries the credenzial dallo store interno di ios 
        /// </summary>
        public void RecoveryCredenzial()
        {
            if (!isRemember) return;

            var preferences = new Preferences();
            var username = preferences.GetString(Constant.USERNAME_KEY, null);
            var password = preferences.GetString(Constant.PASSWORD_KEY, null);

            if (username != null && username != "" && password != null && password != "")
            {
                uitextfield_username.Text = username;
                uitextfiled_password.Text = password;
            }
        }

        /// <summary>
        /// Saves the credenzial all interno dello store
        /// </summary>
        public void SaveCredentials()
        {
            if (!isRemember) return;
            var preferences = new Preferences();
            var username = preferences.GetString(Constant.USERNAME_KEY, null);
            preferences.Set(Constant.USERNAME_KEY, uitextfield_username.Text);
            preferences.Set(Constant.PASSWORD_KEY, uitextfiled_password.Text);
            preferences.Set(Constant.REMEMBER_KEY, isRemember);
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            ConfigureTablet();
        }

        public void OnServerChanged(string message)
        {
            Alert.AlertToast(message, this);
        }

        public void SetNewEnviroment()
        {
            SetEnviromentUrlDescription();
            SetUrlSaved();
        }

        private void SetUrlSaved()
        {
            var preferences = new Preferences();
            var savedUrl = preferences.GetString(Constant.KEY_INSTANCE_URL, null);
            presenter.SetUrlConstant(savedUrl); 
        }

        private void SetEnviromentUrlDescription()
        {
            var preferences = new Preferences();
            var savedDescription = preferences.GetString(Constant.KEY_INSTANCE_SAVED, null);
            enviromentLabel.Text = savedDescription;
        }

        public void OpenViewChangeInstance()
        {
            ShowChooseEnviromentViewController(animated: true);
        }

       // public void OpenViewRecuperaPassword(UIButton sender) ActionButtonPasswordDimenticata
        partial void ActionButtonPasswordDimenticata(UIButton sender) 
        {
            ShowPasswordDimenticataViewController(animated: true);
        }

        partial void ActionButton_Login(Foundation.NSObject sender)
        {
            presenter.LoginAsync(false);
           // presenter.VerifyUpdate("IOS");
        }

        [Export("textFieldShouldBeginEditing:")]
        public virtual bool ShouldBeginEditing(UITextField textField)
        {
            return true;
#if DEBUG
            Utility.ActionDocumentList(this.View, (obj) => 
            {

                if (obj < 0) return;

                string[] list = new UsersListForTestHelper().GetListUser();
                string u = list[obj];
                var ulist = u.Split(',');
                uitextfield_username.Text = ulist[0];
                uitextfiled_password.Text = ulist[1];
                presenter.UpdateUsername(uitextfield_username.Text);
                presenter.UpdatePassword(uitextfiled_password.Text);

            }, "Utenti test", new UsersListForTestHelper().GetListUser());
            return false;
            #else
             return true;
            #endif
        }

        partial void TextFieldEditingChanged(NSObject sender)
        {
            UITextField field = sender as UITextField;
            switch (field.RestorationIdentifier)
            {
                case "TextFieldUsername":
                    presenter.UpdateUsername(field.Text);
                    break;
                case "TextFieldPassword":
                    presenter.UpdatePassword(field.Text);
                    break;
                default:
                    break;
            }
        }

        #region IImplementation
        public void ShowError(string e, bool isLight)
        {
            ShowErrorHelper.Show(this, isLight,e);
        }

        public void OnLoginOK(UserInfo user)
        {
            if (user != null)
            {
                SaveCredentials();
                AppDelegate.StarMenuController();
            }
        }

        public void ShowChangePassword()
        {
            controllerPasswordExpired = Utility.ControllerChangePassword(this,this.uitextfield_username.Text,(user) => {
             
                controllerPasswordExpired.ViewDidDisappear(true);
                controllerPasswordExpired = null;
                OnLoginOK(user);

            });
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View, isShow);
        }

        public void EnableButton(bool enabled)
        {
            UIButton_Login.Enabled = enabled;
            Utility.ButtonStyleDefault(UIButton_Login,
                                       enabled ? Colors.COLOR_BUTTON_DEFAULT : Colors.COLOR_BUTTON_DISABLED_DEFAULT,
                                       UIColor.LightGray,
                                       UIColor.White);
        }

        public void ShowListAdministration()
        {
            // Show controller Administrator and callback selector administrator
            Utility.ShowAdministrator(uitextfield_username.Text,(obj) => {
                AmministrazioneModel admin = (AmministrazioneModel)obj;
                SetAdministrator(admin);
            },this);
        }

        #endregion

        private void SetAdministrator(AmministrazioneModel admin)
        {
          
            if (admin == null)
            {
                state = LoginAdministrationState.UNSELECTED;
            }
            else
            {
                state = LoginAdministrationState.SELECTED;
            }

            presenter.UpdateAdministration(admin, state);
            ShowAdministrator(state == LoginAdministrationState.DEFAULT ? false:true, admin==null?"":admin.descrizione);
        }

        private void ShowAdministrator(bool isVisible,string name)
        {
            viewAdministrator.Hidden = !isVisible;
            titleAdmin.Text = Utility.LanguageConvert("cod_amm");
            nameAdmini.Text = Utility.LanguageConvert(name == "" ? Utility.LanguageConvert("choose_amm") : name);
            Font.SetCustomStyleFont(titleAdmin, Font.LABEL);
            Font.SetCustomStyleFont(nameAdmini, Font.LINK_TO_PAGE_SECTION);
            bool IsCanShowAdmin = nameAdmini.Text == Utility.LanguageConvert("choose_amm");
            imageView.Image = IsCanShowAdmin ? UIImage.FromBundle("arrow_blue_right") : UIImage.FromBundle("closered");
            buttonClicAdmin.Hidden = !IsCanShowAdmin;
        }

        partial void ActionButtonDeleteAdmin(Foundation.NSObject sender)
        {
           SetAdministrator(null);    
        }

        partial void ActionButtonChangeEnviroment(UIButton sender)
        {
            ShowChooseEnviromentViewController(animated: true);
        }

        //
        private void ShowPasswordDimenticataViewController(bool animated)
        {
            var vc = UIVControllerPasswordDimenticataGetOtp.CreateChooseInstanceViewController(loginController: this);
            vc.ModalPresentationStyle = UIModalPresentationStyle.CurrentContext;
            PresentViewController(vc, animated: animated, completionHandler: null);


        }

        private void ShowChooseEnviromentViewController(bool animated)
        {
            var vc = UIViewControllerChooseInstance.CreateChooseInstanceViewController(loginController: this);
            vc.ModalPresentationStyle = UIModalPresentationStyle.CurrentContext;
            PresentViewController(vc, animated: animated, completionHandler: null);
        }

        private void UpdateAppVersion(){
            var version = presenter.GetAppVersion();
            labelVersion.Text = version;
        }

        string urlUpdate = "";
        public  void ShowUpdatePopup(string url)
        {
            urlUpdate = url;
           
            //Create Alert
            var okCancelAlertController = UIAlertController.Create("Aggiornamento Disponibile", "Scaricare la nuova versione ?", UIAlertControllerStyle.Alert);

            //Add Actions
            okCancelAlertController.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, alert => UIApplication.SharedApplication.OpenUrl(new NSUrl(urlUpdate)) ));
            okCancelAlertController.AddAction(UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, alert => Console.WriteLine("Cancel was clicked")));

            //Present Alert
            PresentViewController(okCancelAlertController, true, null);

        }

        private void CancelDownload()
        {
            UIApplication.SharedApplication.OpenUrl(new NSUrl(urlUpdate));
        }

        public void OpenViewRecuperaPassword()
        {
          
        }


    }
}
