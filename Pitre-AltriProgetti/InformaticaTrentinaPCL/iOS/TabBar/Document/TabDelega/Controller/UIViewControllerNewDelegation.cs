// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Delega;
using InformaticaTrentinaPCL.Delega.MVP;
using InformaticaTrentinaPCL.Home;
using InformaticaTrentinaPCL.iOS.Delega.Storyboard;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Session;
using InformaticaTrentinaPCL.iOS.Role.Storyboard;
using UIKit;
using UICode.iOS;
using InformaticaTrentinaPCL.Delega.Network;
using InformaticaTrentinaPCL.Interfaces;
using InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Assign.Storyboard;

namespace InformaticaTrentinaPCL.iOS.Delega
{

    public enum CellTypeDelegation
    {
        Header,
        Plus,
        Role,
        DateStart,
        DateEnd,
        Desc
    }

    public class SubModelDelegation 
    {
        public SubModelDelegation(CellTypeDelegation type,string title_,string value_= null)
        {
            this.cellType = type;
			if (title_ != null)
			 this.title_ = title_;
            if (value_ != null)
              this.value_ = value_;
        }

        public CellTypeDelegation cellType;
		public string title_;
        public string value_;
        public NSDate date;
        public bool NewDelegation = false;
	}

    public partial class UIViewControllerNewDelegation : MyUIViewController, IUITableViewDelegate, IUITableViewDataSource, INewMandateView
    {

        private List<SubModelDelegation> structureTable = new List<SubModelDelegation>();
        private NewMandatePresenter presenter;
        private UIViewControllerPickerData seguePickerData;
        private CellTypeDelegation celltype;
        private UIViewControllerPeopleChooseFavorite controllerChooseDelegation;
        private ControllerAssignChooseRole controllerChooseRole;
        private SubModelDelegation start;
        private SubModelDelegation end;
        private SubModelDelegation plus;
        private SubModelDelegation role;
        private AbstractRecipient modelSeletectedNew;
        private AbstractRecipient modelSeletectedRoleNew;

        public UIViewControllerNewDelegation(IntPtr handle) : base(handle)
        {
        }

        partial void ActionButtonClose(Foundation.NSObject sender)
        {
            this.DismissViewController(true, null);
        }


        partial void ActionButtonDone(Foundation.NSObject sender)
        {
            presenter.OnConfirm();
        }

        private void ConfigureStyle()
        {
            labelTitle.Text = Utility.LanguageConvert("title_new_delegation");
            Font.SetCustomStyleFont(labelTitle, Font.MODALE_TITLE, UITextAlignment.Center);
        }

        private void ConfigureDateTable()
        {
            structureTable.Clear();

            // 1 section
            structureTable.Add(new SubModelDelegation(CellTypeDelegation.Header, Utility.LanguageConvert("title_your_role"), Utility.LanguageConvert("")));
            structureTable.Add(new SubModelDelegation(CellTypeDelegation.Desc, IosNativeFactory.Instance().GetSessionData().userInfo.ruoli[0].descrizione, ""));

            // 2 section 
            structureTable.Add(new SubModelDelegation(CellTypeDelegation.Header, Utility.LanguageConvert("title_substitute_user"), Utility.LanguageConvert("")));
            plus = new SubModelDelegation(CellTypeDelegation.Plus, Utility.LanguageConvert("selected_delega"), Utility.LanguageConvert(""));
            structureTable.Add(plus);

            // 3 section
            role = new SubModelDelegation(CellTypeDelegation.Role, Utility.LanguageConvert("selected_delega_role"), Utility.LanguageConvert(""));
            structureTable.Add(role);

            // 4 section 
            structureTable.Add(new SubModelDelegation(CellTypeDelegation.Header, Utility.LanguageConvert("title_selected_date"), Utility.LanguageConvert("")));
            start = new SubModelDelegation(CellTypeDelegation.DateStart, Utility.LanguageConvert("start"), Utility.LanguageConvert(""));
            structureTable.Add(start);
            start.date = null;
            end = new SubModelDelegation(CellTypeDelegation.DateEnd, Utility.LanguageConvert("end"), Utility.LanguageConvert(""));
            structureTable.Add(end);
            end.date = null;
            tableView.ReloadData();
        }

        private void ConfigureTable()
        {
            tableView.DataSource = this;
            tableView.Delegate = this;
            tableView.RowHeight = UITableView.AutomaticDimension;
            tableView.EstimatedRowHeight = 100;
        }

        private void ConfigurePresenter()
        {
            presenter = new NewMandatePresenter(this,IosNativeFactory.Instance());
            presenter.OnViewReady();
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ConfigureTable();
            ConfigureStyle();
            ConfigureDateTable();
            ConfigurePresenter();
        }

        private void ConfigureTablet()
        {
            this.left.Constant = StyleTablet.WidthCommonPresentation(this.View);
            this.right.Constant = StyleTablet.WidthCommonPresentation(this.View);
            this.bottom.Constant = StyleTablet.TopKeyboard();
            this.top.Constant = StyleTablet.TOP_FROM_NAVIGATION;
            this.trailingButton.Constant = StyleTablet.LEFT_MARGIN_BUTTON_DEFAULT;
            this.leadingBotton.Constant = StyleTablet.LEFT_MARGIN_BUTTON_DEFAULT;
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            ConfigureTablet();
        }

        /// <summary>
        /// Opens the people favourite controller and method callback row selected
        /// </summary>
        private void OpenPeopleFavoriteController()
        {
            controllerChooseDelegation = (UIViewControllerPeopleChooseFavorite)Utility.GetControllerFromStoryboard("Storyboard_Delegation", "UIViewControllerPeopleChooseFavorite");
            controllerChooseDelegation.operationType = OperationTypeEnum.Delegate;
            this.PresentViewController(controllerChooseDelegation,true,null);    
            controllerChooseDelegation.CallbackRowSelected += (modelSeletected) => 
            {
                modelSeletectedNew = (AbstractRecipient) modelSeletected;
                plus.NewDelegation = true;
                plus.title_ = modelSeletectedNew.getTitle();
                controllerChooseDelegation.DismissViewController(true,null);
                presenter.SetAssignee(modelSeletectedNew );
                tableView.ReloadData();
            };
        }

        /// <summary>
        /// Opens the role controller.
        /// </summary>
        public void OpenRoleController()
        {
            presenter.OnSelectedRole(modelSeletectedNew); 

        }

  
        private void ShowRoles()
        {     
            controllerChooseRole = (ControllerAssignChooseRole)Utility.GetControllerFromStoryboard("Storyboard_SelectedAssign", "ControllerAssignChooseRole");
            controllerChooseRole.userSelected = modelSeletectedNew;
            this.PresentViewController(controllerChooseRole,true,null); 

            controllerChooseRole.CallbackGoToRoot = delegate ()
            {
                controllerChooseRole.DismissViewController(false, null);
            };

            controllerChooseRole.CallbackFavoriteChanged = (changed) =>
            {
                controllerChooseRole.DismissViewController(false, null); 
            };

            controllerChooseRole.CallbackChooseRole += (modelSeletectedRole) =>
            {
                SetRole(modelSeletectedRole);
            };

            controllerChooseRole.AssigneeIsEnabled = false;
        
        }

        private void SetRole(AbstractRecipient modelSeletectedRole)
        {
            modelSeletectedRoleNew = (AbstractRecipient)modelSeletectedRole;
            role.NewDelegation = true;
            role.title_ = modelSeletectedRoleNew.getTitle();
            role.value_ = modelSeletectedRoleNew.getSubtitle();
            controllerChooseRole.DismissViewController(true, null);
            presenter.SetAssigneeRole(modelSeletectedRoleNew.getId());
            tableView.ReloadData();
        }

        private void OpenDataPickerController(SubModelDelegation subModelTmp)
        {
            celltype = subModelTmp.cellType;
            this.PerformSegue("UIViewControllerPickerData", null);
        }

        private void CallbackChooseData()
        {
            if (seguePickerData == null)
             return;
            
            if (seguePickerData.date == null)
                return;

            if ( celltype == CellTypeDelegation.DateStart)
            {
                presenter.SetStartDate(seguePickerData.date.NSDateToDateTime());
                start.date = seguePickerData.date;
            }
            else if (celltype == CellTypeDelegation.DateEnd)
            {
                presenter.SetEndDate(seguePickerData.date.NSDateToDateTime());
                end.date = seguePickerData.date;
            }

            tableView.ReloadData();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.DestinationViewController is UIViewControllerPickerData)
            {
                seguePickerData = (UIViewControllerPickerData)segue.DestinationViewController;
                seguePickerData.Callback = CallbackChooseData;
                seguePickerData.withTime = true;
                seguePickerData.type = celltype;
            }
        }

        public UITVCellDelegationTitle Desc(SubModelDelegation data)
        {
            UITVCellDelegationTitle cell = (UITVCellDelegationTitle)tableView.DequeueReusableCell("UITVCellDelegationTitle");
            cell.Update(data);
            return cell;
        }

        public UITVCellDelegationDate Date(SubModelDelegation data)
        {
            UITVCellDelegationDate cell = (UITVCellDelegationDate)tableView.DequeueReusableCell("UITVCellDelegationDate");
            cell.Update(data);
            cell.Callback = OpenDataPickerController;
            return cell;
        }

        public UITVCellDelegationTitle Header(SubModelDelegation data)
        {
            UITVCellDelegationTitle cell = (UITVCellDelegationTitle)tableView.DequeueReusableCell("UITVCellDelegationTitle");
            cell.Update(data);
            return cell;
        }

        public UITVCellNewSelected Plus(SubModelDelegation data)
        {
            UITVCellNewSelected cell = (UITVCellNewSelected)tableView.DequeueReusableCell("UITVCellNewSelected");
            cell.Update(data);
            cell.CallbackRemoveAssign = RemoveAssignee;
            cell.Callback = OpenPeopleFavoriteController;
            return cell;
        }

        public UITVCellNewRoleSelected Role(SubModelDelegation data)
        {
            UITVCellNewRoleSelected cell = (UITVCellNewRoleSelected)tableView.DequeueReusableCell("UITVCellNewRoleSelected");
            cell.Update(data);
            cell.Callback = OpenRoleController;     
            return cell;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var data = structureTable[indexPath.Row];

            if (data.cellType == CellTypeDelegation.Header)
                return Header(data);
            else if (data.cellType == CellTypeDelegation.DateEnd || data.cellType == CellTypeDelegation.DateStart)
                return Date(data);
            else if (data.cellType == CellTypeDelegation.Plus)
                return Plus(data);
            else if (data.cellType == CellTypeDelegation.Role)
                return Role(data);
            else if (data.cellType == CellTypeDelegation.Desc)
                return Desc(data);
            
            return null;
        }

        public void RemoveAssignee()
        {
            presenter.SetAssignee(null);
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return structureTable.Count;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
        }

        #region Interface view

        public void OnNewMandateOK()
        {
            Alert.PopUpStateDocument(Home.Network.SectionType.SWITCH, this, ActionType.MANDATE);
        }

        public void EnableButton(bool enabled)
        {
            buttonDone.Enabled = enabled;
            Utility.ButtonStyleDefault(buttonDone,
                                       enabled ? Colors.COLOR_BUTTON_DEFAULT : Colors.COLOR_BUTTON_DISABLED_DEFAULT,
                                       UIColor.LightGray,
                                       UIColor.White);
            buttonDone.SetTitle(Utility.LanguageConvert("button_done").ToUpper(),UIControlState.Normal);
            Font.SetCustomStyleFont(buttonDone, enabled ? Font.ENABLED_BUTTONS : Font.DISABLED_BUTTONS);
        }

        public void ShowError(string e, bool isLight)
        {
            ShowErrorHelper.Show(this, isLight, e);
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View,isShow);
        }

        public void ShowRolePage()
        {
            ShowRoles();
        }

        public void RemoveRoleToo()
        {
            role.NewDelegation = false;
            role.title_ = Utility.LanguageConvert("selected_delega_role");
            tableView.ReloadData();
        }

        #endregion
    }
}
