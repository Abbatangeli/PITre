// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Delega.MVP;
using InformaticaTrentinaPCL.Home;
using InformaticaTrentinaPCL.iOS.Delega.Storyboard;
using InformaticaTrentinaPCL.iOS.EmbedComponent;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Session;
using InformaticaTrentinaPCL.iOS.TabBar.Document.TabDelega.Storyboard;
using InformaticaTrentinaPCL.iOS.TabBar.Root.Controller;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.Delega
{
    public partial class UIViewControllerListDelegation : MyUIViewController, IUITableViewDelegate, IUITableViewDataSource, IListaDelegheView
    {
        private DelegaPresenter delegaPresenter;
        private List<DelegaDocumentModel> list = new List<DelegaDocumentModel>();
        UIRefreshControl refresh;
        private DelegaDocumentModel revokeDelete;
        private String LastToken;

        public UIViewControllerListDelegation(IntPtr handle):base(handle)
        {
        }
         
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ShowViewEmpty(true);
            ConfigurePresenter();
            ConfigureTable();
            refresh = Utility.AddRefreshToTable(Sethandeler,tableView);
		}

        private void ConfigurePresenter()
        {
            delegaPresenter = new DelegaPresenter(this, IosNativeFactory.Instance());
            delegaPresenter.GetDelegaDocumentsList();
        }

        private void ConfigureTable()
        {
            tableView.DataSource = this;
            tableView.Delegate = this;
            tableView.RowHeight = UITableView.AutomaticDimension;
            tableView.EstimatedRowHeight = 100;
        }

        private void Sethandeler(object sender, EventArgs e)
        {
            refresh.EndRefreshing();
            delegaPresenter.OnPullToRefresh();
        }

        [Action("UnwindReloadListForNewDelegate:")]
        public void UnwindReloadListForNewDelegate(UIStoryboardSegue segue)
        {
            delegaPresenter.OnPullToRefresh();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
         
            var tokenNow = SessionDataManager.Instance().GetSessionData().userInfo.token;
            if (String.IsNullOrEmpty(LastToken))
            {
                LastToken = tokenNow;
                delegaPresenter.GetDelegaDocumentsList();
            }
            else // refresh 
            {
                delegaPresenter.OnPullToRefresh();
            }
        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }
        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            DelegaDocumentModel delegaDocument = list[indexPath.Row];

            if (Utility.IsTablet())
            {
                CellTabletListDelegation cell;
                cell = (CellTabletListDelegation)tableView.DequeueReusableCell("CellTabletListDelegation");
                cell.Update(delegaDocument);
                return cell;
            }
            else
            {
                UITVCellDelegation cell;
                cell = (UITVCellDelegation)tableView.DequeueReusableCell("UITVCellDelegation");
                if (cell == null)
                    cell = new UITVCellDelegation();
                cell.Update(delegaDocument);
                return cell;
            }
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return list.Count;
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {

        }

        [Export("tableView:canEditRowAtIndexPath:")]
        public bool CanEditRow(UITableView tableView, NSIndexPath indexPath)
        {
            return true;
        }

        private void Callback(bool isRevocation)
        {

            if (!isRevocation) return;
            
            if (revokeDelete != null)
                delegaPresenter.DoRevoke(revokeDelete);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.DestinationViewController is UIViewControllerRevocationDelegation)
            {
                UIViewControllerRevocationDelegation controller = (UIViewControllerRevocationDelegation)segue.DestinationViewController;
                controller.Callback = Callback;
            }
            else if (segue.DestinationViewController is EmbedComponentListEmpty)
            {
                EmbedComponentListEmpty empty = (EmbedComponentListEmpty)segue.DestinationViewController;
                empty.RefreshCallback = Sethandeler;
            }
          
        }

        [Export("tableView:editActionsForRowAtIndexPath:")]
        public UITableViewRowAction[] EditActionsForRow(UITableView tableView, NSIndexPath indexPath)
        {
            string title_a = Utility.LanguageConvert("removeDelegation").ToUpper();
            var removeDelegation = UITableViewRowAction.Create(UITableViewRowActionStyle.Normal, title_a.ToUpper(), (arg1, indexPathSelected) =>
            {
                revokeDelete = list[indexPath.Row];
                this.PerformSegue("UIViewControllerRevocationDelegation", null);
            });


            removeDelegation.BackgroundColor = Colors.COLOR_RED_DELEGATE_SWIPE;
            return new UITableViewRowAction[] { removeDelegation };
        }

        #region Interface
        public void UpdateList(List<DelegaDocumentModel> list)
        {
            if (list != null)
            {
                this.list.Clear();
                this.list.AddRange(list);
                ShowViewEmpty();
            }

            tableView.ReloadData();
        }

        /// <summary>
        /// Shows the view empty.  force = true nasconde sempre la view
        /// </summary>
        /// <param name="force">If set to <c>true</c> force.</param>
        private void ShowViewEmpty(bool force = false)
        {
            if (force) {
                errorView.Hidden = force;
                containerViewEmpty.Hidden = force;
                return;
            } else if (list != null && list.Count > 0) {
                errorView.Hidden = true;
                containerViewEmpty.Hidden = true;
            } else {
                errorView.Hidden = false;
                containerViewEmpty.Hidden = false;
            }
        }

        private void ResetTableView()
        {
            ShowViewEmpty();
            this.tableView.SetContentOffset(new CoreGraphics.CGPoint(0,0),true);
            this.tableView.ReloadData();
        }

        public void ShowError(string e, bool isLight)
        {
            ShowErrorHelper.Show(this, isLight, e,null, () => {
                ResetTableView();
            });
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View, isShow);
            if (isShow)
            ShowViewEmpty(isShow);
        }

        public void OnRevokeOk()
        {
            delegaPresenter.GetDelegaDocumentsList();
            //tableView.ReloadData();
        }

        #endregion
    }
}
