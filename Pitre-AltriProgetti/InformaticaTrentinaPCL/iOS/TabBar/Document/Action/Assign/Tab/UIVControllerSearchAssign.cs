// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Assegna;
using InformaticaTrentinaPCL.Assegna.MVPD;
using InformaticaTrentinaPCL.Delega;
using InformaticaTrentinaPCL.Home.MVPD;
using InformaticaTrentinaPCL.Interfaces;
using InformaticaTrentinaPCL.iOS.EmbedComponent;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.Utils;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Assign.Storyboard
{
    public partial class UIVControllerSearchAssign : UIViewController, ListenerEmbedSearch, IAssignableView//InterfaceComponentTableView
    {
        public Action<AbstractRecipient> CallbackSetAssign;
  
        public AssignablePresenter presenter;
       // private EmbedComponentTableView tableViewSearch;
        public AbstractDocumentListItem currentDocument;
        private AbstractRecipient userSelected;
        private ControllerMyTabBar myTabBar;

        public UIVControllerSearchAssign(IntPtr handle) : base(handle)
        {
        }

        public void ConfigureStye()
        {
            labelTitle.Text = Utility.LanguageConvert("selezionaAssegnatarioSmista");
            labelTitle.Lines = 2;
            Font.SetCustomStyleFont(labelTitle, Font.MODALE_TITLE, UITextAlignment.Center);
        }

        public void ConfigurePresenter()
        {
            presenter = new AssignablePresenter(this, IosNativeFactory.Instance(), currentDocument);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            this.View.EndEditing(true);
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
        }

      
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ConfigureStye();
            ConfigurePresenter();
            presenter.OnViewReady();
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            ConfigureTablet();
        }

        private void ConfigureTablet()
        {
            if (Utility.IsTablet())
            {
                leading.Constant = StyleTablet.MarginRightAndLeftForTableView(100);
                trailing.Constant = StyleTablet.MarginRightAndLeftForTableView(100);
                top.Constant = 20;
            }
        }

        partial void ActionButtonClose(Foundation.NSObject sender)
        {
            this.DismissViewController(true, null);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.DestinationViewController is EmbedComponentSearch)
            {
                EmbedComponentSearch embedSearch = (EmbedComponentSearch)segue.DestinationViewController;
                string s = LocalizedString.PLACEHOLDER_SEARCH_ASSIGNEE.Get();
                string c = Utility.LanguageConvert("cancel");
                embedSearch.ConfigureEmbedComponedSearch(s, c, LocalizedString.DESCRIPTION_SEARCH_SELECT_ASSIGNABLE.Get(), this);
            }
            else if (segue.DestinationViewController is ControllerMyTabBar)
            {
                myTabBar = (ControllerMyTabBar)segue.DestinationViewController;
                myTabBar.root = this;
            }
            else if (segue.DestinationViewController is ControllerAssignChooseRole)
            {
                ChooseRole(segue.DestinationViewController);
            }
        }

        private void ChooseRole(UIViewController controllerRole)
        {
            ControllerAssignChooseRole choose = (ControllerAssignChooseRole)controllerRole;
            if (userSelected != null)
                choose.userSelected = userSelected;
            choose.CallbackChooseRole = (obj) =>
            {
                presenter.OnAssigneeReceivedFromChooser(obj);
            };
            choose.CallbackFavoriteChanged = (changed) =>
            {
                if (changed)
                {
                    presenter.OnFavoritePullToRefresh().ContinueWith((arg) =>
                    { DismissViewController(false,null); });
                }
            };

            choose.CallbackGoToRoot = delegate ()
            {
                DismissViewController(false, null);
            };
        }

        public void ActionButtonClick()
        {
            myTabBar.ActionnButtonClearSearch();
            presenter.ClearSearch();
        }

        public void EditingTextField(UITextField textField)
        {

        }

        public void KeyboardReturnDone(UITextField textField)
        {
            presenter.SearchCorrispondenti(textField.Text, "");
        }

        #region IAssignableView

        public void UpdateModel(List<AbstractRecipient> listModels)
        {
            myTabBar.UpdateModel(listModels);
        }

        public void UpdateFavorite(List<AbstractRecipient> listFavorites)
        {
            myTabBar.UpdateFavorite(listFavorites);
        }

        public void UpdateSearchResults(List<AbstractRecipient> listResults)
        {
            myTabBar.UpdateSearchResults(listResults);
        }

        public void ShowTabsView(bool show)
        {
            myTabBar.ShowTabsView(show);
        }

        public void ShowSearchView(bool show)
        {
            myTabBar.ShowSearchView(show);
        }

        public void ShowError(string e, bool isLight)
        {
            myTabBar.ShowError(e);
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View, isShow);
        }

        public void OnFavoriteError(AbstractRecipient recipient)
        {
            myTabBar.OnFavoriteError(recipient);
        }

        public void ShowFavoriteError(string message)
        {
            myTabBar.ShowFavoriteError(message);
        }

        public void OnAssigneeSelected(AbstractRecipient selected)
        {
            DismissViewController(false, () =>
            {
                CallbackSetAssign(selected);
            });
        }

        public void UserSelected(AbstractRecipient abstractRecipient)
        {
            this.userSelected = abstractRecipient;
            this.PerformSegue("ControllerAssignChooseRole", null);
        }

        #endregion

        #region table view 

        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return myTabBar.RowsInSection(tableView,section);
        }

        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            return myTabBar.GetCell(tableView, indexPath);
        }
        #endregion
    }
}
