// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using InformaticaTrentinaPCL.Home;
using InformaticaTrentinaPCL.Home.MVPD;
using InformaticaTrentinaPCL.Home.Network;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Session;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Document.Common.Storyboard
{
    public enum ModeDocumentClass
    {
        SearchMode,
        FilterMode,
        TabBarMode
    }

    public partial class UITableViewCellDocument : UITableViewCell
    {
        UIViewController controller;
        bool IsFirstInit = false;
        AbstractDocumentListItem abstractDocument;
        DocumentListPresenter presenter;

        public UITableViewCellDocument(IntPtr handle) : base(handle)
        {
        }

        public UITableViewCellDocument()
        {
        }

        public void Update(UIViewController controller, AbstractDocumentListItem abstractDocument, SectionType stateDocument, DocumentListPresenter presenter)
        {
            if (this.controller == null)
                this.controller = controller;

            this.presenter = presenter;

            this.abstractDocument = abstractDocument;

            string data = this.GetDocData(abstractDocument);
            string mittente = string.IsNullOrEmpty(abstractDocument.GetMittente())
                                    ? data
                                    : data + "," + abstractDocument.GetMittente();

            var isAttachment = presenter.IsAttachment(abstractDocument);
            var hasFather = presenter.HasDocumentFather(abstractDocument);
            var hasAttachments = presenter.HasAttachments(abstractDocument);

            labelName.Text = mittente;

            labelDocumentSignType.Text = "";

            labelDocumentDescp.Text = abstractDocument.GetOggetto();
            //            labelDucumentSudDes.Text = string.IsNullOrEmpty(document.note) ? "" : document.note.ToUpper();
            labelDucumentSudDes.Text = abstractDocument.GetInfo();

            labelTypeDocument.Text = "";
            if (!string.IsNullOrEmpty(abstractDocument.GetEstensione()))
                labelTypeDocument.Text = abstractDocument.GetEstensione();

            if (isAttachment)
                image.Image = image.Image = UIImage.FromBundle("icon_attachment");
            else if (TypeDocument.FASCICOLO.Equals(abstractDocument.tipoDocumento)) // richiesta inversione icone image per fasciolo e documento
                image.Image = UIImage.FromBundle("icon_yellows");
            else 
                image.Image = UIImage.FromBundle("icon_document");

            Font.SetCustomStyleFont(labelName, Font.SENDER);
            Font.SetCustomStyleFont(labelDocumentDescp, Font.DOCUMENT_NAME_1);
            Font.SetCustomStyleFont(labelDucumentSudDes, Font.DESCRIPION);
            Font.SetCustomStyleFont(labelTypeDocument, Font.ICON_DESCRIPION);
            Font.SetCustomStyleFont(labelSegnatura, Font.SENDER);
            Font.SetCustomStyleFont(labelName, Font.SENDER);
            ManageSignatureInfo();

            if (Utility.IsTablet())
            {
                leftMargin.Constant = UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() ? 133 : 170;
                RightMargin.Constant = UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() ? 61 : 100;
                leadingImg.Constant = UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() ? 61 : 100;
            }

            lineAttachmentUp.BackgroundColor = (hasFather && isAttachment) ? Colors.COLOR_ATTACHMENT_LINE_BACKGROUND : UIColor.Clear;
            lineAttachmentDown.BackgroundColor = ((hasFather && isAttachment) || hasAttachments) ? Colors.COLOR_ATTACHMENT_LINE_BACKGROUND : UIColor.Clear;

            if (stateDocument == SectionType.SIGN && abstractDocument is SignDocumentModel)
            {
                var modelTmp = abstractDocument as SignDocumentModel;
                pulsantiWidth.Constant = 80;
                var Undefined = presenter.SignStatusUndefined(modelTmp.tipoFirma);
                this.firma.Hidden = Undefined;
                this.rifiuta.Hidden = Undefined;
                labelDocumentSignType.Text = presenter.GetLabelSignTypeDescr(modelTmp);

                toggleSign(firma, abstractDocument.signFlag, isAttachment);
                toggleReject(rifiuta, abstractDocument.rejectFlag, isAttachment);
            }
        }

        private string GetDocData(AbstractDocumentListItem item)
        {
            if (item is SignDocumentModel)
            {
                var m = item as SignDocumentModel;
                return m.GetDataToShow();
            }
            return item.GetData();
        }

        public override void LayoutSubviews()
        {
            base.LayoutSubviews();
            if (!IsFirstInit)
            {
                IsFirstInit = true;
                viewSeparatorFooter.BackgroundColor = Colors.FOOTER_SEPARATOR;
            }
        }

        partial void firmaAction(UIButton sender)
        {
            presenter.TapSign(abstractDocument);
        }

        partial void rifiutaAction(UIButton sender)
        {
            presenter.TapReject(abstractDocument);
        }

        private void toggleReject(UIButton button, bool state, bool isAttachment)
        {
            button.TintColor = state ? Colors.COLOR_RED_REJECT : UIColor.Black;
        }

        private void toggleSign(UIButton button, bool state, bool isAttachment)
        {
            button.TintColor = state ? Colors.COLOR_GREEN_SIGN : UIColor.Black;
        }

        private void ManageSignatureInfo()
        {
            SignatureInfo signatureInfo = this.abstractDocument.getSignatureInfo();
            labelSegnatura.Hidden = false;
            labelSegnatura.Text = signatureInfo.value;
            labelSegnatura.TextColor = signatureInfo.isSignature ? UIColor.FromRGB(204, 0, 0) : UIColor.Black;
        }
    }
}
