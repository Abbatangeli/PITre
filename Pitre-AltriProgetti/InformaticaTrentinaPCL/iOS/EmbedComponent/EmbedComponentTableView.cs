// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.ChangeRole;
using InformaticaTrentinaPCL.Interfaces;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Assign.Storyboard;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.EmbedComponent
{
    public interface InterfaceComponentTableView
    {
        nint NumberOfSections(UITableView tableView);
        nint RowsInSection(UITableView tableView, nint section);
        void RowSelected(UITableView tableView, NSIndexPath indexPath);
        UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath);
        UIView GetViewForHeader(UITableView tableView, nint section);
    }
   
    public enum TypeCellEmbeded
    {
        TITLE,
        TITLE_STAR,
        HEADER_TITLE,
        PHOTO_TITLE_STAR
    }

    public partial class EmbedComponentTableView : UIViewController,IUITableViewDelegate,IUITableViewDataSource
	{
        private InterfaceComponentTableView delegate_;
        private bool IsHeader = false;

		public EmbedComponentTableView (IntPtr handle) : base (handle)
		{
		}

        private void ConfigureTable()
        {
            tableView.Delegate = this;
            tableView.DataSource = this;
            tableView.RowHeight = UITableView.AutomaticDimension;
            tableView.EstimatedRowHeight = 50;
            tableView.SectionHeaderHeight = UITableView.AutomaticDimension;
            tableView.EstimatedSectionHeaderHeight = IsHeader ? 50 : 0;
        }

        public void SetHeader(bool IsHeader)
        {
            this.IsHeader = IsHeader;
        }

        public void ConfigureListTable(InterfaceComponentTableView delegate_)
        {
            this.delegate_ = delegate_;
        }

        /// <summary>
        /// Reloads the table view.
        /// </summary>
        public void ReloadTableView()
        {
            tableView.ReloadData();
        }

        public void EstimatedRowHeight(int estimate)
        {
            tableView.EstimatedRowHeight = estimate;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            labelMsgEmpty.Hidden = true;
            ConfigureTable();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }


        [Export("numberOfSectionsInTableView:")]
        public nint NumberOfSections(UITableView tableView)
        {
            if (this.delegate_ == null) 
                return 0;
            
            return this.delegate_.NumberOfSections(tableView);
        }

        [Export("tableView:viewForHeaderInSection:")]
        public UIView GetViewForHeader(UITableView tableView, nint section)
        {
            if (IsHeader)
                return this.delegate_.GetViewForHeader(tableView, section);
            else
                return new UIView();
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            if (this.delegate_ == null) return 0;
            return this.delegate_.RowsInSection(tableView, section);
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            if (this.delegate_ == null) return;
            delegate_.RowSelected(tableView, indexPath);
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            return delegate_.GetCell(tableView, indexPath);
        }

        public void SetMsgCenterTable(bool isVisible,String msg)
        {
            labelMsgEmpty.Text = msg;
            labelMsgEmpty.Hidden = !isVisible;
        }

        #region Cell supportate

        public CellAssignStar CreateRowStar(UITableView tableView, String title,bool isPrefered,Action<NSIndexPath> callbackStar, NSIndexPath indexPath)
        {
            CellAssignStar star = (CellAssignStar)tableView.DequeueReusableCell("CellAssignStar");
            star.Update(title,isPrefered,callbackStar,indexPath);
            return star;
        }

        public CellTitleEmbed CreateHeaderTitle(UITableView tableView, String title,UIColor color)
        {
            CellTitleEmbed cell = (CellTitleEmbed)tableView.DequeueReusableCell("CellTitleEmbed");
            cell.Update(title,color);
            return cell;
        }

        public CellTitleEmbed CreateRowTitle(UITableView tableView, String title)
        {
            CellTitleEmbed cell = (CellTitleEmbed)tableView.DequeueReusableCell("CellTitleEmbed");
            cell.Update(title);
            return cell;
        }

        public CellPhotoTitleStar CreateCell_Photo_Title_Star(UITableView tableView, String namePhoto,String title_,String nameStar,Action<NSIndexPath> callbackStar,NSIndexPath indexPath, bool enable=true)
        {
            CellPhotoTitleStar cell = (CellPhotoTitleStar)tableView.DequeueReusableCell("CellPhotoTitleStar");
            cell.Update(namePhoto,title_,nameStar,callbackStar,indexPath);
            cell.UserInteractionEnabled = enable;
            return cell;
        }

        public CellImgStarTwoTitle CreateCell_Photo_Title_Star_two_title(UITableView tableView, String iconName, String title, String desc, String nameStar, Action<NSIndexPath> callbackStar, NSIndexPath indexPath)
        {
            CellImgStarTwoTitle cell = (CellImgStarTwoTitle)tableView.DequeueReusableCell("CellImgStarTwoTitle");
            cell.Update(iconName, title, desc, nameStar, callbackStar, indexPath);
            return cell;
        }


        public CellPhotoTitle CreateCell_Photo_Title(UITableView tableView, String iconName, String title)
        {
            CellPhotoTitle cell = (CellPhotoTitle)tableView.DequeueReusableCell("CellPhotoTitle");
            cell.Update(title, iconName);
            return cell;
        }

        #endregion
    }
}
