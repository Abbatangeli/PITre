using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DocsPaVO.NotificationCenter
{
    /// <summary>
    /// Represents the entity Event
    /// </summary>
    public class Event
    {
        #region private fields

        private int _systemId;
        private string _dtaEvent;
        private int _idObject;
        private int _idSpecializedObject;
        private bool _notified = false;
        private Actors _actors;
        private string _configurationEventType;
        private List<Notification> _listNotifications;
        private string _notificationRecipients;
        private string _typeEvent;
        private string _multiplicity;
        private string _domainObject;
        private string _color;
        private int _idAdm;
        private string _idTypeEvent;
        private bool _followObject;
        #endregion

        #region constructor

        public Event()
        {
            this._notified = false;
        }

        #endregion

        #region public Property

        /// <summary>
        /// Event identifier
        /// </summary>
        public int SYSTEM_ID
        {
            get
            {
                return _systemId;
            }
            set 
            {
                _systemId = value;
            }
        }

        /// <summary>
        ///Id domain object (systemId of the profile, project or dpa_job)
        /// </summary>
        public int ID_OBJECT
        {
            get
            {
                return _idObject;
            }

            set
            {
                _idObject = value;
            }
        }

        /// <summary>
        /// Specialized for the type id of the event. For example in the case of event type Transm carried out it is a reference to
        /// DPA_TRASMISSIONE_SINGOLA
        /// </summary>
        public int ID_SPECIALIZED_OBJECT
        {
            get
            {
                return _idSpecializedObject;
            }

            set
            {
                _idSpecializedObject = value;
            }
        }

        /// <summary>
        /// True se l'evento è stato correttamente notificato ai potenziali destinatari
        /// </summary>
        public bool NOTIFIED
        {
            get
            {
                return _notified;
            }

            set
            {
                _notified = value;
            }
        }

        /// <summary>
        /// Data tracking event
        /// </summary>
        public string DTA_EVENT
        {
            get
            {
                return _dtaEvent;
            }

            set
            {
                _dtaEvent = value;
            }
        }

        /// <summary>
        /// Actors: event producer; recipients notifications generated by the event 
        /// </summary>
        public Actors ACTORS
        {
            get
            {
                return _actors;
            }

            set
            {
                _actors = value;
            }
        }

        /// <summary>
        /// Provides information about configuring the event type (OBB, CONF)
        /// </summary>
        public string CONFIGURATION_EVENT_TYPE
        {
            get
            {
                return _configurationEventType;
            }

            set
            {
                _configurationEventType = value;
            }
        }

        /// <summary>
        /// Provides information concerning the methodology to be followed to identify recipients of the notification of the event.
        /// </summary>
        public string NOTIFICATION_RECIPIENTS
        {
            get
            {
                return _notificationRecipients;
            }

            set
            {
                _notificationRecipients = value;
            }
        }

        /// <summary>
        /// Domain object to which the event is associated
        /// </summary>
        public string DOMAIN_OBJECT
        {
                get 
                {
                    return _domainObject;
                }
                set
                {
                    _domainObject = value;
                }
        }

        /// <summary>
        ///Represents the type of event
        /// </summary>
        public string TYPE_EVENT
        {
            get 
            {
                return _typeEvent;
            }

            set
            {
                _typeEvent = value;
            }
        }

        /// <summary>
        /// multiplicity (one, all)
        /// </summary>
        public string MULTIPLICITY
        {
            get
            {
                return _multiplicity;
            }

            set
            {
                _multiplicity = value;
            }
        }

        /// <summary>
        /// List notifications
        /// </summary>
        public List<Notification> NOTIFICATIONS
        {
            get
            {
                return _listNotifications;
            }

            set
            {
                _listNotifications = value;
            }
        }

        /// <summary>
        /// Color associated with the event type
        /// </summary>
        public string COLOR
        {
            get 
            {
                return _color;
            }

            set
            {
                _color = value;
            }
        }

        /// <summary>
        /// Administration where the event was triggered
        /// </summary>
        public int ID_ADM
        {
            get
            {
                return _idAdm;
            }
            set
            {
                _idAdm = value;
            }
        }

        public string ID_TYPE_EVENT
        {
            get
            {
                return _idTypeEvent;
            }
            set
            {
                _idTypeEvent = value;
            }
        }

        /// <summary>
        /// Return true if the event is related to the concept of domain object follow false otherwise
        /// </summary>
        public bool FOLLOW_DOMAIN_OBJECT
        {
            get 
            {
                return _followObject;
            }

            set
            {
                _followObject = value;
            }
        }

        #endregion

        #region public methods

        /// <summary>
        /// Adds a notification to the list
        /// </summary>
        /// <param name="receiver"></param>
        public void AddNotification(Notification notification)
        {
            try
            {
                _listNotifications.Add(notification);
            }
            catch (Exception exc)
            {
                throw exc;
            }
        }

        /// <summary>
        /// Removes a notification from the list
        /// </summary>
        /// <param name="idRole"></param>
        /// <param name="idUser"></param>
        public void DeleteNotification(Notification notification)
        {
            try
            {
                _listNotifications.Remove(notification);
            }
            catch (Exception exc)
            {
                throw exc;
            }
        }

        #endregion
    }
}
