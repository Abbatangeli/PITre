// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using InformaticaTrentinaPCL.iOS.Helper;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.Menu.Storyboard
{
    public partial class UIViewControllerRootSideMenu : UIViewController,IUIGestureRecognizerDelegate
    {
        public static string NAME_STORYBOARD = "Storyboard_Sidebar";
        public static string NAME_CONTROLLER = "UIViewControllerRootSideMenu";
        private bool IsDetailVisible = true;
        private static UIViewControllerRootSideMenu RootSideMenu;
        private UIViewControllerDetail detail;
        private UIViewControllerMaster master;
        private bool isMasterFullScreen = true;
        private nfloat largeMasterlLandscapeTablet = 500f;
        private nfloat largeDetailPhone = Utility.getScreenWidth() - 64;
        private nfloat heightDetail = UIScreen.MainScreen.Bounds.Height;
        private nfloat heightDetailPhone = Utility.getScreenHeight();
        private nfloat xInit = 0;
        private UIPanGestureRecognizer panGesture;
        private bool left = false;
        private bool right = false;
        private bool log = false;
		private bool completeLeftRight = true;
        private int initSwipe = 0;
        private int endSwipe = 22;
        private int Y_start = 0;
	
        public UIViewControllerRootSideMenu(IntPtr handle) : base(handle)
        {

        }

        private void Log(string msg, nfloat f)
        {
            if (log)
                Console.WriteLine(msg + ":" + f);
        }


        // la chiave qui false master , true table
        [Export("gestureRecognizer:shouldRequireFailureOfGestureRecognizer:")]
        public bool ShouldRequireFailureOf(UIGestureRecognizer gestureRecognizer, UIGestureRecognizer otherGestureRecognizer)
        {
            var p1 = otherGestureRecognizer.LocationInView(View);
            Utility.getScreenWidth();

            Log("ShouldRequireFailureOf x",p1.X);
            Log("ShouldRequireFailureOf x", p1.Y);

            if (UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() && Utility.IsTablet())
            {
                Log("UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() && Utility.IsTablet() x", p1.X);
                return true;
            }
            else if (p1.X >= initSwipe && p1.X <= endSwipe && p1.X != 0)
            {
                Log("p1.X >= initSwipe && p1.X <= endSwipe", p1.X);
                return false;
            }
           
            return true;
        }


        public void Print(String name,UIGestureRecognizer gestureRecognizer,UIGestureRecognizer otherGestureRecognizer,UITouch touch)
        {
            if (!log) return;

            Console.WriteLine("*********");
            Console.WriteLine(name);
            if (gestureRecognizer is UIPanGestureRecognizer )
                Console.WriteLine("DRAG e DROP");
            Console.WriteLine(gestureRecognizer.State.ToString());
                Console.WriteLine("*********");
        }


        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
            Console.WriteLine("ViewDidDisappear");
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            Console.WriteLine("ViewDidAppear");
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            Y_start = 0;
            newSidebarController();
            RegisterForNotificationsOrientations();
            SetSizeforOrientation(true);
            View.UserInteractionEnabled = true;

            panGesture = new UIPanGestureRecognizer(() =>
            {
                //Console.WriteLine("UIPanGestureRecognizer");

                if (UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() || !IsDetailVisible)
                {
                    return;
                }

                var p0 = panGesture.LocationInView(View);
                nfloat point = 0;
                if (panGesture.State == UIGestureRecognizerState.Began)
                {
                    left = false;
                    right = false;
					completeLeftRight = false;
					xInit = p0.X;
					Log("BEGIN",0);
                    this.View.EndEditing(true);
				}

                else if ((panGesture.State == UIGestureRecognizerState.Changed) && (panGesture.NumberOfTouches == 1))
                {

                    point = (p0.X - xInit);

                    if (point >= 0 && isMasterFullScreen && (point <= this.viewMaster.Frame.Width))
                    {
                        Log("DESTRA",0);
                        right = true;
                        completeLeftRight = right;
                        this.viewMaster.Frame = new CoreGraphics.CGRect(-this.viewMaster.Frame.Width + point, Y_start, this.viewMaster.Frame.Width, this.viewMaster.Frame.Height);
                        CompleteAnimationAlplaViewBlack(-this.viewMaster.Frame.Width + point, 0.50f);
                    }
                    else if (point <= 0 && isMasterFullScreen == false) // sinistra 
                    {
						Log("LEFT",0);
						left = true;
                        completeLeftRight = left;
                        this.viewMaster.Frame = new CoreGraphics.CGRect(point, Y_start, this.viewMaster.Frame.Width, this.viewMaster.Frame.Height);
                        CompleteAnimationAlplaViewBlack(point, 0.50f);
                    }

                }
                else if (panGesture.State == UIGestureRecognizerState.Ended && completeLeftRight)
                {
                    point = (p0.X - xInit);
					Log("FINE",0);

					point = point < 0 ? (point * (-1)) : (point);
                    right = point >= (this.viewMaster.Frame.Width / 2) ? ((right) || !(left)) : right = !right;
                    left = point >= (this.viewMaster.Frame.Width / 2) ? !(right) || (left) : left = !left;
                    isMasterFullScreen = left && !right;

                    if (left || right)
                    {
						Log("ANIMATION",0);
						CompleteAnimations(left ? (-this.viewMaster.Frame.Width) : (0));
                    }
                }
            });

            panGesture.Delegate = this;

            View.AddGestureRecognizer(panGesture);
        }

        private void CompleteAnimationAlplaViewBlack(nfloat point, nfloat alphaStart)
        {
            nfloat percentual = 100f;
            UIView viewBlack = this.detail.GetLeftBlack();
            viewBlack.Alpha = alphaStart;
            viewBlack.Hidden = false;
            nfloat percent = (point * (-1)) * percentual / this.viewMaster.Frame.Width;
            nfloat total = alphaStart * percent / percentual;
            nfloat newAlpha = alphaStart - total;
            viewBlack.Alpha = newAlpha;
        }

        private void CompleteAnimations(nfloat x)
        {

            Animation.Start(Animation.SHORT_ANIMATION,
            () =>
            {
                this.viewMaster.Frame = new CoreGraphics.CGRect(x, Y_start, this.viewMaster.Frame.Width, this.viewMaster.Frame.Height);
            },
            () =>
            {
                this.detail.HiddenLeftBlack(isMasterFullScreen || UIApplication.SharedApplication.StatusBarOrientation.IsLandscape());
            });

        }

        public void ToggleMenu()
        {
            isMasterFullScreen = !isMasterFullScreen;
            SetSizeforOrientation(false);
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            if (segue.DestinationViewController is UIViewControllerDetail)
            {
                detail = (UIViewControllerDetail)segue.DestinationViewController;
            }
            else if (segue.DestinationViewController is UIViewControllerMaster)
            {
                master = (UIViewControllerMaster)segue.DestinationViewController;
            }
        }

        private void newSidebarController()
        {
            UIViewControllerRootSideMenu.RootSideMenu = null;
            UIViewControllerRootSideMenu.RootSideMenu = this;
        }

        /// <summary>
        /// Sets the sizefor orientation. open and close menu left 
        /// </summary>
        /// <param name="isViewDiload">If set to <c>true</c> is view diload.</param>
        private void SetSizeforOrientation(bool isViewDiload)
        {
            nfloat largeDetail = UIScreen.MainScreen.Bounds.Width;
            nfloat largeMaster = largeDetailPhone;

            heightDetail = UIScreen.MainScreen.Bounds.Height;

            if (Utility.IsTablet())
                largeMaster = largeMasterlLandscapeTablet;
            else
                heightDetail = heightDetailPhone;


            nfloat height = heightDetail;
            nfloat xMaster = -largeMaster;
            nfloat xDetail = 0;

            if (Utility.IsTablet() && UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() && IsDetailVisible)
            {
                xMaster = 0;
                largeMaster = UIScreen.MainScreen.Bounds.Width / 3.0f;
                xDetail = largeMaster;
                largeDetail = UIScreen.MainScreen.Bounds.Width - largeMaster;
            }
            else if (isMasterFullScreen && UIApplication.SharedApplication.StatusBarOrientation.IsPortrait())
            {
                xMaster = -largeMaster;
                xDetail = 0;
            }
            else if (isMasterFullScreen && UIApplication.SharedApplication.StatusBarOrientation.IsLandscape() && Utility.IsTablet())
            {
                xMaster = 0;
                largeMaster = UIScreen.MainScreen.Bounds.Width / 3.0f;
                xDetail = largeMaster;
                largeDetail = UIScreen.MainScreen.Bounds.Width - largeMaster;
              
            }
            else if (isMasterFullScreen == false && UIApplication.SharedApplication.StatusBarOrientation.IsLandscape())
            {
                xMaster = 0;
                largeMaster = UIScreen.MainScreen.Bounds.Width / 3.0f;
                xDetail = largeMaster;
                largeDetail = UIScreen.MainScreen.Bounds.Width - largeMaster;
            }
            else if (isMasterFullScreen == false && UIApplication.SharedApplication.StatusBarOrientation.IsPortrait())
            {
                xMaster = 0;
                xDetail = 0;
            }

            nfloat animation = isViewDiload ? 0 : Animation.SHORT_ANIMATION;
        
            Animation.Start(animation, () =>
            {
                this.viewMaster.Frame = new CoreGraphics.CGRect(xMaster, Y_start, largeMaster, height);
                this.viewDetail.Frame = new CoreGraphics.CGRect(xDetail, Y_start, largeDetail, height);
            },
            () =>
            {
                this.detail.HiddenLeftBlack(isMasterFullScreen || UIApplication.SharedApplication.StatusBarOrientation.IsLandscape());
            });
        }

        public void RegisterForNotificationsOrientations()
        {
            NSNotificationCenter.DefaultCenter.AddObserver(UIApplication.DidChangeStatusBarOrientationNotification, (obj) =>
            {
                SetSizeforOrientation(false);
            });
        }

        /// <summary>
        /// Closes the menu.
        /// </summary>
		public static void CloseMenu()
        {
            RootSideMenu.ToggleMenu();
        }

        /// <summary>
        /// Ises the open.
        /// </summary>
        /// <returns><c>true</c>, if open was ised, <c>false</c> otherwise.</returns>
		public static bool IsOpen()
        {
            return RootSideMenu.isMasterFullScreen;
        }

        /// <summary>
        /// Sets the master visible.
        /// </summary>
        /// <param name="visible">If set to <c>true</c> visible.</param>
        public static void SetDetailVisible(bool visible)
        {
            RootSideMenu.IsDetailVisible = visible;
        }

        public static bool GetDetailVisible()
        {
            return RootSideMenu.IsDetailVisible;
        }

        /// <summary>
        /// Reload del master and detail the specified animation.
        /// </summary>
        /// <returns>The reload.</returns>
        /// <param name="animation">If set to <c>true</c> animation.</param>
        public static void Reload(bool animation)
        {
            RootSideMenu.SetSizeforOrientation(!animation);
        }


    }
}
