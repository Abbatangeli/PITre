// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Home;
using InformaticaTrentinaPCL.Home.Network;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.TabBar.Document.Common.Storyboard;
using InformaticaTrentinaPCL.Network;
using InformaticaTrentinaPCL.Utils;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.PopUp.Storyboard
{
    public partial class UIViewControllerPopUpDocumentState : UIViewController, IUITableViewDelegate, IUITableViewDataSource
    {
        public static string NAME_STORYBOARD = "Storyboard_PopUp";
        public static string NAME_CONTROLLER = "UIViewControllerPopUpDocumentState";
        public SectionType stateDocument;
        public ActionType actionType;
        public Dictionary<string, string> extra;
        public string documentTypeDescr;

        public UIViewControllerPopUpDocumentState(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            buttonNextDocument.SetTitle(actionType.SetDescriptionForTypeDocumentString(actionType.doneButton, GetDocumentTypeDescription()), UIControlState.Normal);
            this.View.BackgroundColor = Colors.COLOR_background_alert;
            labelDescDocument.Text = FormatTextForDocumentType(LocalizedString.DOCUMENT_SORTED.Get()).ToUpper();
            buttonNextDocument.Hidden = false;
            buttonClose.Hidden = false;
            imageClose.Hidden = false;
            Utility.ButtonStyleDefault(buttonNextDocument, Colors.COLOR_BUTTON_DEFAULT, UIColor.LightGray, UIColor.White);

            // TAB TO_DO
            if (stateDocument == SectionType.TODO)
            {
                // refuse , accept adl , accept , assign
                buttonNextDocument.Hidden = false;
                image.Image = UIImage.FromBundle("iconAccept");
            }
            // TAB FIRMA
            else if (stateDocument == SectionType.SIGN)
            {
                buttonNextDocument.Hidden = true;
                image.Image = UIImage.FromBundle("iconsignature");
            }
            else if (stateDocument == SectionType.SWITCH)
            {
                buttonNextDocument.Hidden = true;
                image.Image = UIImage.FromBundle("iconDelegation");
            }

            labelDescDocument.Text = actionType.SetDescriptionForTypeDocumentString(actionType.doneText, GetDocumentTypeDescription());

            table.Hidden = true;
            if (extra != null && extra?.Count > 0)
            {
                labelDescDocument.Hidden = true;
                table.Hidden = false;
            }

            SetTableLayout();
        }

        public override void ViewWillDisappear(bool animated)
        {
            base.ViewWillDisappear(animated);
        }

        private string FormatTextForDocumentType(string textToFormat)
        {
            if (textToFormat.Contains("{0}"))
            {
                return string.Format(textToFormat, GetDocumentTypeDescription());
            }

            return textToFormat;
        }

        private string GetDocumentTypeDescription()
        {
            string docDescr = "";
            if (extra != null)
                extra.TryGetValue(Constants.DOCUMENT_TYPE_DECRIPTION_KEY, out docDescr);
            return docDescr;
        }

        private void SetTableLayout()
        {
            table.RowHeight = UITableView.AutomaticDimension;
            table.EstimatedRowHeight = 50.0f;
        }

        partial void ActionButtonClose(Foundation.NSObject sender)
        {
            if (stateDocument == SectionType.SWITCH)
            {
                this.PerformSegue("UnwindReloadListForNewDelegate", null);
            }
            else
                this.PerformSegue("UnwindReturnToDocument", null);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
        }

        partial void ActionButtonNexDocument(Foundation.NSObject sender)
        {
            this.PerformSegue("UnwindReturnToDocument", null);
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();

            this.left.Constant = StyleTablet.MarginRightAndLeftForViewController();
            this.right.Constant = StyleTablet.MarginRightAndLeftForViewController();
            this.bottom.Constant = StyleTablet.MarginBottomAndTopForViewController();
            this.top.Constant = StyleTablet.MarginBottomAndTopForViewController();
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            var result = extra != null && extra?.Count > 0;
            return result ? 1 + extra.Count : 0;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            CellTableInfo cellLoader = (CellTableInfo)tableView.DequeueReusableCell("CellTableInfo");
            var title = labelDescDocument.Text;
            string key = "";
            if (indexPath.Row > 0)
            {
                List<string> keyList = new List<string>(this.extra.Keys);
                key = keyList[indexPath.Row - 1];
                if (key != Constants.DOCUMENT_TYPE_DECRIPTION_KEY)
                {
                    extra.TryGetValue(key, out title);
                    cellLoader.UpdateOnLeft(title, labelDescDocument.Font);
                }
            }
            else
            {
                cellLoader.Update(title, labelDescDocument.Font);
            }

            return cellLoader;
        }
    }
}