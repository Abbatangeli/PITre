// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.ChooseInstance;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Storyboard;
using InformaticaTrentinaPCL.Login.Network;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.ChooseInstance.Storyboard
{
  public partial class UIViewControllerChooseInstance : UIViewController, IChooseInstanceView
  {
    private ChooseInstancePresenter presenter;
    private ChooseInstanceTableSource _tableSource;
    private WeakReference<UIViewControllerLogin> controllerReference;
    public UIViewControllerLogin LoginController
    {
      get
      {
        UIViewControllerLogin _controller = null;
        controllerReference.TryGetTarget(out _controller);
        return _controller;
      }
      set { controllerReference = new WeakReference<UIViewControllerLogin>(value); }
    }

    public UIViewControllerChooseInstance(IntPtr handle) : base(handle)
    {
    }

    public static UIViewControllerChooseInstance CreateChooseInstanceViewController(UIViewControllerLogin loginController)
    {
      var storyboard = UIStoryboard.FromName("Storyboard_Choose_Instance", null);
      var vc = storyboard.InstantiateViewController("UIViewControllerChooseInstance") as UIViewControllerChooseInstance;
      vc.LoginController = loginController;
      return vc;
    }

    public override void ViewDidLoad()
    {
      base.ViewDidLoad();

      SetFontStyle();
      SetTableLayout();
      SetTableSource();

      SetPresenter();
    }

    private void SetPresenter()
    {
      presenter = new ChooseInstancePresenter(this, IosNativeFactory.Instance());
      presenter.UpdateListInstance();
    }

    private void SetTableSource()
    {
      _tableSource = new ChooseInstanceTableSource(this);
      tableView.Source = _tableSource;
    }

    private void SetFontStyle()
    {
      Font.SetCustomStyleFont(titleLabel, Font.PAGE_TITLE_BLUE);
      titleLabel.Text = Utility.LanguageConvert("choose_instance_title").ToUpper();
    }

    private void SetTableLayout()
    {
      this.tableView.RowHeight = UITableView.AutomaticDimension;
      this.tableView.EstimatedRowHeight = 50.0f;
    }

    public void ShowError(string e, bool isLight = false)
    {
      ShowErrorHelper.Show(this, isLight: isLight, errorMessage: e);
    }

    public void OnUpdateLoader(bool isShow)
    {
      Utility.Loading(this.View, isShow);
    }

    public void UpdateList(List<InstanceModel> list)
    {
      this._tableSource.UpdateTable(list);
    }

    public void SavePreferredInstance(string description, string url)
    {
      var preferences = new Preferences();
      preferences.Set(Constant.KEY_INSTANCE_URL, url);
      preferences.Set(Constant.KEY_INSTANCE_SAVED, description);
      
      presenter.OpenViewLogin();
    }

    public void OpenLoginView()
    {
      this.DismissViewController(animated: true, completionHandler: DismissCompletionHandler);
    }

    private void DismissCompletionHandler()
    {
      LoginController.SetNewEnviroment();
    }

    public void ReloadTable()
    {
      this.tableView.ReloadData();
    }

    public void SetModelSelected(InstanceModel model)
    {
      presenter.SetInstancePreferred(currentPreferredInstance: model);
    }

    protected override void Dispose(bool disposing)
    {
      base.Dispose(disposing);
      
      System.Diagnostics.Debug.WriteLine("Choose instance controller is being disposed");
    }
  }

  public class ChooseInstanceTableSource : UITableViewSource
  {
    private string chooseCellIdentifier = "CellChooseInstance";
    private List<InstanceModel> modelList = new List<InstanceModel>();

    private WeakReference<UIViewControllerChooseInstance> controllerReference;
    public UIViewControllerChooseInstance ChooseInstanceController
    {
      get
      {
        UIViewControllerChooseInstance _controller = null;
        controllerReference.TryGetTarget(out _controller);
        return _controller;
      }
      set { controllerReference = new WeakReference<UIViewControllerChooseInstance>(value); }
    }

    public ChooseInstanceTableSource(UIViewControllerChooseInstance chooseInstanceController)
    {
      this.ChooseInstanceController = chooseInstanceController;
    }

    public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
    {
      var cell = tableView.DequeueReusableCell(chooseCellIdentifier) as UITableViewCellChooseInstance;
      //cell.SetContent("Qualche contentQualche contentQualche contentQualche contentQualche contentQualche contentQualche contentQualche contentQualche contentQualche content");
      cell.SetContent(modelList[indexPath.Row].descrizione);

      return cell;
    }

    public override nint RowsInSection(UITableView tableview, nint section)
    {
      return modelList.Count;
    }

    public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
    {
      InstanceModel modelSelected = modelList[indexPath.Row];
      ChooseInstanceController.SetModelSelected(model: modelSelected);
    }

    public void UpdateTable(List<InstanceModel> list)
    {
      modelList = list;
      this.ChooseInstanceController?.ReloadTable();
    }
  }
}