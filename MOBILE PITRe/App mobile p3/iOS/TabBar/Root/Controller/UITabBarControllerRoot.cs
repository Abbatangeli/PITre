// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using InformaticaTrentinaPCL.Filter;
using InformaticaTrentinaPCL.Home;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Menu.Storyboard;
using InformaticaTrentinaPCL.iOS.TabBar.Document.Common.Storyboard;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Root.Storyboard
{
    public partial class UITabBarControllerRoot : UITabBarController
    {
        public const int DEFAULT_OPEN_TAB_PAGE = 2; // tab TO_DO
        private int LAST_ROW_TAB_SELECTED = DEFAULT_OPEN_TAB_PAGE;
        private bool ISViewDidLoad = false;
        private static UITabBarControllerRoot tabBarController;
        private bool ISClickTabBar = false;
        public TabBarNavigationManager myNavigationManager;

		public static void IsClickTabBar(bool values)
        {
            UITabBarControllerRoot.tabBarController.ISClickTabBar = values;
        }

        public static void SetItemTabBar(int selectedIndex)
        {
            UITabBarControllerRoot.tabBarController.SetSelectedIndex(selectedIndex);	
        }

        public static int GetItemSelected()
        {
            try
            {
              return (int)UITabBarControllerRoot.tabBarController.SelectedIndex;    
            }
            catch
            {
                return DEFAULT_OPEN_TAB_PAGE;   
            }

		}

        /// <summary>
        /// Titoli tab bar 
        /// </summary>
        /// <returns>The tab.</returns>
		public static String[] TitlesTab()
		{
			String[] titlesTab = new String[]
		  {
			Utility.LanguageConvert("area_jobs"),
			Utility.LanguageConvert("title_navigation_signature"),
			Utility.LanguageConvert("title_navigation_todo"),
			Utility.LanguageConvert("title_navigation_delegate"),
            Utility.LanguageConvert("title_navigation_search")
		  };

            return titlesTab;
		}

        public UITabBarControllerRoot(IntPtr handle) : base(handle)
        {
        }

        #region unwind 

        [Action("UnwindReturnToDocument:")]
        public void UnwindReturnToDocument(UIStoryboardSegue segue)
        {
            if (!ISViewDidLoad)
                SelectedIndex = LAST_ROW_TAB_SELECTED;

            ISViewDidLoad = false;
        }

        #endregion

        public void SetSelectedIndex(int SelectedIndex)
        {
            this.SelectedIndex = SelectedIndex;
			SetLastRowAndNavigation(SelectedIndex);
		}

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }


        public void RegisterDidChangeStatusBarOrientationNotification()
		{
            NSNotificationCenter.DefaultCenter.AddObserver(UIApplication.DidChangeStatusBarOrientationNotification,(obj) => 
            {
                this.Navigation(TitlesTab()[LAST_ROW_TAB_SELECTED], UIApplication.SharedApplication.StatusBarOrientation.IsLandscape());
           });
	    }

		public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ISViewDidLoad = true;
            Utility.CreateCustomTabBar(this, TitlesTab().Length);
            var controllers = this.ViewControllers;
            this.SetSelectedIndex(DEFAULT_OPEN_TAB_PAGE);
            this.TabBar.Hidden = Utility.IsTablet();
            tabBarController = null;
            tabBarController = this;
            this.RegisterDidChangeStatusBarOrientationNotification();
        }

        private void CheckOpenUrlApp()
        {
            if (AppDelegate.sharedUrl != null)
            {

            }

        }

        public void Navigation(string title_, bool IsLandscape)
        {
            ActionNavigationType[] buttonLeft = { ActionNavigationType.ActionMenu };
            ActionNavigationType[] buttonRight = { ActionNavigationType.ActionPlus };
           
            if (title_ == Utility.LanguageConvert("title_navigation_todo"))
            {
                ActionNavigationType[] buttonRighTmp = { };
                buttonRight = buttonRighTmp;
            }
            else if (title_ == Utility.LanguageConvert("title_navigation_signature"))
            {
                ActionNavigationType[] buttonRighTmp = { ActionNavigationType.ActionSignDocument,ActionNavigationType.ActionFilter };
                buttonRight = buttonRighTmp ;
            }
            else if (title_ != Utility.LanguageConvert("title_navigation_delegate"))
            {
                buttonRight[0] = ActionNavigationType.ActionFilter;
            }


            buttonLeft = IsLandscape ? null : buttonLeft;

            Helper.Navigation.NavigationCustom(title_.ToUpper(), this, buttonLeft, buttonRight, (obj) =>
            {
                myNavigationManager.PopViewController(true);

                if (obj == ActionNavigationType.ActionMenu)
                {
                    UIViewControllerRootSideMenu.CloseMenu();
                }
                else if (obj == ActionNavigationType.ActionPlus)
                {
                    this.NavigationController.PerformSegue("UIViewControllerNewDelegation", null);
                }
                else if (obj == ActionNavigationType.ActionFilter)
                {
                    TabBarNavigationManager.Instance().NotificationCallbackFilter();
                }
                else if (obj == ActionNavigationType.ActionSignDocument)
                {
                    TabBarNavigationManager.Instance().NotificationCallSignDocument();
                }
              
            });
        }
              
        private void SetLastRowAndNavigation(int row)
        {
			LAST_ROW_TAB_SELECTED = row;
            this.Navigation(TitlesTab()[row],this.InterfaceOrientation.IsLandscape());
        }

        public override void ItemSelected(UITabBar tabbar, UITabBarItem item)
        {
            SetLastRowAndNavigation((int)item.Tag);
        }
    }
}