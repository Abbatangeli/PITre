// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.CommonAction;
using InformaticaTrentinaPCL.CommonAction.MVP;
using InformaticaTrentinaPCL.Home;
using InformaticaTrentinaPCL.Home.MVPD;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Session;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Root.Storyboard
{
      /// <summary>
      ///  questa classe è in grado di gestire i 3 controller Action refuse , Action adl , action 
     /// </summary>
		public partial class UIVControllerIActionPresenter : UIViewController, ActionCommonInterface
		{
        
            private UIVControllerCommonAction commonAction;
			private List<ActionCommonModel> model;
			public IDocumentListItem documentListItem;
			private string placeholderNote = Utility.LanguageConvert("tetx_view_note");
			private nfloat heightDefault = 0;
			public ActionType actionType;
            public IActionPresenter actionPresenter;

			public UIVControllerIActionPresenter(IntPtr handle) : base(handle)
			{
			}


			public override void ViewDidLoad()
			{
				base.ViewDidLoad();
				model = new List<ActionCommonModel>();
				model.Add(new ActionCommonModel(ActionCellType.ActionCellTypeHeader));
				model.Add(new ActionCommonModel(ActionCellType.ActionCellTypeNote));

				Navigation.SetNavigationOnlyBack(actionType.titleBar, this.NavigationItem, this.NavigationController, (obj) =>
				{
					this.NavigationController.PopViewController(true);
				});

				actionPresenter = new ActionAccettaPresenter(commonAction, SessionDataManager.Instance().GetSessionData());
			}

			public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
			{
				base.PrepareForSegue(segue, sender);

				if (segue.DestinationViewController is UIVControllerCommonAction)
				{
					commonAction = (UIVControllerCommonAction)segue.DestinationViewController;
					commonAction.ConfigureTable(this);
				}
			}

			public void ActionButtonConfirmation()
			{
				Alert.PopUpStateDocument(Home.Network.SectionType.TODO, this, this.actionType);
			}

			public void ItemSeletecd(UITableView table, NSIndexPath indexPath)
			{
				// item selezionati 
			}

			public int NumberRow()
			{
				if (model != null)
					return model.Count;

				return 0;
			}

			public string SetTitleFooter()
			{
				return actionType.confirmButton;
			}

			UITableViewCell ActionCommonInterface.CreateRow(UITableView table, NSIndexPath indexPath, Action<UITextView, bool, bool> calbackNote)
			{
				if (model[indexPath.Row].type == ActionCellType.ActionCellTypeNote)
					return UITVCDocumentNote.CreateRow(table, placeholderNote, heightDefault, calbackNote);

				return UITVCDocumentHeaderSignature.CreateRow(table, documentListItem);
			}

			void ActionCommonInterface.ChangeTextNote(UITextView text, bool isReloadHeight, bool closeEditing)
			{
				placeholderNote = text.Text;

				if (isReloadHeight)
				{
					commonAction.ReloadTable();
					heightDefault = text.ContentSize.Height;
				}
			}
		}
	}