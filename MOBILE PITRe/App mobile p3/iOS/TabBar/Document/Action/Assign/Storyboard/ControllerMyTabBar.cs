// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Assegna.MVPD;
using InformaticaTrentinaPCL.Interfaces;
using InformaticaTrentinaPCL.iOS.EmbedComponent;
using InformaticaTrentinaPCL.iOS.Helper;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Assign.Storyboard
{

    public enum MyTabAssign
    {
        Modello,
        Preferiti,
        Cerca
    }

    public partial class ControllerMyTabBar : UIViewController, InterfaceComponentTableView, IAssignableView
    {
        private EmbedComponentTableView tableView;
        private MyTabAssign tabWatch;
        private MyTabAssign tabWatchLast;
        private List<AbstractRecipient> list;

        private List<AbstractRecipient> listModel;
        private List<AbstractRecipient> listStar;
        private List<AbstractRecipient> listSearch;

        public UIVControllerSearchAssign root;

        public ControllerAssignSearch controllerSearch;

        public ControllerMyTabBar(IntPtr handle) : base(handle)
        {
        }

        void ConfigureTab()
        {
            buttonStar.Tag = 1;
            buttonModel.Tag = 0;
            viewFooter.BackgroundColor = Colors.FOOTER_SEPARATOR;
        
            buttonStar.SetTitle(Utility.LanguageConvert("tab2"),UIControlState.Normal);
            buttonModel.SetTitle(Utility.LanguageConvert("tab1"),UIControlState.Normal);
            Font.SetCustomStyleFont(buttonStar,Font.LINK_TITLE_BUTTON_BLUE);
            Font.SetCustomStyleFont(buttonModel, Font.LINK_TITLE_BUTTON_BLUE);

            viewFooterSeleStar.BackgroundColor = UIColor.Clear;
            viewFooterSeleModel.BackgroundColor = Colors.COLOR_BLUE_TEXT_ROW_COLOR;
            buttonModel.SetTitleColor(Colors.COLOR_BLUE_TEXT_ROW_COLOR,UIControlState.Normal);
            buttonStar.SetTitleColor(UIColor.Black, UIControlState.Normal);
            containerTab.Hidden = false;
            containerSearch.Hidden = true;
            labelEmptyTab.Hidden = true;
            labelEmptySearch.Hidden = true;
            labelEmptyTab.Text = Utility.LanguageConvert("empty_model");
            labelEmptySearch.Text = Utility.LanguageConvert("empty_search");
        }

        public override void ViewWillLayoutSubviews()
        {
            base.ViewWillLayoutSubviews();
            leading.Constant = Utility.IsTablet()?20:0;
            trailing.Constant = Utility.IsTablet()?20:0;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ConfigureTab();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.DestinationViewController is EmbedComponentTableView)
            {
                tableView = (EmbedComponentTableView)segue.DestinationViewController;
                tableView.ConfigureListTable(this);
            }

            if (segue.DestinationViewController is ControllerAssignSearch)
            {
                controllerSearch = (ControllerAssignSearch)segue.DestinationViewController;
                controllerSearch.delegate_ = this;
            }



        }

        #region

        partial void ActionButtonTab(NSObject sender)
        {
            var buttonSelected = (UIButton)sender;
            if (buttonSelected.Tag == 0)
            {
                tabWatch = MyTabAssign.Modello;
                list = listModel;
                viewFooterSeleStar.BackgroundColor = UIColor.Clear;
                viewFooterSeleModel.BackgroundColor = Colors.COLOR_BLUE_TEXT_ROW_COLOR;
                buttonModel.SetTitleColor(Colors.COLOR_BLUE_TEXT_ROW_COLOR, UIControlState.Normal);
                buttonStar.SetTitleColor(UIColor.Black, UIControlState.Normal);
                tabWatchLast = tabWatch;
                labelEmptyTab.Text = Utility.LanguageConvert("empty_model");
                labelEmptyTab.Hidden = list != null && list.Count > 0 ? true : false;
            }
            else if (buttonSelected.Tag == 1)
            {
                tabWatch = MyTabAssign.Preferiti;
                list = listStar;
                viewFooterSeleStar.BackgroundColor = Colors.COLOR_BLUE_TEXT_ROW_COLOR;
                viewFooterSeleModel.BackgroundColor = UIColor.Clear;
                buttonModel.SetTitleColor(UIColor.Black, UIControlState.Normal);
                buttonStar.SetTitleColor(Colors.COLOR_BLUE_TEXT_ROW_COLOR, UIControlState.Normal);
                tabWatchLast = tabWatch;
                labelEmptyTab.Text = Utility.LanguageConvert("empty_star");
                labelEmptyTab.Hidden = list != null && list.Count > 0 ? true : false;
            }

            tableView.ReloadTableView();
        }

        #endregion

        #region Interfaccia Table

        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return list!=null?list.Count:0;
        }

        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            var model = list[indexPath.Row];
            root.presenter.OnSelect(model);
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {

            var model = list[indexPath.Row];

            if (tabWatch == MyTabAssign.Modello)
            {
                return this.tableView.CreateRowTitle(tableView, model.getTitle());    
            }
            else if (tabWatch == MyTabAssign.Preferiti)
            {
                String nameStar = model.isPreferred() ? "start_full" : "start_empty";
                return this.tableView.CreateCell_Photo_Title_Star(tableView, Utility.GetImageDocument(model.getRecipientType()), model.getTitle(), nameStar, (obj) => {
                    // callback STAR
                    ChangeStar(indexPath);
                }, indexPath);
              
            }
            else if (tabWatch == MyTabAssign.Cerca)
            {
                return this.tableView.CreateRowStar(tableView, model.getTitle(), model.isPreferred(), (obj) => {
                    // callback STAR
                    ChangeStar(indexPath);
                }, indexPath);
            }

            return null;
        }

        #endregion


        private void ChangeStar(NSIndexPath indexPath,AbstractRecipient model = null,bool IsPresenter = true)
        {
            AbstractRecipient model_tmp;
            if (model == null && indexPath != null)
                model_tmp = list[indexPath.Row];
            else
                model_tmp = model;

            var old = model_tmp.isPreferred();
            model_tmp.setPreferred(!old);
            if (IsPresenter)
            root.presenter.SetFavorite(model_tmp, !old);

            tableView.ReloadTableView();
            controllerSearch.tableView.ReloadTableView();
        }


        #region Interfaccia presenter

        public void UpdateModel(List<AbstractRecipient> listModels)
        {
            listModel = listModels;
            if (tabWatch == MyTabAssign.Modello)
            {
                list = listModel;
                labelEmptyTab.Hidden = list != null && list.Count > 0 ? true : false;
                labelEmptySearch.Hidden = true;
            }
            tableView.ReloadTableView();
        }

        public void UpdateFavorite(List<AbstractRecipient> listFavorites)
        {
            listStar = listFavorites;
            if (tabWatch == MyTabAssign.Preferiti)
            {
                list = listStar;
                labelEmptyTab.Hidden = list != null && list.Count > 0 ? true : false;
                labelEmptySearch.Hidden = true;
            }
            tableView.ReloadTableView();
        }

        public void UpdateSearchResults(List<AbstractRecipient> listResults)
        {
            listSearch = listResults;
            if (tabWatch == MyTabAssign.Cerca)
            {
                list = listSearch;
                labelEmptySearch.Hidden = list != null && list.Count > 0 ? true : false;
                labelEmptyTab.Hidden = true;
            }
            controllerSearch.tableView.ReloadTableView();
        }

        public void ShowTabsView(bool show)
        {
            containerTab.Hidden = !show;
        }

        public void ShowSearchView(bool show)
        {
            containerSearch.Hidden = !show;
            if (show)
            {
                tabWatch = MyTabAssign.Cerca;
                labelEmptyTab.Hidden = true;
            }

        }

        public void ActionnButtonClearSearch()
        {
            tabWatch = tabWatchLast;

            if (tabWatch == MyTabAssign.Modello)
                list = listModel;
            else
                list = listStar;

            tableView.ReloadTableView();
        }

        public void OnFavoriteError(AbstractRecipient recipient)
        {
            ChangeStar(null, recipient, false);
        }

        public void ShowFavoriteError(string message)
        {
            ShowErrorHelper.Show(this,true,message);
        }

        public void OnAssigneeSelected(AbstractRecipient selected)
        {
            // implementazione presente in UIVControllerSearchAssign
        }

        public void UserSelected(AbstractRecipient abstractRecipient)
        {
            // implementazione presente in UIVControllerSearchAssign
        }

        public void ShowError(string e, bool isLight = false) //TODO CHECK IF IS CORRECT
        {
            ShowErrorHelper.Show(this, isLight, e, null, () =>
            {

            });
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View,isShow);
        }

        public UIView GetViewForHeader(UITableView tableView, nint section)
        {
            return null;
        }

        #endregion


    }
}
