// This file has been autogenerated from a class added in the UI designer.
using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Assegna;
using InformaticaTrentinaPCL.Assegna.MVPD;
using InformaticaTrentinaPCL.ChangeRole;
using InformaticaTrentinaPCL.Interfaces;
using InformaticaTrentinaPCL.iOS.EmbedComponent;
using InformaticaTrentinaPCL.iOS.Helper;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Assign.Storyboard
{
    public delegate void GoToRoot();
    public partial class ControllerAssignChooseRole : UIViewController, ISelectRoleView, InterfaceComponentTableView
    {
        private EmbedComponentTableView componentTableView;
        public AbstractRecipient userSelected;
        public Action<AbstractRecipient> CallbackChooseRole;
        private SelectRolePresenter presenter;
        List<RuoloInfo> listRoles;
        public Action<bool> CallbackFavoriteChanged;
        public GoToRoot CallbackGoToRoot;
        public bool AssigneeIsEnabled = true;

        partial void ActionButtonBack(NSObject sender)
        {
            presenter.OnBackPressed();
        }

        partial void ActionButtonExit(NSObject sender)
        {
            DismissViewController(true, null);
            CallbackGoToRoot();
        }

	    public void GoBack(AbstractRecipient abstractRecipient, bool isFavoriteChanged)
	    {
	        DismissViewController(true,null);
            CallbackFavoriteChanged(isFavoriteChanged);
	    }

	    public ControllerAssignChooseRole (IntPtr handle) : base (handle)
		{
		}

        void ConfigurePresenter()
        {
            presenter = new SelectRolePresenter(this, IosNativeFactory.Instance(), userSelected);
            presenter.OnViewReady();
        }

        void ConfigureStyle()
        {
            titleLabel.Text = Utility.LanguageConvert("title_selected_role");
            Font.SetCustomStyleFont(titleLabel, Font.MODALE_TITLE,UITextAlignment.Center);
            assegnatario.Text = Utility.LanguageConvert("sub_title_assignee");
            Font.SetCustomStyleFont(assegnatario, Font.LINK_TO_PAGE_SECTION, UITextAlignment.Center);
            buttonright.TintColor = UIColor.Black;
            assegnatario.TextColor = UIColor.Black;
        }

        void ConfigureTablet()
        {
            if (!Utility.IsTablet()) return;

            left.Constant = StyleTablet.WidthCommonPresentation(this.View);
            right.Constant = StyleTablet.WidthCommonPresentation(this.View);
            bottom.Constant = StyleTablet.TOP_FROM_NAVIGATION;
            top.Constant = 20;
            
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ConfigureStyle();
            ConfigurePresenter();
            if (componentTableView != null)
                componentTableView.ConfigureListTable(this);
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            ConfigureTablet();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            if (segue.DestinationViewController is EmbedComponentTableView)
            {
                componentTableView = (EmbedComponentTableView)segue.DestinationViewController;
            } 
        }

        public void RowSelected(AbstractRecipient model)
        {
            CallbackChooseRole(model);
            DismissViewController(true,null);
        }

        public void UpdateView(AbstractRecipient user, List<RuoloInfo> listRoles)
        {
            this.listRoles = listRoles;
            this.componentTableView.ReloadTableView();
        }

        public void OnFavoriteError(AbstractRecipient recipient)
        {
            componentTableView.ReloadTableView();
        }

        public void ShowFavoriteError(string message)
        {
            ShowErrorHelper.Show(this,true,message);
        }

        public void ShowError(string e, bool isLight)
        {
            ShowErrorHelper.Show(this, isLight, e, null, () => { });
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View,isShow);
        }

        public nint NumberOfSections(UITableView tableView)
        {
            return 2;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            return section==0?1:(listRoles!= null?listRoles.Count+1:1);
        }

        public void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == 1 && indexPath.Row == 0)
                return;

            if (CallbackChooseRole != null && indexPath.Row != 0)
                userSelected = listRoles[indexPath.Row - 1];
            
            DismissViewController(false, () =>
            {
                CallbackChooseRole(userSelected);
            });
        }

        private void SetPreferedStar(NSIndexPath indexPath)
        {
            bool status = !userSelected.isPreferred();
            presenter.setFavorite(status);
            userSelected.setPreferred(status);
            componentTableView.ReloadTableView();
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            if (indexPath.Section == 0)
            {
                var namePhoto = "imageUserDefault";
                var nameIamgeStar = userSelected.isPreferred() ? "start_full" : "start_empty";
                return componentTableView.CreateCell_Photo_Title_Star(tableView,namePhoto,userSelected.getTitle(),nameIamgeStar,SetPreferedStar, indexPath, AssigneeIsEnabled);
            }
            else if (indexPath.Section == 1 && indexPath.Row == 0)
            {
                return componentTableView.CreateHeaderTitle(tableView,Utility.LanguageConvert("title_header_role"),UIColor.Black);
            }

            var model = listRoles[indexPath.Row-1];

            if (model.getRecipientType() == AbstractRecipient.RecipientType.MODEL)
                return componentTableView.CreateRowTitle(tableView, model.getTitle());
            else
            {
                var namePhoto = Utility.GetImageDocument(model.getRecipientType());
                return componentTableView.CreateCell_Photo_Title(tableView, namePhoto, model.getTitle());
            }
        }

        public UIView GetViewForHeader(UITableView tableView, nint section)
        {
            Console.WriteLine("GetViewForHeader");
            return null;
        }
    }
}
