// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Home.MVPD;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Session;
using InformaticaTrentinaPCL.iOS.TabBar.Document.Action.Storyboard;
using InformaticaTrentinaPCL.OpenFile;
using InformaticaTrentinaPCL.OpenFile.MVP;
using InformaticaTrentinaPCL.Utils;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.TabBar.Document.Open.Storyboard
{
    public partial class UIViewControllerOpenDocumentList : UIViewController, IUITableViewDataSource, IUITableViewDelegate, IOpenDocumentView
    {
        private OpenDocumentPresenter presenter;
        public AbstractDocumentListItem AbstractDocument;
        public SharedDocumentBundle sharedDocument;
        private List<AbstractDocumentListItem> list;
        AbstractDocumentListItem documentFirst;
        private UIAlertController alertDownloadCancel;

        public UIViewControllerOpenDocumentList(IntPtr handle) : base(handle)
        {
        }

        public UIViewControllerOpenDocumentList()
        {
        }

        private void ConfigureTable()
        {
            tableView.Delegate = this;
            tableView.DataSource = this;
            tableView.EstimatedRowHeight = 100;
            tableView.EstimatedSectionHeaderHeight = 50;
            tableView.RowHeight = UITableView.AutomaticDimension;
            tableView.SectionHeaderHeight = UITableView.AutomaticDimension;
        }

        private void ConfigurePresenter()
        {
            if (null == AbstractDocument && null == sharedDocument)
                throw new Exception("DocumentId or SharedDocumentBundle missing");

            if (null != AbstractDocument)
            {
                presenter = new OpenDocumentPresenter(this, IosNativeFactory.Instance(), AbstractDocument.GetIdDocumento());
            }
            else
            {
                presenter = new OpenDocumentPresenter(this, IosNativeFactory.Instance(), sharedDocument);
            }

            presenter.OnViewReady();
        }

        partial void ActionButtonBack(NSObject sender)
        {
            this.DismissViewController(true, null);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ConfigureTable();
            ConfigurePresenter();
            ConfigureStyle();
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            ConfigureTablet();
        }

        private void ConfigureStyle()
        {
            titleLAel.Text = Utility.LanguageConvert("open_document");
            Font.SetCustomStyleFont(titleLAel, Font.TITLE_BLACK, UITextAlignment.Center);
        }

        private void ConfigureTablet()
        {
            if (!Utility.IsTablet()) return;

            this.leading.Constant = StyleTablet.WidthCommonPresentation(this.View);
            this.trailing.Constant = StyleTablet.WidthCommonPresentation(this.View);
            this.top.Constant = 40;
            this.bottom.Constant = StyleTablet.TOP_FROM_NAVIGATION;
        }

        public override void ViewDidDisappear(bool animated)
        {
            base.ViewDidDisappear(animated);
        }

        [Export("tableView:didSelectRowAtIndexPath:")]
        public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            AbstractDocumentListItem docInfo = (list != null && list.Count > 0) ? list[indexPath.Row] : null;

            if (indexPath.Section == 0)
            {
                docInfo = documentFirst;
            }

            presenter.OnSelect(docInfo);
        }

        [Export("tableView:viewForHeaderInSection:")]
        public virtual UIView GetViewForHeader(UITableView tableView, nint section)
        {
            string tileSection = "";
            if (section == 0)
            {
                tileSection = Utility.LanguageConvert("Documento Principale").ToUpper();
            }
            else
            {
                tileSection = Utility.LanguageConvert("Allegati").ToUpper();
            }

            UIView viewHeader = new UIView();
            UILabel label = new UILabel();
            label.Text = tileSection;
            viewHeader.Add(label);
            label.Frame = new CoreGraphics.CGRect(20, 0, Utility.getScreenWidth() - 40, tableView.EstimatedSectionHeaderHeight);
            Font.SetCustomStyleFont(label, Font.LABEL, UITextAlignment.Left);
            viewHeader.BackgroundColor = UIColor.White;
            viewHeader.Frame = new CoreGraphics.CGRect(0, 0, Utility.getScreenWidth(), tableView.EstimatedSectionHeaderHeight);

            return viewHeader;
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            UITVCellOpenListDocument cell = (UITVCellOpenListDocument)tableView.DequeueReusableCell("UITVCellOpenListDocument");
            cell.setup(presenter);

            if (indexPath.Section == 0)
            {
                var selected = AbstractDocument != null && documentFirst.GetIdDocumento() == AbstractDocument.GetIdDocumento();
                cell.UpdatePrimaryDoc(documentFirst, selected);
            }
            else
            {
                AbstractDocumentListItem docInfo = list[indexPath.Row];
                var selected = AbstractDocument != null && docInfo.GetIdDocumento() == AbstractDocument.GetIdDocumento();
                cell.UpdateAttachment(docInfo, selected);
            }

            return cell;
        }

        [Export("numberOfSectionsInTableView:")]
        public virtual nint NumberOfSections(UITableView tableView)
        {
            // titolo documento principale , titolo documenti in allegato
            return this.list != null && list.Count > 0 ? 2 : 1;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            if (section == 0)
                return this.documentFirst != null ? 1 : 0;
            else
                return this.list != null ? list.Count : 0;
        }

        #region interface view core

        public void ShowList(List<AbstractDocumentListItem> list)
        {
            this.list = list;
            if (list.Count > 0)
            {
                documentFirst = list[0];
                this.list.Remove(documentFirst);
            }
            tableView.ReloadData();
        }

        public void ShowError(string e, bool isLight)
        {
            ShowErrorHelper.Show(this, isLight, e, null, () =>
             {
                 ActionButtonBack(null);
             });
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View, isShow);
        }

        private void DownloadAlert()
        {
            alertDownloadCancel = ShowErrorHelper.CreateChoiceAlert(this, LocalizedString.CANCEL_DOWNLOAD.Get(), LocalizedString.TITLE_ALERT.Get(), () => { }, CancelDownload);
            this.PresentViewController(alertDownloadCancel, animated: true, completionHandler: null);

        }

        private void CancelDownload()
        {
            presenter.CancelDownload();
        }

        public void OnUpdateLoaderWithAction(bool isShow)
        {
            if (!isShow)
            {
                if (null != alertDownloadCancel)
                {
                    alertDownloadCancel.DismissViewController(false, null);
                    alertDownloadCancel = null;
                }
            }

            Utility.Loading(this.View, isShow, DownloadAlert);
        }

        #endregion


    }
}