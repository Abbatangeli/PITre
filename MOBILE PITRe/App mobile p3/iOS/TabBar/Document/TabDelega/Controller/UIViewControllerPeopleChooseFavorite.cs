// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using Foundation;
using InformaticaTrentinaPCL.Delega;
using InformaticaTrentinaPCL.Delega.MVP;
using InformaticaTrentinaPCL.Delega.Network;
using InformaticaTrentinaPCL.Interfaces;
using InformaticaTrentinaPCL.iOS.EmbedComponent;
using InformaticaTrentinaPCL.iOS.Helper;
using InformaticaTrentinaPCL.iOS.Login.Session;
using InformaticaTrentinaPCL.Utils;
using UIKit;

namespace InformaticaTrentinaPCL.iOS.Delega.Storyboard
{
    public enum OperationTypeEnum
    {
        Unknow,
        Share,
        Delegate
    }
    public partial class UIViewControllerPeopleChooseFavorite : UIViewController, ISelectMandateAssigneeView, ListenerEmbedSearch, InterfaceComponentTableView
    {
        private SelectMandateAssigneePresenter presenter;
        private List<AbstractRecipient> list;
        private List<AbstractRecipient> listSearch;
        public Action<AbstractRecipient> CallbackRowSelected;
        public string Label_Title_Custom = Utility.LanguageConvert("selezionaAssegnatario");
        public string Label_Search_Custom = Utility.LanguageConvert("cerca");
        public OperationTypeEnum operationType = OperationTypeEnum.Unknow;
        EmbedComponentTableView tableView;
        bool IsPreferiti = false;

        public UIViewControllerPeopleChooseFavorite(IntPtr handle) : base(handle)
        {
        }

        private void ConfigureStyle()
        {
            labelTitle.Text = Label_Title_Custom;
            labelTitle.Lines = 2;
            Font.SetCustomStyleFont(labelTitle, Font.MODALE_TITLE, UITextAlignment.Center);
        }

        private void ConfigurePresenter()
        {
            presenter = new SelectMandateAssigneePresenter(this, IosNativeFactory.Instance());
            presenter.GetListFavorites();
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            conteinerEmpty.Hidden = true;
            IsPreferiti = true;
            ConfigureStyle();
            ConfigurePresenter();
        }

        private void ConfigureTablet()
        {
            if (!Utility.IsTablet()) return;

            this.leading.Constant = StyleTablet.WidthCommonPresentation(this.View);
            this.trailing.Constant = StyleTablet.WidthCommonPresentation(this.View);
            this.top.Constant = StyleTablet.TOP_FROM_NAVIGATION;
        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            ConfigureTablet();
        }

        public void ActionButtonClick()
        {
            presenter.ClearSearch();
        }

        public void EditingTextField(UITextField textField)
        {
            Console.WriteLine("EditingTextField");
            if (textField.Text == "")
                ActionButtonClick();
        }

        public void KeyboardReturnDone(UITextField textField)
        {
            presenter.SearchAssignee(textField.Text);
        }

        partial void ActionButtonBack(Foundation.NSObject sender)
        {
            this.DismissViewController(true, null);
        }

        partial void ActionButtonClose(Foundation.NSObject sender)
        {
            this.DismissViewController(true, null);
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);
            if (segue.DestinationViewController is EmbedComponentSearch)
            {
                EmbedComponentSearch search = (EmbedComponentSearch)segue.DestinationViewController;
                var messageDescription = operationType == OperationTypeEnum.Share ?
                                                                           LocalizedString.DESCRIPTION_SEARCH_TO_SHARE.Get() :
                                                                           LocalizedString.DESCRIPTION_SEARCH_SELECT_DELEGATE.Get();
                search.ConfigureEmbedComponedSearch(Label_Search_Custom, Utility.LanguageConvert("cancel"), messageDescription, this);
            }
            else if (segue.DestinationViewController is EmbedComponentTableView)
            {
                tableView = (EmbedComponentTableView)segue.DestinationViewController;
                tableView.ConfigureListTable(this);
                tableView.SetHeader(true);
            }
        }

        public UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            AbstractRecipient model = null;
            if (list != null && list.Count > 0)
            {
                model = list[indexPath.Row];
            }
            else if (listSearch != null && listSearch.Count > 0)
            {
                model = listSearch[indexPath.Row];
            }
            String imgStar = model.isPreferred() ? "start_full" : "start_empty";
            return this.tableView.CreateCell_Photo_Title_Star_two_title(tableView, "imageUserDefault", model.getTitle(), model.getSubtitle(), imgStar, (obj) =>
            {

                // Row preferito
                bool IsOldPreferred = model.isPreferred();
                presenter.SetFavorite(model, !IsOldPreferred);
                model.setPreferred(!IsOldPreferred);
                tableView.ReloadData();

            }, indexPath);
        }

        public UIView GetViewForHeader(UITableView tableView, nint section)
        {
            UIView viewHeader = new UIView();
            UILabel label = new UILabel();
            label.Text = Utility.LanguageConvert("PREFERITI");
            viewHeader.Add(label);
            label.Frame = new CoreGraphics.CGRect(20, 0, Utility.getScreenWidth() - 40, tableView.EstimatedSectionHeaderHeight);
            Font.SetCustomStyleFont(label, Font.LABEL, UITextAlignment.Left);
            viewHeader.BackgroundColor = UIColor.White;
            viewHeader.Frame = new CoreGraphics.CGRect(0, 0, Utility.getScreenWidth(), tableView.EstimatedSectionHeaderHeight);

            return viewHeader;
        }

        public nint NumberOfSections(UITableView tableView)
        {
            return 1;
        }

        public nint RowsInSection(UITableView tableView, nint section)
        {
            if (list != null && list.Count > 0)
                return list.Count;
            else if (listSearch != null && listSearch.Count > 0)
                return listSearch.Count;
            return 0;
        }

        public virtual void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            if (list != null && list.Count > 0)
            {
                AbstractRecipient model = list[indexPath.Row];
                CallbackRowSelected(model);
            }
            else if (listSearch != null && listSearch.Count > 0)
            {
                AbstractRecipient model = listSearch[indexPath.Row];
                CallbackRowSelected(model);
            }
        }

        #region interface    

        private void SetContainer(bool isPreferiti)
        {
            this.IsPreferiti = isPreferiti;
            // reset
            tableView.SetMsgCenterTable(false, string.Empty);
            conteinerEmpty.Hidden = true;
            conteinerList.Hidden = true;

            if (isPreferiti)
            {
                conteinerEmpty.Hidden = true;
                conteinerList.Hidden = false;
             
                if (this.list == null || this.list.Count == 0)
                    tableView.SetMsgCenterTable(true,LocalizedString.EMPTY_LIST_FAVORITE.Get());
            }
            else
            {
                if (this.listSearch == null || this.listSearch.Count == 0)
                {
                    conteinerList.Hidden = true;
                    conteinerEmpty.Hidden = false;
                }
                else
                {
                    conteinerList.Hidden = false;
                    conteinerEmpty.Hidden = true;
                }
            }
        }



        // preferiti
        public void UpdateFavoriteList(List<AbstractRecipient> list)
        {
            this.list = list;
            SetContainer(true);
            tableView.ReloadTableView();
        }
        // cerca
        public void UpdateSearchList(List<AbstractRecipient> list)
        {
            listSearch = list;
            SetContainer(false);
            tableView.ReloadTableView();
        }

        public void ClearList()
        {
            list?.Clear();
            listSearch?.Clear();
            tableView.ReloadTableView();
        }

        public void ShowError(string e, bool isLight)
        {
            ShowErrorHelper.Show(this, isLight, e);
        }

        public void OnUpdateLoader(bool isShow)
        {
            Utility.Loading(this.View, isShow);
        }
        #endregion

        public void OnFavoriteError(AbstractRecipient recipient)
        {
            var revert = !recipient.isPreferred();
            recipient.setPreferred(revert);
            tableView.ReloadTableView();
        }

        public void ShowFavoriteError(string message)
        {
            Alert.AlertToast(message, this);
        }

    }
}
