//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace DocsPaDocumentale_DOCUMENTUM.DctmServices.Custom
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "DctmTicketPortBinding", Namespace = "http://documentum.valueteam.infotn.it/")]
    public partial class TicketFactory : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getTicketOperationCompleted;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="url"></param>
        public TicketFactory(string url)
        {
            this.Url = url;
        }

        /// <remarks/>
        public event getTicketCompletedEventHandler getTicketCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://documentum.valueteam.infotn.it/", ResponseNamespace = "http://documentum.valueteam.infotn.it/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getTicket([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string suUserName, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string suPassword, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string userName, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string repositoryName)
        {
            object[] results = this.Invoke("getTicket", new object[] {
                    suUserName,
                    suPassword,
                    userName,
                    repositoryName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BegingetTicket(string suUserName, string suPassword, string userName, string repositoryName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("getTicket", new object[] {
                    suUserName,
                    suPassword,
                    userName,
                    repositoryName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndgetTicket(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void getTicketAsync(string suUserName, string suPassword, string userName, string repositoryName)
        {
            this.getTicketAsync(suUserName, suPassword, userName, repositoryName, null);
        }

        /// <remarks/>
        public void getTicketAsync(string suUserName, string suPassword, string userName, string repositoryName, object userState)
        {
            if ((this.getTicketOperationCompleted == null))
            {
                this.getTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTicketOperationCompleted);
            }
            this.InvokeAsync("getTicket", new object[] {
                    suUserName,
                    suPassword,
                    userName,
                    repositoryName}, this.getTicketOperationCompleted, userState);
        }

        private void OngetTicketOperationCompleted(object arg)
        {
            if ((this.getTicketCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTicketCompleted(this, new getTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void getTicketCompletedEventHandler(object sender, getTicketCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
