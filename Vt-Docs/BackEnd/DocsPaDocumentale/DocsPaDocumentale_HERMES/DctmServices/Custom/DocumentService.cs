//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DocsPaDocumentale_DOCUMENTUM.DctmServices.Custom
{
    using System;
    using System.Collections.Generic;
    using Emc.Documentum.FS.Runtime;
    using Emc.Documentum.FS.Runtime.Context;
    
    
    /// <exclude/>
    public partial class DocumentServicePortClient : IDocumentService
    {
        
        /// <exclude/>
        public IServiceContext GetServiceContext()
        {
            throw new NotImplementedException();
        }
    }
    
    /// <summary>
    ///Servizietti vari
    /// @author Luca Azzalini
    ///</summary>
    public interface IDocumentService : IContextHolder
    {
        
        /// <summary>
        ///Aggiunge un child ad un virtual document. Se il parent non Ã¨ giÃ  un VD, viene automaticamente reso tale.
        /// Il child viene aggiunto al VD in modalitÃ  "late binding", ovvero segue la current version
        ///</summary>
        /// <param name="repository"></param>
        /// <param name="objectIdchild">ObjectId del oggetto che diventerÃ  child</param>
        /// <param name="objectIdParent">ObjectId del virtual document</param>
        /// <exception cref="DfServiceException"></exception>
        void AddChild(string repository, string objectIdchild, string objectIdParent);
        
        /// <summary>
        ///Rimuove un child da un virtual document. Opposto di addChild
        ///</summary>
        /// <param name="repository"></param>
        /// <param name="objectIdchild">ObjectId del oggetto che diventerÃ  child</param>
        /// <param name="objectIdParent">ObjectId del virtual document</param>
        /// <param name="destroyChild">se true, tutte le versioni del child vengono cancellate</param>
        /// <exception cref="DfServiceException"></exception>
        /// <seealso cref="addChild"/>
        void RemoveChild(string repository, string objectIdchild, string objectIdParent, bool destroyChild);
        
        /// <summary>
        ///Converte un documento normale a documento virtuale o viceversa.
        ///</summary>
        /// <exception cref="ServiceException"></exception>
        void SetIsVirtual(string repository, string objectId, bool toVirtual);
    }
    
    /// <exclude/>
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://services.pitre.etnoteam.it", ConfigurationName="DocumentServicePort")]
    public interface DocumentServicePort
    {
        
        // CODEGEN: Parameter 'repository' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        /// <exclude/>
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(rt.fs.documentum.emc.com.ServiceException), Action="", Name="ServiceException", Namespace="http://rt.fs.documentum.emc.com/")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        addChildResponse addChild(addChildRequest request);
        
        // CODEGEN: Parameter 'repository' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        /// <exclude/>
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(rt.fs.documentum.emc.com.ServiceException), Action="", Name="ServiceException", Namespace="http://rt.fs.documentum.emc.com/")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        removeChildResponse removeChild(removeChildRequest request);
        
        // CODEGEN: Parameter 'repository' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        /// <exclude/>
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.FaultContractAttribute(typeof(rt.fs.documentum.emc.com.ServiceException), Action="", Name="ServiceException", Namespace="http://rt.fs.documentum.emc.com/")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        setIsVirtualResponse setIsVirtual(setIsVirtualRequest request);
    }
    
    /// <exclude/>
    [System.ServiceModel.MessageContractAttribute(WrapperName="addChild", WrapperNamespace="http://services.pitre.etnoteam.it", IsWrapped=true)]
    public partial class addChildRequest
    {
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string repository;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string objectIdchild;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string objectIdParent;
        
        /// <exclude/>
        public addChildRequest()
        {
        }
        
        /// <exclude/>
        public addChildRequest(string repository, string objectIdchild, string objectIdParent)
        {
            this.repository = repository;
            this.objectIdchild = objectIdchild;
            this.objectIdParent = objectIdParent;
        }
    }
    
    /// <exclude/>
    [System.ServiceModel.MessageContractAttribute(WrapperName="addChildResponse", WrapperNamespace="http://services.pitre.etnoteam.it", IsWrapped=true)]
    public partial class addChildResponse
    {
        
        /// <exclude/>
        public addChildResponse()
        {
        }
    }
    
    /// <exclude/>
    [System.ServiceModel.MessageContractAttribute(WrapperName="removeChild", WrapperNamespace="http://services.pitre.etnoteam.it", IsWrapped=true)]
    public partial class removeChildRequest
    {
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string repository;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string objectIdchild;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string objectIdParent;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool destroyChild;
        
        /// <exclude/>
        public removeChildRequest()
        {
        }
        
        /// <exclude/>
        public removeChildRequest(string repository, string objectIdchild, string objectIdParent, bool destroyChild)
        {
            this.repository = repository;
            this.objectIdchild = objectIdchild;
            this.objectIdParent = objectIdParent;
            this.destroyChild = destroyChild;
        }
    }
    
    /// <exclude/>
    [System.ServiceModel.MessageContractAttribute(WrapperName="removeChildResponse", WrapperNamespace="http://services.pitre.etnoteam.it", IsWrapped=true)]
    public partial class removeChildResponse
    {
        
        /// <exclude/>
        public removeChildResponse()
        {
        }
    }
    
    /// <exclude/>
    [System.ServiceModel.MessageContractAttribute(WrapperName="setIsVirtual", WrapperNamespace="http://services.pitre.etnoteam.it", IsWrapped=true)]
    public partial class setIsVirtualRequest
    {
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string repository;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string objectId;
        
        /// <exclude/>
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://services.pitre.etnoteam.it", Order=2)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool toVirtual;
        
        /// <exclude/>
        public setIsVirtualRequest()
        {
        }
        
        /// <exclude/>
        public setIsVirtualRequest(string repository, string objectId, bool toVirtual)
        {
            this.repository = repository;
            this.objectId = objectId;
            this.toVirtual = toVirtual;
        }
    }
    
    /// <exclude/>
    [System.ServiceModel.MessageContractAttribute(WrapperName="setIsVirtualResponse", WrapperNamespace="http://services.pitre.etnoteam.it", IsWrapped=true)]
    public partial class setIsVirtualResponse
    {
        
        /// <exclude/>
        public setIsVirtualResponse()
        {
        }
    }
    
    /// <exclude/>
    public interface DocumentServicePortChannel : DocumentServicePort, System.ServiceModel.IClientChannel
    {
    }
    
    /// <exclude/>
    public partial class DocumentServicePortClient : System.ServiceModel.ClientBase<DocumentServicePort>, DocumentServicePort
    {
        
        /// <exclude/>
        public DocumentServicePortClient()
        {
        }
        
        /// <exclude/>
        public DocumentServicePortClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        /// <exclude/>
        public DocumentServicePortClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        /// <exclude/>
        public DocumentServicePortClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        /// <exclude/>
        public DocumentServicePortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        /// <exclude/>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        addChildResponse DocumentServicePort.addChild(addChildRequest request)
        {
            return base.Channel.addChild(request);
        }
        
        /// <exclude/>
        [System.CLSCompliantAttribute(false)]
        public void addChild(string repository, string objectIdchild, string objectIdParent)
        {
            addChildRequest inValue = new addChildRequest();
            inValue.repository = repository;
            inValue.objectIdchild = objectIdchild;
            inValue.objectIdParent = objectIdParent;
            addChildResponse retVal = ((DocumentServicePort)(this)).addChild(inValue);
        }
        
        /// <exclude/>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        removeChildResponse DocumentServicePort.removeChild(removeChildRequest request)
        {
            return base.Channel.removeChild(request);
        }
        
        /// <exclude/>
        [System.CLSCompliantAttribute(false)]
        public void removeChild(string repository, string objectIdchild, string objectIdParent, bool destroyChild)
        {
            removeChildRequest inValue = new removeChildRequest();
            inValue.repository = repository;
            inValue.objectIdchild = objectIdchild;
            inValue.objectIdParent = objectIdParent;
            inValue.destroyChild = destroyChild;
            removeChildResponse retVal = ((DocumentServicePort)(this)).removeChild(inValue);
        }
        
        /// <exclude/>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        setIsVirtualResponse DocumentServicePort.setIsVirtual(setIsVirtualRequest request)
        {
            return base.Channel.setIsVirtual(request);
        }
        
        /// <exclude/>
        [System.CLSCompliantAttribute(false)]
        public void setIsVirtual(string repository, string objectId, bool toVirtual)
        {
            setIsVirtualRequest inValue = new setIsVirtualRequest();
            inValue.repository = repository;
            inValue.objectId = objectId;
            inValue.toVirtual = toVirtual;
            setIsVirtualResponse retVal = ((DocumentServicePort)(this)).setIsVirtual(inValue);
        }
        
        /// <exclude/>
        public void AddChild(string repository, string objectIdchild, string objectIdParent)
        {
            addChildRequest inValue = new addChildRequest();
            inValue.repository = repository;
            inValue.objectIdchild = objectIdchild;
            inValue.objectIdParent = objectIdParent;
            addChildResponse retVal = ((DocumentServicePort)(this)).addChild(inValue);
        }
        
        /// <exclude/>
        public void RemoveChild(string repository, string objectIdchild, string objectIdParent, bool destroyChild)
        {
            removeChildRequest inValue = new removeChildRequest();
            inValue.repository = repository;
            inValue.objectIdchild = objectIdchild;
            inValue.objectIdParent = objectIdParent;
            inValue.destroyChild = destroyChild;
            removeChildResponse retVal = ((DocumentServicePort)(this)).removeChild(inValue);
        }
        
        /// <exclude/>
        public void SetIsVirtual(string repository, string objectId, bool toVirtual)
        {
            setIsVirtualRequest inValue = new setIsVirtualRequest();
            inValue.repository = repository;
            inValue.objectId = objectId;
            inValue.toVirtual = toVirtual;
            setIsVirtualResponse retVal = ((DocumentServicePort)(this)).setIsVirtual(inValue);
        }
    }
}

//namespace rt.fs.documentum.emc.com
//{
//    using System.Xml.Serialization;
//    using System.Runtime.Serialization;
    
    
//    [System.Diagnostics.DebuggerStepThroughAttribute()]
//    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
//    [System.Xml.Serialization.XmlSchemaProviderAttribute("ExportSchema")]
//    [System.Xml.Serialization.XmlRootAttribute(IsNullable=false)]
//    public partial class ServiceException : object, System.Xml.Serialization.IXmlSerializable
//    {
        
//        private System.Xml.XmlNode[] nodesField;
        
//        private static System.Xml.XmlQualifiedName typeName = new System.Xml.XmlQualifiedName("ServiceException", "http://rt.fs.documentum.emc.com/");
        
//        public System.Xml.XmlNode[] Nodes
//        {
//            get
//            {
//                return this.nodesField;
//            }
//            set
//            {
//                this.nodesField = value;
//            }
//        }
        
//        public void ReadXml(System.Xml.XmlReader reader)
//        {
//            this.nodesField = System.Runtime.Serialization.XmlSerializableServices.ReadNodes(reader);
//        }
        
//        public void WriteXml(System.Xml.XmlWriter writer)
//        {
//            System.Runtime.Serialization.XmlSerializableServices.WriteNodes(writer, this.Nodes);
//        }
        
//        public System.Xml.Schema.XmlSchema GetSchema()
//        {
//            return null;
//        }
        
//        public static System.Xml.XmlQualifiedName ExportSchema(System.Xml.Schema.XmlSchemaSet schemas)
//        {
//            System.Runtime.Serialization.XmlSerializableServices.AddDefaultSchema(schemas, typeName);
//            return typeName;
//        }
//    }
//}

