IF NOT EXISTS (SELECT * FROM dbo.sysusers WHERE name = N'db_user')
EXEC dbo.sp_grantdbaccess @loginame = N'db_user', @name_in_db = N'db_user'
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DIAGRAMMI_STATO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DIAGRAMMI_STATO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Id_amm] [int] NULL,
	[Var_descrizione] [varchar](255) NULL,
 CONSTRAINT [PK__DPA_DIAGRAMMI_STA] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DIAGRAMMI_STO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DIAGRAMMI_STO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Id_user] [varchar](255) NULL,
	[Doc_number] [int] NULL,
	[Dta_date] [datetime] NULL,
	[Var_desc_old_stato] [varchar](255) NULL,
	[Var_desc_new_stato] [varchar](255) NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_RUOLO] [int] NULL,
	[Id_Project] [int] NULL,
 CONSTRAINT [PK__DPA_DIAGRAMMI_ST] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_MODELLI_MITT_DEST]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_MODELLI_MITT_DEST](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_MODELLO] [int] NULL,
	[CHA_TIPO_MITT_DEST] [char](1) NULL,
	[ID_CORR_GLOBALI] [int] NULL,
	[ID_RAGIONE] [int] NULL,
	[CHA_TIPO_TRASM] [varchar](1) NULL,
	[VAR_NOTE_SING] [varchar](250) NULL,
	[CHA_TIPO_URP] [varchar](1) NULL,
	[SCADENZA] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_MODELLI_TRASM]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_MODELLI_TRASM](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[NOME] [nvarchar](256) NULL,
	[CHA_TIPO_OGGETTO] [char](1) NULL,
	[ID_REGISTRO] [int] NULL,
	[VAR_NOTE_GENERALI] [varchar](250) NULL,
	[ID_PEOPLE] [int] NULL,
	[SINGLE] [char](1) NULL,
	[CHA_CEDE_DIRITTI] [char](1) NULL,
	[ID_PEOPLE_NEW_OWNER] [int] NULL,
	[ID_GROUP_NEW_OWNER] [int] NULL,
	[codice] [varchar](16) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CARAT_TIMBRO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CARAT_TIMBRO](
	[SYSTEM_ID] [int] NOT NULL,
	[VAR_NOME] [varchar](50) NULL,
	[DIMENSIONE] [varchar](4) NULL,
 CONSTRAINT [PK_DPA_CARAT_TIMBRO] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_POSIZ_TIMBRO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_POSIZ_TIMBRO](
	[SYSTEM_ID] [int] NOT NULL,
	[TIPO_POS] [varchar](10) NULL,
	[POS_X] [varchar](50) NULL,
	[POS_Y] [varchar](50) NULL,
 CONSTRAINT [PK_DPA_POSIZ_TIMBRO] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TODOLIST]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TODOLIST](
	[ID_TRASMISSIONE] [int] NOT NULL,
	[ID_TRASM_SINGOLA] [int] NOT NULL,
	[ID_TRASM_UTENTE] [int] NOT NULL,
	[DTA_INVIO] [datetime] NOT NULL,
	[ID_PEOPLE_MITT] [int] NOT NULL,
	[ID_RUOLO_MITT] [int] NOT NULL,
	[ID_PEOPLE_DEST] [int] NOT NULL,
	[ID_RAGIONE_TRASM] [int] NOT NULL,
	[VAR_NOTE_GEN] [varchar](250) NULL,
	[VAR_NOTE_SING] [varchar](250) NULL,
	[DTA_SCADENZA] [datetime] NULL,
	[ID_PROFILE] [int] NULL,
	[ID_PROJECT] [int] NULL,
	[ID_RUOLO_DEST] [int] NULL,
	[ID_REGISTRO] [int] NULL,
	[CHA_TIPO_TRASM ] [char](1) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TODOLIST]') AND name = N'INDX_DPA_TODOLIST_PEOPLE_DEST')
CREATE NONCLUSTERED INDEX [INDX_DPA_TODOLIST_PEOPLE_DEST] ON [db_user].[DPA_TODOLIST] 
(
	[ID_PEOPLE_DEST] ASC,
	[ID_RUOLO_DEST] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TODOLIST]') AND name = N'INDX_TRASM_UTENTE')
CREATE NONCLUSTERED INDEX [INDX_TRASM_UTENTE] ON [db_user].[DPA_TODOLIST] 
(
	[ID_TRASM_UTENTE] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ASS_DIAGRAMMI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ASS_DIAGRAMMI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Id_tipo_doc] [int] NULL,
	[Id_diagramma] [int] NULL,
	[Id_Mod_Trasm] [int] NULL,
	[Trasm_Aut] [int] NULL,
	[Id_stato] [int] NULL,
	[Id_Tipo_Fasc] [int] NULL,
 CONSTRAINT [PK__DPA_TIPODOC_DIAG] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_COLORE_TIMBRO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_COLORE_TIMBRO](
	[SYSTEM_ID] [int] NOT NULL,
	[VAR_NOME] [varchar](50) NULL,
	[DESCRIZIONE] [varchar](50) NULL,
 CONSTRAINT [PK_DPA_COLORE_TIMBRO] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DOCSPA]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DOCSPA](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[DTA_INSTALL] [datetime] NULL,
	[DTA_UPDATE] [datetime] NULL,
	[id_versions_i] [varchar](10) NULL,
	[id_versions_U] [varchar](10) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_DIAGR]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TRASM_DIAGR](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Id_trasm] [int] NULL,
	[Doc_Number] [int] NULL,
	[Id_stato] [int] NULL,
	[Id_Project] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DELETED_SECURITY]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DELETED_SECURITY](
	[THING] [int] NOT NULL,
	[PERSONORGROUP] [int] NULL,
	[ACCESSRIGHTS] [int] NOT NULL,
	[ID_GRUPPO_TRASM] [int] NULL,
	[CHA_TIPO_DIRITTO] [varchar](1) NULL,
	[NOTE] [varchar](128) NULL,
	[DTA_REVOCA] [datetime] NULL,
	[ID_UTENTE_REV] [int] NOT NULL,
	[ID_RUOLO_REV] [int] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DELETED_SECURITY]') AND name = N'C_SECURITY')
CREATE UNIQUE NONCLUSTERED INDEX [C_SECURITY] ON [db_user].[DELETED_SECURITY] 
(
	[THING] ASC,
	[PERSONORGROUP] ASC,
	[ACCESSRIGHTS] ASC
)WITH IGNORE_DUP_KEY ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DELETED_SECURITY]') AND name = N'indx_SEC5')
CREATE NONCLUSTERED INDEX [indx_SEC5] ON [db_user].[DELETED_SECURITY] 
(
	[THING] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DELETED_SECURITY]') AND name = N'indx_SEC6')
CREATE NONCLUSTERED INDEX [indx_SEC6] ON [db_user].[DELETED_SECURITY] 
(
	[PERSONORGROUP] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_USERADMIN_REGISTRI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_USERADMIN_REGISTRI](
	[SYSTEM_ID_CORR_GLOB] [int] NOT NULL,
	[SYSTEM_ID_REGISTRO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CONTATORI_DOC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CONTATORI_DOC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_OGG] [int] NULL,
	[ID_TIPOLOGIA] [int] NULL,
	[ID_AOO] [int] NULL,
	[ID_RF] [int] NULL,
	[VALORE] [int] NULL,
	[ABILITATO] [int] NULL,
	[ANNO] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_SALVA_RICERCHE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_SALVA_RICERCHE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[VAR_DESCRIZIONE] [varchar](64) NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_GRUPPO] [int] NULL,
	[VAR_PAGINA_RIC] [varchar](50) NOT NULL,
	[VAR_FILTRI_RIC] [text] NULL,
	[CHA_IN_ADL] [varchar](1) NOT NULL DEFAULT (0),
 CONSTRAINT [PK_SALVA_RIC] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY],
 CONSTRAINT [U_SALVARIC_NOME] UNIQUE NONCLUSTERED 
(
	[VAR_DESCRIZIONE] ASC,
	[ID_PEOPLE] ASC,
	[ID_GRUPPO] ASC
) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CONTATORI_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CONTATORI_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_OGG] [int] NULL,
	[ID_TIPOLOGIA] [int] NULL,
	[ID_AOO] [int] NULL,
	[ID_RF] [int] NULL,
	[VALORE] [int] NULL,
	[ABILITATO] [int] NULL,
	[ANNO] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CHECKIN_CHECKOUT]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CHECKIN_CHECKOUT](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_DOCUMENT] [int] NOT NULL,
	[DOCUMENT_NUMBER] [int] NOT NULL,
	[ID_USER] [int] NOT NULL,
	[ID_ROLE] [int] NOT NULL,
	[CHECK_OUT_DATE] [datetime] NOT NULL,
	[DOCUMENT_LOCATION] [nvarchar](50) NULL,
	[MACHINE_NAME] [nvarchar](50) NULL,
 CONSTRAINT [PK_DPA_CHECKOUT_DOCUMENTS] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_INS_MODELLI_DEST_NOTIFICA]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[SP_INS_MODELLI_DEST_NOTIFICA]

AS

DECLARE @VAR_ID_MITT_DEST INT
DECLARE @VAR_ID_PEOPLE INT
DECLARE @VAR_ID_MODELLO INT


BEGIN

	DECLARE cursorINS CURSOR FOR
		SELECT      
        	 MMD.SYSTEM_ID, 
        	 PG.PEOPLE_SYSTEM_ID,
       		 MMD.ID_MODELLO 
      		FROM db_user.DPA_CORR_GLOBALI CG, db_user.DPA_MODELLI_MITT_DEST MMD, db_user.PEOPLEGROUPS PG
      		WHERE CG.SYSTEM_ID = MMD.ID_CORR_GLOBALI
      		AND CG.ID_GRUPPO = PG.GROUPS_SYSTEM_ID
      		AND MMD.CHA_TIPO_MITT_DEST = ''D''
      		AND MMD.CHA_TIPO_URP = ''R''
      		AND PG.DTA_FINE IS NULL
      		AND MMD.SYSTEM_ID NOT IN (SELECT DISTINCT ID_MODELLO_MITT_DEST FROM db_user.DPA_MODELLI_DEST_CON_NOTIFICA)
      		ORDER BY MMD.ID_MODELLO

	BEGIN
		OPEN cursorINS 
		FETCH NEXT FROM cursorINS
		INTO @VAR_ID_MITT_DEST, @VAR_ID_PEOPLE, @VAR_ID_MODELLO

			WHILE @@FETCH_STATUS = 0

			BEGIN
			
				INSERT INTO db_user.DPA_MODELLI_DEST_CON_NOTIFICA
                		(ID_MODELLO_MITT_DEST,
                		ID_PEOPLE,
                		ID_MODELLO)
                		VALUES
                		(@VAR_ID_MITT_DEST,
                		@VAR_ID_PEOPLE,
                		@VAR_ID_MODELLO)
		
				FETCH NEXT FROM cursorINS 
				INTO @VAR_ID_MITT_DEST, @VAR_ID_PEOPLE, @VAR_ID_MODELLO
			END
			
			CLOSE cursorINS
			DEALLOCATE cursorINS
	END
END


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[TEWDOCSPA]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[TEWDOCSPA](
	[LKEY] [numeric](18, 0) NOT NULL,
	[JOUREC] [varchar](1) NOT NULL,
	[JOUDOC] [numeric](18, 0) NOT NULL,
	[JOUCOD] [numeric](18, 0) NOT NULL,
	[JOUPRO] [numeric](18, 0) NOT NULL,
	[JOUTYP] [varchar](1) NOT NULL,
	[JOULEN] [numeric](18, 0) NOT NULL,
	[JOUDES] [varchar](255) NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[LOGDOCSPA]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[LOGDOCSPA](
	[LKEY] [numeric](18, 0) NOT NULL,
	[FLAG] [numeric](18, 0) NOT NULL,
	[TS_DOCSPA] [numeric](36, 0) NULL,
	[TS_AS400] [numeric](36, 0) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[DPA_INDX_SIS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [dbo].[DPA_INDX_SIS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[VOCE_INDICE] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DIAGRAMMI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DIAGRAMMI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Doc_number] [int] NULL,
	[Id_stato] [int] NULL,
	[Id_diagramma] [int] NULL,
	[Id_Project] [int] NULL,
 CONSTRAINT [PK__DPA_DIAGRAMMI_DO] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[PROJECT_COMPONENTS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[PROJECT_COMPONENTS](
	[DESCRIPTION] [varchar](60) NULL,
	[LIBRARY] [int] NULL,
	[TYPE] [varchar](1) NULL,
	[PROJECT_ID] [int] NULL,
	[LINK] [int] NULL,
	[COMP_ORDER] [int] NULL,
	[VAR_CODICE_COMP] [varchar](250) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT_COMPONENTS]') AND name = N'indx_PROJECTCOMP1')
CREATE NONCLUSTERED INDEX [indx_PROJECTCOMP1] ON [db_user].[PROJECT_COMPONENTS] 
(
	[LINK] ASC,
	[PROJECT_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT_COMPONENTS]') AND name = N'indx_PROJECTCOMP2')
CREATE NONCLUSTERED INDEX [indx_PROJECTCOMP2] ON [db_user].[PROJECT_COMPONENTS] 
(
	[PROJECT_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT_COMPONENTS]') AND name = N'indx_PROJECTCOMP3')
CREATE NONCLUSTERED INDEX [indx_PROJECTCOMP3] ON [db_user].[PROJECT_COMPONENTS] 
(
	[LINK] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[parsenull]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

create function [db_user].[parsenull] (@str varchar(8000))
returns varchar(8000)
as
begin
if (@str is not null)
return @str

return ''''
end


' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REMOTE_LIBRARIES]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[REMOTE_LIBRARIES](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[LIBRARY_NAME] [varchar](20) NULL,
	[LIBRARY_DESC] [varchar](80) NULL,
	[DISABLED] [varchar](1) NULL,
	[ORACLE_MIXED_CASE] [int] NULL,
	[OWNER] [varchar](80) NULL,
	[DATABASE_ENGINE] [int] NULL,
	[OPERATING_SYSTEM] [int] NULL,
	[SERVER_LOCATION] [varchar](128) NULL,
	[DATABASE_NAME] [varchar](18) NULL,
	[LIB_LOGIN_UNAME] [varchar](30) NULL,
	[SQL_PASSWORD] [varchar](250) NULL,
	[SHADOW_DOCS] [varchar](1) NULL,
	[PRESHADOW] [varchar](1) NULL,
	[DEFAULT_SEARCH] [varchar](1) NULL,
	[BRIDGED] [varchar](1) NULL,
	[LIBRARY_GROUP] [varchar](10) NULL,
	[LIB_LOGIN_SCHEME] [varchar](1) NULL,
	[LAST_UPDATE] [datetime] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SECURITY]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[SECURITY](
	[THING] [int] NOT NULL,
	[PERSONORGROUP] [int] NULL,
	[ACCESSRIGHTS] [int] NOT NULL,
	[ID_GRUPPO_TRASM] [int] NULL,
	[CHA_TIPO_DIRITTO] [varchar](1) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[SECURITY]') AND name = N'C_SECURITY')
CREATE UNIQUE NONCLUSTERED INDEX [C_SECURITY] ON [db_user].[SECURITY] 
(
	[THING] ASC,
	[PERSONORGROUP] ASC,
	[ACCESSRIGHTS] ASC
)WITH IGNORE_DUP_KEY ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[SECURITY]') AND name = N'indx_SEC5')
CREATE NONCLUSTERED INDEX [indx_SEC5] ON [db_user].[SECURITY] 
(
	[THING] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[SECURITY]') AND name = N'indx_SEC6')
CREATE NONCLUSTERED INDEX [indx_SEC6] ON [db_user].[SECURITY] 
(
	[PERSONORGROUP] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[VERSIONS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[VERSIONS](
	[VERSION_ID] [int] IDENTITY(1,1) NOT NULL,
	[DOCNUMBER] [int] NOT NULL,
	[VERSION] [int] NULL,
	[SUBVERSION] [varchar](1) NULL,
	[VERSION_LABEL] [varchar](10) NOT NULL,
	[AUTHOR] [int] NULL,
	[TYPIST] [int] NULL,
	[LASTEDITDATE] [datetime] NULL,
	[LASTEDITTIME] [datetime] NULL,
	[COMMENTS] [varchar](200) NULL,
	[FORCE_VERSION_RO] [varchar](1) NULL,
	[STATUS] [int] NULL,
	[ARCHIVE_ID] [int] NULL,
	[READONLY_DATE] [datetime] NULL,
	[NEXT_PUBLISH_VER] [int] NULL,
	[PUBLISH_DATE] [datetime] NULL,
	[PREV_STATUS] [int] NULL,
	[CONTAINER_TYPE] [varchar](1) NULL,
	[MAIL_ID] [varchar](80) NULL,
	[PARENTMAIL_ID] [varchar](60) NULL,
	[THREAD_NUM] [int] NULL,
	[ATTACH_NUM] [varchar](20) NULL,
	[NUM_PAG_ALLEGATI] [int] NULL,
	[DTA_CREAZIONE] [datetime] NULL,
	[CHA_DA_INVIARE] [varchar](1) NULL,
	[DTA_ARRIVO] [datetime] NULL,
	[V_NAME_FN] [varchar](7) NULL,
	[CARTACEO] [smallint] NULL,
	[SCARTA_FASC_CARTACEA] [smallint] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[VERSIONS]') AND name = N'indx_VERSIONS1')
CREATE NONCLUSTERED INDEX [indx_VERSIONS1] ON [db_user].[VERSIONS] 
(
	[DOCNUMBER] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[VERSIONS]') AND name = N'indx_VERSIONS2')
CREATE NONCLUSTERED INDEX [indx_VERSIONS2] ON [db_user].[VERSIONS] 
(
	[VERSION_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ANAGRAFICA_FUNZIONI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ANAGRAFICA_FUNZIONI](
	[COD_FUNZIONE] [varchar](32) NULL,
	[VAR_DESC_FUNZIONE] [varchar](1000) NULL,
	[CHA_TIPO_FUNZ] [varchar](1) NULL,
	[DISABLED] [char](1) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_ANAGRAFICA_FUNZIONI]') AND name = N'indx_ANAFUNZ1')
CREATE NONCLUSTERED INDEX [indx_ANAFUNZ1] ON [db_user].[DPA_ANAGRAFICA_FUNZIONI] 
(
	[CHA_TIPO_FUNZ] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_DOC]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE  [db_user].[SP_EREDITA_VIS_DOC]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

DECLARE @retValue int

BEGIN
SET @retValue = 0

-- prende ruoli inferiori nella stessa UO
EXECUTE @retValue=SP_EREDITA_VIS_DOC_E1 @IDCorrGlobaleUO, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

IF(@retValue = 1)
RETURN 1

-- cicla tra le UO inferiori
EXECUTE @retValue=SP_EREDITA_VIS_DOC_E2 @IDCorrGlobaleUO, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

IF(@retValue = 1)
RETURN 1

RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_UO_SMISTAMENTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_UO_SMISTAMENTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_REGISTRO] [int] NOT NULL,
	[ID_UO] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_UTENTE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TRASM_UTENTE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TRASM_SINGOLA] [int] NULL,
	[ID_PEOPLE] [int] NULL,
	[DTA_VISTA] [datetime] NULL,
	[DTA_ACCETTATA] [datetime] NULL,
	[DTA_RIFIUTATA] [datetime] NULL,
	[DTA_RISPOSTA] [datetime] NULL,
	[CHA_VISTA] [varchar](1) NULL,
	[CHA_ACCETTATA] [varchar](1) NULL,
	[CHA_RIFIUTATA] [varchar](1) NULL,
	[VAR_NOTE_ACC] [varchar](250) NULL,
	[VAR_NOTE_RIF] [varchar](250) NULL,
	[CHA_VALIDA] [varchar](1) NULL,
	[ID_TRASM_RISP_SING] [int] NULL,
	[CHA_IN_TODOLIST] [char](1) NULL DEFAULT ('1'),
	[DTA_RIMOZIONE_TODOLIST] [datetime] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_UTENTE]') AND name = N'indx_TRASMUTE1')
CREATE NONCLUSTERED INDEX [indx_TRASMUTE1] ON [db_user].[DPA_TRASM_UTENTE] 
(
	[ID_TRASM_SINGOLA] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_UTENTE]') AND name = N'indx_TRASMUTE2')
CREATE NONCLUSTERED INDEX [indx_TRASMUTE2] ON [db_user].[DPA_TRASM_UTENTE] 
(
	[ID_PEOPLE] ASC
) ON [PRIMARY]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[TR_UPDATE_DPA_TODOLIST]') AND OBJECTPROPERTY(id, N'IsTrigger') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE  TRIGGER [db_user].[TR_UPDATE_DPA_TODOLIST] ON [db_user].[DPA_TRASM_UTENTE]
AFTER UPDATE
AS
IF UPDATE(CHA_IN_TODOLIST)
BEGIN
DELETE db_user.DPA_TODOLIST WHERE ID_TRASM_UTENTE IN (select system_id from INSERTED)
END
' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TRASMISSIONE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_RUOLO_IN_UO] [int] NULL,
	[ID_PEOPLE] [int] NULL,
	[CHA_TIPO_OGGETTO] [varchar](1) NULL,
	[ID_PROFILE] [int] NULL,
	[ID_PROJECT] [int] NULL,
	[DTA_INVIO] [datetime] NULL,
	[VAR_NOTE_GENERALI] [varchar](250) NULL,
	[CHA_CESSIONE] [char](1) NULL,
	[CHA_SALVATA_CON_CESSIONE] [char](1) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND name = N'indx_TRASM1')
CREATE NONCLUSTERED INDEX [indx_TRASM1] ON [db_user].[DPA_TRASMISSIONE] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND name = N'indx_TRASM2')
CREATE NONCLUSTERED INDEX [indx_TRASM2] ON [db_user].[DPA_TRASMISSIONE] 
(
	[ID_PROFILE] ASC,
	[ID_PEOPLE] ASC,
	[ID_RUOLO_IN_UO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND name = N'indx_TRASM3')
CREATE NONCLUSTERED INDEX [indx_TRASM3] ON [db_user].[DPA_TRASMISSIONE] 
(
	[ID_PROFILE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND name = N'indx_TRASM4')
CREATE NONCLUSTERED INDEX [indx_TRASM4] ON [db_user].[DPA_TRASMISSIONE] 
(
	[ID_PROJECT] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND name = N'indx_TRASM5')
CREATE NONCLUSTERED INDEX [indx_TRASM5] ON [db_user].[DPA_TRASMISSIONE] 
(
	[DTA_INVIO] DESC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASMISSIONE]') AND name = N'indx_TRASM6')
CREATE NONCLUSTERED INDEX [indx_TRASM6] ON [db_user].[DPA_TRASMISSIONE] 
(
	[ID_PROJECT] ASC,
	[ID_PEOPLE] ASC,
	[ID_RUOLO_IN_UO] ASC
) ON [PRIMARY]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER OFF
GO

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[TR_INSERT_DPA_TODOLIST]') AND OBJECTPROPERTY(id, N'IsTrigger') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE TRIGGER [db_user].[TR_INSERT_DPA_TODOLIST] ON [db_user].[DPA_TRASMISSIONE]
AFTER UPDATE
AS
IF UPDATE(DTA_INVIO)
BEGIN
INSERT INTO DPA_TODOLIST
SELECT DT.system_id, dtu.id_trasm_singola, dtu.system_id,
DT.dta_invio, DT.id_people, DT.id_ruolo_in_uo,
dtu.id_people,dts.id_ragione,DT.var_note_generali,
dts.var_note_sing,dts.dta_scadenza, DT.id_profile,
DT.id_project,
CONVERT (INT,db_user.vardescribe(dts.id_corr_globale,''ID_GRUPPO'')) AS id_ruolo_dest,
CONVERT (INT,db_user.vardescribe(DT.id_profile,''PROF_IDREG'')) AS id_registro,
dts.CHA_TIPO_DEST
FROM INSERTED DT, DPA_TRASM_SINGOLA dts,DPA_TRASM_UTENTE dtu
WHERE dtu.id_trasm_singola = dts.system_id AND dts.id_trasmissione = DT.system_id AND dtu.cha_in_todolist = 1
END
' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_NOTE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_NOTE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[TESTO] [nvarchar](2000) NULL,
	[DATACREAZIONE] [datetime] NOT NULL,
	[IDUTENTECREATORE] [int] NOT NULL,
	[IDRUOLOCREATORE] [int] NOT NULL,
	[TIPOVISIBILITA] [char](1) NOT NULL,
	[TIPOOGGETTOASSOCIATO] [char](1) NOT NULL,
	[IDOGGETTOASSOCIATO] [int] NOT NULL,
 CONSTRAINT [PK_NOTE] PRIMARY KEY NONCLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_NOTE]') AND name = N'INDX_ID_OGG')
CREATE NONCLUSTERED INDEX [INDX_ID_OGG] ON [db_user].[DPA_NOTE] 
(
	[IDOGGETTOASSOCIATO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_NOTE]') AND name = N'INDX_ID_RUOLO')
CREATE NONCLUSTERED INDEX [INDX_ID_RUOLO] ON [db_user].[DPA_NOTE] 
(
	[IDRUOLOCREATORE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_NOTE]') AND name = N'INDX_ID_UTENTE')
CREATE NONCLUSTERED INDEX [INDX_ID_UTENTE] ON [db_user].[DPA_NOTE] 
(
	[IDUTENTECREATORE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_NOTE]') AND name = N'INDX_TESTO_NOTE')
CREATE NONCLUSTERED INDEX [INDX_TESTO_NOTE] ON [db_user].[DPA_NOTE] 
(
	[TESTO] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_UO_REG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_UO_REG](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_UO] [int] NULL,
	[ID_REGISTRO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_OGGETTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_OGGETTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Tipo] [varchar](255) NULL,
	[Descrizione] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[GetCountNote]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE FUNCTION [db_user].[GetCountNote] (@tipoOggetto char(1), @idOggetto int, @note nvarchar(2000), @idUtente int, @idGruppo int)  
RETURNS int AS  
BEGIN 
	RETURN 
	(
		SELECT COUNT(SYSTEM_ID)
		FROM   DPA_NOTE N 
		WHERE  N.TIPOOGGETTOASSOCIATO = @tipoOggetto AND
			   N.IDOGGETTOASSOCIATO = @idOggetto AND
			   N.TESTO LIKE @note AND
		      (N.TIPOVISIBILITA = ''T'' OR
		      (N.TIPOVISIBILITA = ''P'' AND N.IDUTENTECREATORE = @idUtente) OR
		      (N.TIPOVISIBILITA = ''R'' AND N.IDRUOLOCREATORE = @idGruppo))
	)
END             
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_COLL_MSPEDIZ_DOCUMENTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_COLL_MSPEDIZ_DOCUMENTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[IDAMM] [int] NOT NULL,
	[ID_RUOLO] [int] NULL,
	[ID_UTENTE] [int] NULL,
	[ID_DOCUMENTTYPES] [int] NOT NULL,
	[ID_PROFILE] [int] NOT NULL,
 CONSTRAINT [INDX_MSPEDIZ_DOC_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ASSOCIAZIONE_TEMPLATES]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ASSOCIAZIONE_TEMPLATES](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_OGGETTO] [int] NULL,
	[ID_TEMPLATE] [int] NULL,
	[Doc_Number] [varchar](255) NULL,
	[Valore_Oggetto_Db] [varchar](255) NULL,
	[ANNO] [int] NULL,
	[ID_AOO_RF] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_DESC_FASC] [varchar](255) NULL,
	[ID_AMM] [int] NULL,
	[ABILITATO_SI_NO] [int] NULL,
	[IN_ESERCIZIO] [varchar](255) NULL,
	[PATH_MOD_1] [varchar](255) NULL,
	[EXT_MOD_1] [varchar](10) NULL,
	[PATH_MOD_2] [varchar](255) NULL,
	[EXT_MOD_2] [varchar](10) NULL,
	[GG_SCADENZA] [int] NULL,
	[GG_PRE_SCADENZA] [int] NULL,
	[CHA_PRIVATO] [varchar](1) NULL,
	[IPERFASCICOLO] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_OGGETTO_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_OGGETTO_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Tipo] [varchar](255) NULL,
	[Descrizione] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LISTE_DISTR]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LISTE_DISTR](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_LISTA_DPA_CORR] [int] NULL,
	[ID_DPA_CORR] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_INDX_SIS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_INDX_SIS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[VOCE_INDICE] [varchar](255) NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[ACTIVITYLOG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[ACTIVITYLOG](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[DOCNUMBER] [int] NULL,
	[VERSION_LABEL] [varchar](10) NULL,
	[APPLICATION] [int] NULL,
	[REF_LIBRARY] [int] NULL,
	[REF_DOCUMENT] [int] NULL,
	[ACTIVITY_TYPE] [int] NULL,
	[START_DATE] [datetime] NULL,
	[START_TIME] [datetime] NULL,
	[AUTHOR] [int] NULL,
	[TYPIST] [int] NULL,
	[ELAPSED_TIME] [int] NULL,
	[TYPE_TIME] [int] NULL,
	[KEYSTROKES] [int] NULL,
	[PAGES] [int] NULL,
	[BILLABLE] [varchar](1) NULL,
	[BILLED_ON] [datetime] NULL,
	[ACTIVITY_POSTED] [varchar](1) NULL,
	[CR_IN_USE] [varchar](1) NULL,
	[ACTIVITY_DESC] [varchar](70) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[APPS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[APPS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[APPLICATION] [varchar](256) NULL,
	[DESCRIPTION] [varchar](256) NULL,
	[COUNT_KEYS] [varchar](1) NULL,
	[TIMEOUT] [int] NULL,
	[VER_TOLERANT] [varchar](1) NULL,
	[FILING_SCHEME] [int] NULL,
	[VALID_ON_PROFILE] [varchar](1) NULL,
	[READ_ONLY] [varchar](1) NULL,
	[DEFAULT_EXTENSION] [varchar](256) NULL,
	[OPEN_LAUNCH] [varchar](1) NULL,
	[ON_DESKTOP] [varchar](1) NULL,
	[DOS_MONITORING] [varchar](1) NULL,
	[LANGUAGE] [int] NULL,
	[VIEWER] [int] NULL,
	[PRINTING] [int] NULL,
	[DISABLED] [varchar](1) NULL,
	[OUTPUT_EXTS] [varchar](50) NULL,
	[PDFCOMPAT] [varchar](1) NULL,
	[INTEGRATED] [varchar](1) NULL,
	[FILE_TYPES] [text] NULL,
	[SUPER_APP] [varchar](1) NULL,
	[USE_UNCNAME] [varchar](1) NULL,
	[DIRMON_STUBCHECK] [varchar](1) NULL,
	[MIME_TYPE] [varchar](100) NULL,
	[LAST_UPDATE] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[COMPONENTS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[COMPONENTS](
	[PATH] [varchar](500) NULL,
	[LOCKED] [varchar](1) NULL,
	[COMPTYPE] [varchar](3) NULL,
	[VERSION_ID] [int] NOT NULL,
	[DOCNUMBER] [int] NULL,
	[FILE_SIZE] [int] NULL,
	[ALTERNATE_PATH] [varchar](128) NULL,
	[VAR_IMPRONTA] [varchar](64) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[COMPONENTS]') AND name = N'indx_COMP1')
CREATE NONCLUSTERED INDEX [indx_COMP1] ON [db_user].[COMPONENTS] 
(
	[DOCNUMBER] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[COMPONENTS]') AND name = N'indx_COMP2')
CREATE NONCLUSTERED INDEX [indx_COMP2] ON [db_user].[COMPONENTS] 
(
	[VERSION_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DOCUMENTTYPES]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DOCUMENTTYPES](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[TYPE_ID] [varchar](32) NULL,
	[DESCRIPTION] [varchar](60) NULL,
	[DISABLED] [varchar](1) NULL,
	[STORAGE_TYPE] [varchar](1) NULL,
	[RETENTION_DAYS] [int] NULL,
	[MAX_VERSIONS] [int] NULL,
	[MAX_SUBVERSIONS] [int] NULL,
	[FULL_TEXT] [varchar](1) NULL,
	[TARGET_DOCSRVR] [int] NULL,
	[RET_2] [int] NULL,
	[RET_2_TYPE] [varchar](1) NULL,
	[KEEP_CRITERIA] [varchar](1) NULL,
	[VERSIONS_TO_KEEP] [int] NULL,
	[LAST_UPDATE] [datetime] NULL,
	[CHA_TIPO_CANALE] [varchar](1) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DOCUMENTTYPES]') AND name = N'indx_DOCTYPE1')
CREATE NONCLUSTERED INDEX [indx_DOCTYPE1] ON [db_user].[DOCUMENTTYPES] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[GROUPS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[GROUPS](
	[SYSTEM_ID] [int] IDENTITY(2,2) NOT NULL,
	[GROUP_ID] [varchar](32) NULL,
	[NETWORK_ID] [varchar](254) NULL,
	[GROUP_NAME] [varchar](128) NULL,
	[PROFILE_DEFAULTS] [text] NULL,
	[DISABLED] [varchar](1) NULL,
	[ALLOW_LOGIN] [varchar](1) NULL,
	[UNIV_ACCESS] [int] NULL,
	[DELETE_VERSIONS] [varchar](1) NULL,
	[EDIT_PREVIOUS_VER] [varchar](1) NULL,
	[MAX_VERSIONS] [int] NULL,
	[MAX_SUBVERSIONS] [int] NULL,
	[NEW_VERSIONS] [varchar](1) NULL,
	[SAVE_TO_REM_LIB] [varchar](1) NULL,
	[PRECONNECT_LIBS] [varchar](1) NULL,
	[NV_AUTHOR_EDIT] [varchar](1) NULL,
	[NV_ENTERED_BY] [varchar](1) NULL,
	[NV_BILLABLE] [varchar](1) NULL,
	[DISPLAY_VER_LIST] [varchar](1) NULL,
	[MV_DOCS_IF_CHNG] [varchar](1) NULL,
	[CHECKOUT] [varchar](1) NULL,
	[OTHER_CHECKIN] [varchar](1) NULL,
	[CHECKIN_REMINDER] [varchar](1) NULL,
	[RESET_STATUS] [varchar](1) NULL,
	[COPY_IN_USE] [varchar](1) NULL,
	[TEMPLATE_MANAGER] [varchar](1) NULL,
	[MASS_UPD_PROFILES] [varchar](1) NULL,
	[AUTO_LOGIN] [varchar](1) NULL,
	[VIEW_UNSECURED] [varchar](1) NULL,
	[PROMPT_PAGES] [varchar](1) NULL,
	[NONBILL_PAGES] [varchar](1) NULL,
	[DEFAULT_PAGES] [int] NULL,
	[GET_EDIT_INFO] [varchar](1) NULL,
	[VISIT_AUTHOR_EDIT] [varchar](1) NULL,
	[VISIT_ENTERED_BY] [varchar](1) NULL,
	[LCP_RUN] [varchar](1) NULL,
	[EDIT_VTS] [varchar](1) NULL,
	[EDIT_LIBPARMS] [varchar](1) NULL,
	[EDIT_WS_PARAMS] [varchar](1) NULL,
	[EDIT_USER_DEFAULTS] [varchar](1) NULL,
	[MANAGE_GROUPS] [varchar](1) NULL,
	[DI_RUN] [varchar](1) NULL,
	[MBLINST_RUN] [varchar](1) NULL,
	[DI_MANAGE] [varchar](1) NULL,
	[CR_RUN] [varchar](1) NULL,
	[SM_RUN] [varchar](1) NULL,
	[DD_RUN] [varchar](1) NULL,
	[DB_EDIT] [varchar](1) NULL,
	[DBI_RUN] [varchar](1) NULL,
	[INDEXER_RUN] [varchar](1) NULL,
	[INTERCHANGE_RUN] [varchar](1) NULL,
	[PROFSEC] [varchar](1) NULL,
	[ALLOW_DOC_DELETE] [varchar](1) NULL,
	[ALLOW_CONTENT_DEL] [varchar](1) NULL,
	[ALLOW_QUEUE_DEL] [varchar](1) NULL,
	[PROFILE_FORM] [int] NULL,
	[HITLIST_FORM] [int] NULL,
	[ACL_DEFAULTS] [varchar](254) NULL,
	[REMOVE_MON_LIST] [varchar](1) NULL,
	[DISPLAY_MON_LIST] [varchar](1) NULL,
	[WARN_SECURE] [varchar](1) NULL,
	[ONLY_READONLY] [varchar](1) NULL,
	[FORCE_CHECKIN] [varchar](1) NULL,
	[MBL_EDITCOPY] [varchar](1) NULL,
	[MBL_OVERWRITE] [varchar](1) NULL,
	[MIN_DISKFREE] [int] NULL,
	[AUTOCLEAN] [varchar](1) NULL,
	[DEF_SHAD_RETENTION] [int] NULL,
	[SHADOW_DOCS] [varchar](1) NULL,
	[SHADOW_PROFILES] [varchar](1) NULL,
	[SHADOW_SEC_DOCS] [varchar](1) NULL,
	[DEFAULT_FT_INDEX] [int] NULL,
	[DISABLE_NATIVE] [varchar](1) NULL,
	[MAKE_READ_ONLY] [varchar](1) NULL,
	[REMOVE_READ_ONLY] [varchar](1) NULL,
	[MAKE_VER_READONLY] [varchar](1) NULL,
	[MAKE_VER_WRITABLE] [varchar](1) NULL,
	[PUBLISH_VERSION] [varchar](1) NULL,
	[UNPUBLISH_VERSION] [varchar](1) NULL,
	[DATE_FORMAT] [varchar](10) NULL,
	[TIME_FORMAT] [varchar](10) NULL,
	[ITEM_MAX] [int] NULL,
	[PAGE_MAX] [int] NULL,
	[DEFAULT_VIEWER] [varchar](10) NULL,
	[MANAGE_PRF] [varchar](1) NULL,
	[MANAGE_CYD] [varchar](1) NULL,
	[DPACKAGE] [int] NULL,
	[ALLOW_APPINT] [varchar](1) NULL,
	[ALLOW_USRSETTINGS] [varchar](1) NULL,
	[ALLOW_DOC_CREATE] [varchar](1) NULL,
	[CREATE_FOLDER] [varchar](1) NULL,
	[ROOT_FOLDER] [varchar](1) NULL,
	[CREATE_RELATION] [varchar](1) NULL,
	[SHOW_RELATED] [varchar](1) NULL,
	[REMOVE_RELATION] [varchar](1) NULL,
	[ALLOW_NOTIF] [varchar](1) NULL,
	[ALLOW_PREVIEW] [varchar](1) NULL,
	[WARN_UPDATE_AVAIL] [varchar](1) NULL,
	[ENABLE_WORKSPACE] [varchar](1) NULL,
	[LAST_UPDATE] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[GROUPS]') AND name = N'indx_GROUPS1')
CREATE NONCLUSTERED INDEX [indx_GROUPS1] ON [db_user].[GROUPS] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[GROUPS]') AND name = N'indx_GROUPS2')
CREATE NONCLUSTERED INDEX [indx_GROUPS2] ON [db_user].[GROUPS] 
(
	[GROUP_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[NETWORK_ALIASES]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[NETWORK_ALIASES](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[NETWORK_ID] [varchar](240) NULL,
	[NETWORK_TYPE] [int] NULL,
	[PERSONORGROUP] [int] NULL,
	[PARENT_ORG] [int] NULL,
	[LAST_UPDATE] [datetime] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[qs_spc_calc_actually_used]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[qs_spc_calc_actually_used](@DbName sysname, @obj_name sysname = null, @pages_actually_used decimal(19,2) output )
as
begin
create table #extentinfo (
file_id integer,
page_id integer,
pg_alloc integer,
ext_size integer,
obj_id integer,
index_id integer,
pfs_bytes binary(8))
if @obj_name is null
insert into #extentinfo exec (''dbcc extentinfo(''''''+ @DbName + '''''')'')
else
insert into #extentinfo exec (''dbcc extentinfo('''''' + @DbName + '''''','''''' + @obj_name + '''''')'')
select @pages_actually_used = sum(dbo.qs_fn_interpret_pfs(pfs_bytes)) from #extentinfo
drop table #extentinfo
end


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[PEOPLEGROUPS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[PEOPLEGROUPS](
	[GROUPS_SYSTEM_ID] [int] NOT NULL,
	[PEOPLE_SYSTEM_ID] [int] NOT NULL,
	[LAST_UPDATE] [datetime] NULL,
	[CHA_UTENTE_RIF] [varchar](1) NULL,
	[CHA_PREFERITO] [varchar](1) NULL,
	[DTA_FINE] [datetime] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PEOPLEGROUPS]') AND name = N'indx_PEOPLEGROUP1')
CREATE NONCLUSTERED INDEX [indx_PEOPLEGROUP1] ON [db_user].[PEOPLEGROUPS] 
(
	[GROUPS_SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PEOPLEGROUPS]') AND name = N'indx_PEOPLEGROUP2')
CREATE NONCLUSTERED INDEX [indx_PEOPLEGROUP2] ON [db_user].[PEOPLEGROUPS] 
(
	[PEOPLE_SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PEOPLEGROUPS]') AND name = N'indx_PEOPLEGROUP3')
CREATE NONCLUSTERED INDEX [indx_PEOPLEGROUP3] ON [db_user].[PEOPLEGROUPS] 
(
	[PEOPLE_SYSTEM_ID] ASC,
	[GROUPS_SYSTEM_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[PROFILE](
	[SYSTEM_ID] [int] IDENTITY(1,2) NOT NULL,
	[DOCNUMBER] [int] NULL,
	[DOCNAME] [varchar](240) NULL,
	[TYPIST] [int] NULL,
	[AUTHOR] [int] NULL,
	[DOCUMENTTYPE] [int] NULL,
	[LAST_EDITED_BY] [int] NULL,
	[LAST_LOCKED_BY] [int] NULL,
	[LAST_ACCESS_ID] [int] NULL,
	[APPLICATION] [int] NULL,
	[FORM] [int] NULL,
	[STORAGETYPE] [varchar](1) NULL,
	[RETENTION] [int] NULL,
	[PROCESS_DATE] [datetime] NULL,
	[CREATION_DATE] [datetime] NULL,
	[CREATION_TIME] [datetime] NULL,
	[LAST_EDIT_DATE] [datetime] NULL,
	[LAST_EDIT_TIME] [datetime] NULL,
	[LAST_ACCESS_DATE] [datetime] NULL,
	[LAST_ACCESS_TIME] [datetime] NULL,
	[ARCHIVE_DATE] [datetime] NULL,
	[ARCHIVE_ID] [int] NULL,
	[KEYSTROKES] [int] NULL,
	[EDITING_TIME] [int] NULL,
	[TYPE_TIME] [int] NULL,
	[BILLABLE] [varchar](1) NULL,
	[FULLTEXT] [varchar](1) NULL,
	[FULLTEXT_DATE] [datetime] NULL,
	[STATUS] [int] NULL,
	[DEFAULT_RIGHTS] [int] NULL,
	[ABSTRACT] [varchar](254) NULL,
	[PATH] [varchar](128) NULL,
	[DOCSERVER_LOC] [varchar](64) NULL,
	[DOCSERVER_OS] [int] NULL,
	[PREV_SERVER_LOC] [varchar](64) NULL,
	[PREV_SERVER_OS] [int] NULL,
	[KEYWORDS_DISPLAY] [varchar](254) NULL,
	[READONLY_DATE] [datetime] NULL,
	[RELATED] [varchar](1) NULL,
	[PD_OBJ_TYPE] [varchar](2) NULL,
	[PD_DOC_BARCODE] [int] NULL,
	[PD_FILE_PART] [int] NULL,
	[PD_BOX] [int] NULL,
	[PD_SUSPEND] [varchar](1) NULL,
	[PD_ACTIONBY_DATE] [datetime] NULL,
	[PD_FAVOURITES] [int] NULL,
	[PD_SUPSEDED] [varchar](1) NULL,
	[PD_SUPSEDES] [varchar](1) NULL,
	[PD_VITAL] [varchar](1) NULL,
	[PD_MEDIA_TYPE] [varchar](2) NULL,
	[PD_ORGANIZATION] [varchar](100) NULL,
	[PD_FILE_DATE] [datetime] NULL,
	[PD_DATE_CREATED] [datetime] NULL,
	[PD_PUBLISH_DATE] [datetime] NULL,
	[PD_EMAIL_BCC] [varchar](100) NULL,
	[PD_EMAIL_CC] [varchar](100) NULL,
	[PD_EMAIL_DATE] [varchar](40) NULL,
	[PD_ADDRESSEE] [varchar](100) NULL,
	[PD_ORIGINATOR] [varchar](200) NULL,
	[PD_CLASSIFICATION] [varchar](240) NULL,
	[PD_SUPSEDED_DATE] [datetime] NULL,
	[PD_DOC2CSGMT_LINK] [int] NULL,
	[PD_ATTACH_CHANGE] [varchar](1) NULL,
	[PD_ACTIONED] [varchar](1) NULL,
	[PD_VREVIEW_DATE] [datetime] NULL,
	[PD_PRTO_ACTION] [int] NULL,
	[PD_PRTO_AUTHORITY] [int] NULL,
	[PD_STATUSES] [int] NULL,
	[MAIL_ID] [varchar](80) NULL,
	[PARENTMAIL_ID] [varchar](60) NULL,
	[THREAD_NUM] [int] NULL,
	[ATTACH_NUM] [varchar](20) NULL,
	[MSG_ITEM] [int] NULL,
	[DELIVER_REC] [int] NULL,
	[EMAIL_RECEIVED] [datetime] NULL,
	[EMAIL_SENT] [datetime] NULL,
	[MAIL_MSG_ID] [varchar](100) NULL,
	[MAIL_MSG_IDX] [int] NULL,
	[VAR_CHIAVE_PROTO] [varchar](64) NOT NULL DEFAULT (convert(varchar,getdate(),109)),
	[ID_REGISTRO] [int] NULL,
	[CHA_TIPO_PROTO] [varchar](1) NULL,
	[ID_OGGETTO] [int] NULL,
	[NUM_PROTO] [int] NULL,
	[NUM_ANNO_PROTO] [int] NULL,
	[VAR_PROTO_EME] [varchar](64) NULL,
	[DTA_PROTO_EME] [datetime] NULL,
	[VAR_COGNOME_EME] [varchar](64) NULL,
	[VAR_NOME_EME] [varchar](64) NULL,
	[ID_PARENT] [int] NULL,
	[DTA_PROTO] [datetime] NULL,
	[CHA_MOD_OGGETTO] [varchar](1) NULL,
	[CHA_MOD_MITT_DEST] [varchar](1) NULL,
	[CHA_MOD_MITT_INT] [varchar](1) NULL,
	[CHA_MOD_DEST_OCC] [varchar](1) NULL,
	[DTA_PROTO_IN] [datetime] NULL,
	[VAR_PROTO_IN] [varchar](128) NULL,
	[ID_ANNULLATORE] [int] NULL,
	[DTA_ANNULLA] [datetime] NULL,
	[VAR_AUT_ANNULLA] [varchar](250) NULL,
	[VAR_SEGNATURA] [varchar](250) NULL,
	[CHA_DA_PROTO] [varchar](1) NULL,
	[VAR_NOTE] [varchar](2000) NULL,
	[ID_TIPO_ATTO] [int] NULL,
	[CHA_ASSEGNATO] [varchar](1) NULL,
	[CHA_IMG] [varchar](1) NULL,
	[CHA_FASCICOLATO] [varchar](1) NULL,
	[CHA_INVIO_CONFERMA] [varchar](1) NULL,
	[CHA_CONGELATO] [varchar](1) NULL,
	[CHA_CONSOLIDATO] [varchar](1) NULL,
	[CHA_PRIVATO] [varchar](1) NULL,
	[VAR_NUM_OGGETTO] [varchar](10) NULL,
	[VAR_COMM_REF] [varchar](256) NULL,
	[CHA_EVIDENZA] [varchar](1) NULL,
	[VAR_SEDE] [varchar](64) NULL,
	[VAR_PROF_OGGETTO] [varchar](2000) NULL,
	[ID_PEOPLE_PROT] [int] NULL,
	[ID_RUOLO_PROT] [int] NULL,
	[ID_UO_PROT] [int] NULL,
	[ID_UO_REF] [int] NULL,
	[ID_RUOLO_CREATORE] [int] NULL,
	[ID_UO_CREATORE] [int] NULL,
	[CHA_INTEROP] [varchar](1) NULL,
	[DTA_SCADENZA] [datetime] NULL,
	[CHA_PERSONALE] [varchar](1) NULL,
	[CHA_IN_CESTINO] [varchar](1) NULL,
	[VAR_NOTE_CESTINO] [varchar](256) NULL,
	[ID_DOCUMENTO_PRINCIPALE] [int] NULL,
	[CHA_IN_ARCHIVIO] [varchar](1) NULL DEFAULT (0),
 CONSTRAINT [INDX_PROFILE_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'INDX_PROFILE_DOC_PRINC')
CREATE NONCLUSTERED INDEX [INDX_PROFILE_DOC_PRINC] ON [db_user].[PROFILE] 
(
	[ID_DOCUMENTO_PRINCIPALE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE1')
CREATE UNIQUE NONCLUSTERED INDEX [indx_PROFILE1] ON [db_user].[PROFILE] 
(
	[SYSTEM_ID] DESC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE10')
CREATE NONCLUSTERED INDEX [indx_PROFILE10] ON [db_user].[PROFILE] 
(
	[NUM_ANNO_PROTO] DESC,
	[NUM_PROTO] DESC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE11')
CREATE NONCLUSTERED INDEX [indx_PROFILE11] ON [db_user].[PROFILE] 
(
	[CHA_TIPO_PROTO] ASC,
	[CHA_DA_PROTO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE12')
CREATE NONCLUSTERED INDEX [indx_PROFILE12] ON [db_user].[PROFILE] 
(
	[CHA_ASSEGNATO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE13')
CREATE NONCLUSTERED INDEX [indx_PROFILE13] ON [db_user].[PROFILE] 
(
	[CHA_FASCICOLATO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE2')
CREATE NONCLUSTERED INDEX [indx_PROFILE2] ON [db_user].[PROFILE] 
(
	[DOCNUMBER] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE3')
CREATE NONCLUSTERED INDEX [indx_PROFILE3] ON [db_user].[PROFILE] 
(
	[NUM_PROTO] DESC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE4')
CREATE NONCLUSTERED INDEX [indx_PROFILE4] ON [db_user].[PROFILE] 
(
	[NUM_ANNO_PROTO] DESC,
	[CHA_DA_PROTO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE5')
CREATE NONCLUSTERED INDEX [indx_PROFILE5] ON [db_user].[PROFILE] 
(
	[ID_OGGETTO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE6')
CREATE NONCLUSTERED INDEX [indx_PROFILE6] ON [db_user].[PROFILE] 
(
	[DTA_PROTO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE7')
CREATE NONCLUSTERED INDEX [indx_PROFILE7] ON [db_user].[PROFILE] 
(
	[DTA_PROTO_IN] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_PROFILE9')
CREATE NONCLUSTERED INDEX [indx_PROFILE9] ON [db_user].[PROFILE] 
(
	[CHA_TIPO_PROTO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_UPPER_VAR_PROF_OGGETTO')
CREATE NONCLUSTERED INDEX [indx_UPPER_VAR_PROF_OGGETTO] ON [db_user].[PROFILE] 
(
	[VAR_PROF_OGGETTO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROFILE]') AND name = N'indx_X_PROF1')
CREATE UNIQUE NONCLUSTERED INDEX [indx_X_PROF1] ON [db_user].[PROFILE] 
(
	[VAR_CHIAVE_PROTO] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[PROJECT](
	[SYSTEM_ID] [int] IDENTITY(2,2) NOT NULL,
	[DESCRIPTION] [varchar](2000) NULL,
	[ICONIZED] [varchar](1) NULL,
	[PROFILE_ID] [int] NULL,
	[CHA_TIPO_PROJ] [varchar](1) NULL,
	[VAR_CODICE] [varchar](64) NULL,
	[ID_AMM] [int] NULL,
	[ID_REGISTRO] [int] NULL,
	[NUM_LIVELLO] [int] NULL,
	[CHA_TIPO_FASCICOLO] [varchar](1) NULL,
	[ID_FASCICOLO] [int] NULL,
	[ID_PARENT] [int] NULL,
	[VAR_NOTE] [varchar](1024) NULL,
	[DTA_APERTURA] [datetime] NULL,
	[DTA_CHIUSURA] [datetime] NULL,
	[CHA_STATO] [varchar](1) NULL,
	[VAR_COD_ULTIMO] [varchar](32) NULL,
	[VAR_COD_LIV1] [varchar](32) NULL,
	[VAR_COD_LIV2] [varchar](32) NULL,
	[VAR_COD_LIV3] [varchar](32) NULL,
	[VAR_COD_LIV4] [varchar](32) NULL,
	[VAR_COD_LIV5] [varchar](32) NULL,
	[VAR_COD_LIV6] [varchar](32) NULL,
	[VAR_COD_LIV7] [varchar](32) NULL,
	[VAR_COD_LIV8] [varchar](32) NULL,
	[ID_TIPO_PROC] [int] NULL,
	[ID_LEGISLATURA] [int] NULL,
	[ETDOC_RANDOM_ID] [bigint] NULL,
	[DTA_Creazione] [datetime] NULL,
	[Num_fascicolo] [int] NULL,
	[Anno_creazione] [int] NULL,
	[CHA_RW] [varchar](1) NULL,
	[ID_UO_REF] [int] NULL,
	[ID_UO_LF] [int] NULL,
	[DTA_UO_LF] [datetime] NULL,
	[NUM_MESI_CONSERVAZIONE] [int] NULL,
	[VAR_CHIAVE_FASC] [varchar](64) NOT NULL DEFAULT (convert(varchar,getdate(),109)),
	[CARTACEO] [smallint] NULL,
	[ID_TIPO_FASC] [int] NULL,
	[CHA_PRIVATO] [varchar](1) NULL,
	[CHA_BLOCCA_FASC] [varchar](2) NULL,
	[ID_TITOLARIO] [int] NULL,
	[DTA_ATTIVAZIONE] [datetime] NULL,
	[DTA_CESSAZIONE] [datetime] NULL,
	[DTA_SCADENZA] [datetime] NULL,
	[CHA_IN_ARCHIVIO] [varchar](1) NULL DEFAULT (0),
 CONSTRAINT [INDX_PROJECT_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'INDX_PROJ_UNIQUE')
CREATE UNIQUE NONCLUSTERED INDEX [INDX_PROJ_UNIQUE] ON [db_user].[PROJECT] 
(
	[VAR_CHIAVE_FASC] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ1')
CREATE UNIQUE NONCLUSTERED INDEX [indx_PROJ1] ON [db_user].[PROJECT] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ10')
CREATE NONCLUSTERED INDEX [indx_PROJ10] ON [db_user].[PROJECT] 
(
	[CHA_TIPO_PROJ] ASC,
	[CHA_TIPO_FASCICOLO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ11')
CREATE NONCLUSTERED INDEX [indx_PROJ11] ON [db_user].[PROJECT] 
(
	[Anno_creazione] ASC,
	[CHA_TIPO_PROJ] ASC,
	[CHA_TIPO_FASCICOLO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'INDX_PROJ18')
CREATE UNIQUE NONCLUSTERED INDEX [INDX_PROJ18] ON [db_user].[PROJECT] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ2')
CREATE NONCLUSTERED INDEX [indx_PROJ2] ON [db_user].[PROJECT] 
(
	[VAR_CODICE] ASC,
	[ID_AMM] ASC,
	[ID_REGISTRO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ3')
CREATE NONCLUSTERED INDEX [indx_PROJ3] ON [db_user].[PROJECT] 
(
	[Num_fascicolo] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ4')
CREATE NONCLUSTERED INDEX [indx_PROJ4] ON [db_user].[PROJECT] 
(
	[Anno_creazione] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ5')
CREATE NONCLUSTERED INDEX [indx_PROJ5] ON [db_user].[PROJECT] 
(
	[VAR_COD_LIV1] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ6')
CREATE NONCLUSTERED INDEX [indx_PROJ6] ON [db_user].[PROJECT] 
(
	[ID_FASCICOLO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ7')
CREATE NONCLUSTERED INDEX [indx_PROJ7] ON [db_user].[PROJECT] 
(
	[ID_PARENT] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ8')
CREATE NONCLUSTERED INDEX [indx_PROJ8] ON [db_user].[PROJECT] 
(
	[CHA_TIPO_PROJ] ASC,
	[NUM_LIVELLO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PROJECT]') AND name = N'indx_PROJ9')
CREATE NONCLUSTERED INDEX [indx_PROJ9] ON [db_user].[PROJECT] 
(
	[Num_fascicolo] ASC,
	[Anno_creazione] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ANAGRAFICA_LOG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ANAGRAFICA_LOG](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_CODICE] [nvarchar](32) NOT NULL,
	[VAR_DESCRIZIONE] [nvarchar](128) NOT NULL,
	[VAR_OGGETTO] [nvarchar](128) NOT NULL,
	[VAR_METODO] [nvarchar](64) NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CANALI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CANALI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_SERVER_SMTP] [varchar](64) NULL,
	[NUM_PORTA_SMTP] [int] NULL,
	[VAR_SERVER_POP] [varchar](64) NULL,
	[NUM_PORTA_POP] [int] NULL,
	[VAR_DESC_CANALE] [varchar](1) NULL,
	[ID_DOCUMENTTYPE] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_FASC_E1]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE  PROCEDURE [db_user].[SP_EREDITA_VIS_FASC_E1]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

/*
.........................................................................................
SP_EREDITA_VIS_FASC_E1          		ESTENSIONE 1
.........................................................................................
*/

DECLARE @retValue int

BEGIN
SET @retValue = 0

-- Prende tutti i fascicoli PROCEDIMENTALI dei ruoli inferiori/pari livello della UO data
EXECUTE @retValue=SP_EREDITA_VIS_FASC_E2 @IDCorrGlobaleUO, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

IF(@retValue = 1)
RETURN(1)

-- cicla tra le UO inferiori
EXECUTE @retValue=SP_EREDITA_VIS_FASC_E3 @IDCorrGlobaleUO, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

IF(@retValue = 1)
RETURN(1)

RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CANALI_REG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CANALI_REG](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_CANALE] [int] NULL,
	[ID_REGISTRO] [int] NULL,
	[ID_DOCUMENTTYPE] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CORR_GLOBALI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_REGISTRO] [int] NULL,
	[ID_AMM] [int] NULL,
	[VAR_COD_RUBRICA] [varchar](128) NULL,
	[VAR_DESC_CORR] [varchar](256) NULL,
	[ID_OLD] [int] NULL,
	[DTA_INIZIO] [datetime] NULL,
	[DTA_FINE] [datetime] NULL,
	[ID_PARENT] [int] NULL,
	[NUM_LIVELLO] [int] NULL,
	[VAR_CODICE] [varchar](128) NULL,
	[ID_GRUPPO] [int] NULL,
	[ID_TIPO_RUOLO] [int] NULL,
	[CHA_DEFAULT_TRASM] [varchar](1) NULL,
	[ID_UO] [int] NULL,
	[VAR_COGNOME] [varchar](50) NULL,
	[VAR_NOME] [varchar](50) NULL,
	[ID_PEOPLE] [int] NULL,
	[CHA_TIPO_CORR] [varchar](1) NULL,
	[CHA_TIPO_IE] [varchar](1) NULL,
	[CHA_TIPO_URP] [varchar](1) NULL,
	[CHA_PA] [varchar](1) NULL,
	[VAR_CODICE_AOO] [varchar](16) NULL,
	[VAR_CODICE_AMM] [varchar](32) NULL,
	[VAR_CODICE_ISTAT] [varchar](32) NULL,
	[ID_PESO] [int] NULL,
	[VAR_EMAIL] [varchar](128) NULL,
	[CHA_DETTAGLI] [varchar](1) NULL,
	[NUM_FIGLI] [int] NULL,
	[VAR_SMTP] [varchar](128) NULL,
	[NUM_PORTA_SMTP] [int] NULL,
	[VAR_FAX_USER_LOGIN] [varchar](8) NULL,
	[CHA_RIFERIMENTO] [varchar](1) NULL,
	[ID_PEOPLE_LISTE] [int] NULL,
	[ID_GRUPPO_LISTE] [int] NULL,
	[CHA_RESPONSABILE] [varchar](1) NULL,
	[ID_PESO_ORG] [int] NULL,
 CONSTRAINT [INDX_CORR_GLOB_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORR_GLOB_TIPO_CORR')
CREATE NONCLUSTERED INDEX [indx_CORR_GLOB_TIPO_CORR] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[CHA_TIPO_CORR] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORR_GLOB_TIPO_IE')
CREATE NONCLUSTERED INDEX [indx_CORR_GLOB_TIPO_IE] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[CHA_TIPO_IE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'INDX_CORR_TIPOURP')
CREATE NONCLUSTERED INDEX [INDX_CORR_TIPOURP] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[CHA_TIPO_URP] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORRGLOB1')
CREATE NONCLUSTERED INDEX [indx_CORRGLOB1] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORRGLOB3')
CREATE NONCLUSTERED INDEX [indx_CORRGLOB3] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[ID_GRUPPO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORRGLOB5')
CREATE NONCLUSTERED INDEX [indx_CORRGLOB5] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[ID_PARENT] ASC,
	[ID_UO] ASC,
	[CHA_TIPO_URP] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORRGLOB6')
CREATE NONCLUSTERED INDEX [indx_CORRGLOB6] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[ID_PEOPLE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORRGLOB8')
CREATE NONCLUSTERED INDEX [indx_CORRGLOB8] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[VAR_CODICE] ASC,
	[CHA_TIPO_URP] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_CORRGLOB9')
CREATE NONCLUSTERED INDEX [indx_CORRGLOB9] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[VAR_CODICE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GLOBALI]') AND name = N'indx_VAR_COD_RUBRICA')
CREATE NONCLUSTERED INDEX [indx_VAR_COD_RUBRICA] ON [db_user].[DPA_CORR_GLOBALI] 
(
	[VAR_COD_RUBRICA] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CONV_PDF_SERVER]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CONV_PDF_SERVER](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_PROFILE] [int] NULL,
	[DTA_CONVERSIONE] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_AREA_LAVORO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_AREA_LAVORO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_RUOLO_IN_UO] [int] NULL,
	[ID_PROFILE] [int] NULL,
	[ID_PROJECT] [int] NULL,
	[DTA_INS] [datetime] NULL,
	[CHA_TIPO_DOC] [varchar](1) NULL,
	[CHA_TIPO_FASC] [varchar](1) NULL,
	[ID_REGISTRO] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_AREA_LAVORO]') AND name = N'indx_AREALAV')
CREATE NONCLUSTERED INDEX [indx_AREALAV] ON [db_user].[DPA_AREA_LAVORO] 
(
	[ID_PEOPLE] ASC,
	[ID_PROFILE] ASC,
	[CHA_TIPO_DOC] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_AREA_LAVORO]') AND name = N'indx_AREALAV2')
CREATE NONCLUSTERED INDEX [indx_AREALAV2] ON [db_user].[DPA_AREA_LAVORO] 
(
	[ID_PEOPLE] ASC,
	[ID_PROJECT] ASC,
	[CHA_TIPO_FASC] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_GRUPPO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CORR_GRUPPO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_GRUPPO] [int] NULL,
	[ID_COMP_GRUPPO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CORR_STO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CORR_STO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_PROFILE] [int] NULL,
	[ID_MITT_DEST] [int] NULL,
	[CHA_TIPO_MITT_DES] [varchar](1) NULL,
	[DTA_MODIFICA] [datetime] NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_RUOLO_IN_UO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_CLIENT_MODEL_PROCESSORS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_CLIENT_MODEL_PROCESSORS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[NAME] [nvarchar](255) NOT NULL,
	[CLASS_ID] [nvarchar](50) NOT NULL,
	[SUPPORTED_EXTENSIONS] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_DPA_CLIENT_WORD_PROCESSORS] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DETT_GLOBALI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DETT_GLOBALI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_CORR_GLOBALI] [int] NULL,
	[VAR_INDIRIZZO] [varchar](128) NULL,
	[VAR_CAP] [varchar](5) NULL,
	[VAR_PROVINCIA] [varchar](2) NULL,
	[VAR_NAZIONE] [varchar](32) NULL,
	[VAR_COD_FISCALE] [varchar](16) NULL,
	[VAR_TELEFONO] [varchar](16) NULL,
	[VAR_TELEFONO2] [varchar](16) NULL,
	[VAR_FAX] [varchar](16) NULL,
	[VAR_NOTE] [varchar](250) NULL,
	[VAR_COD_FIS] [varchar](128) NULL,
	[VAR_CITTA] [varchar](64) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_DETT_GLOBALI]') AND name = N'indx_DETTGLOB1')
CREATE NONCLUSTERED INDEX [indx_DETTGLOB1] ON [db_user].[DPA_DETT_GLOBALI] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_DETT_GLOBALI]') AND name = N'indx_DETTGLOB2')
CREATE NONCLUSTERED INDEX [indx_DETTGLOB2] ON [db_user].[DPA_DETT_GLOBALI] 
(
	[ID_CORR_GLOBALI] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DOC_ARRIVO_PAR]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DOC_ARRIVO_PAR](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_MITT_DEST] [int] NOT NULL,
	[ID_PROFILE] [int] NOT NULL,
	[CHA_TIPO_MITT_DEST] [varchar](1) NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_DOC_ARRIVO_PAR]') AND name = N'indx_DOCARRPAR')
CREATE NONCLUSTERED INDEX [indx_DOCARRPAR] ON [db_user].[DPA_DOC_ARRIVO_PAR] 
(
	[ID_MITT_DEST] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_DOC_ARRIVO_PAR]') AND name = N'INDX_DOCARRPAR1')
CREATE UNIQUE NONCLUSTERED INDEX [INDX_DOCARRPAR1] ON [db_user].[DPA_DOC_ARRIVO_PAR] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_DOC_ARRIVO_PAR]') AND name = N'indx_DOCARRPAR2')
CREATE NONCLUSTERED INDEX [indx_DOCARRPAR2] ON [db_user].[DPA_DOC_ARRIVO_PAR] 
(
	[ID_PROFILE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_DOC_ARRIVO_PAR]') AND name = N'indx_DOCARRPAR3')
CREATE NONCLUSTERED INDEX [indx_DOCARRPAR3] ON [db_user].[DPA_DOC_ARRIVO_PAR] 
(
	[ID_MITT_DEST] ASC,
	[ID_PROFILE] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_DOC_COLLEGAMENTI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_DOC_COLLEGAMENTI](
	[ID_DOCUMENTO] [int] IDENTITY(1,1) NOT NULL,
	[ID_DOC_COLLEGATO] [int] NOT NULL,
	[ID_TIPO_COLLEGAMENTO] [int] NOT NULL,
	[ID_ROOT] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_EL_REGISTRI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_EL_REGISTRI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[VAR_CODICE] [varchar](16) NULL,
	[VAR_DESC_REGISTRO] [varchar](128) NULL,
	[VAR_EMAIL_REGISTRO] [varchar](128) NULL,
	[VAR_USER_MAIL] [varchar](128) NULL,
	[VAR_PWD_MAIL] [varchar](32) NULL,
	[DTA_OPEN] [datetime] NULL,
	[DTA_CLOSE] [datetime] NULL,
	[NUM_RIF] [int] NULL,
	[CHA_STATO] [varchar](1) NULL,
	[VAR_SERVER_SMTP] [varchar](64) NULL,
	[NUM_PORTA_SMTP] [int] NULL,
	[DTA_ULTIMO_PROTO] [datetime] NULL,
	[VAR_SERVER_POP] [varchar](64) NULL,
	[NUM_PORTA_POP] [int] NULL,
	[CHA_AUTOMATICO] [char](1) NULL DEFAULT (0),
	[ID_RUOLO_AOO] [int] NULL,
	[ID_PEOPLE_AOO] [int] NULL,
	[VAR_USER_SMTP] [varchar](128) NULL,
	[VAR_PWD_SMTP] [varchar](128) NULL,
	[CHA_SMTP_SSL] [char](1) NULL,
	[CHA_POP_SSL] [char](1) NULL,
	[CHA_SMTP_STA] [char](1) NULL,
	[CHA_AUTO_INTEROP] [char](1) NULL,
	[CHA_RF] [char](1) NULL,
	[id_Aoo_Collegata] [int] NULL,
	[CHA_DISABILITATO] [char](1) NULL,
	[DIRITTO_RUOLO_AOO] [int] NULL,
	[id_ruolo_resp] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_REG_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_REG_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TITOLARIO] [int] NULL,
	[ID_REGISTRO] [int] NULL,
	[NUM_RIF] [int] NULL,
	[cha_automatico] [char](1) NOT NULL DEFAULT (0)
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FORMATTA_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FORMATTA_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_STRINGA] [varchar](16) NULL,
	[ID_AMM] [int] NULL,
	[CHA_VISUALIZZA] [varchar](1) NULL,
	[ID_PESO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Getchaimg]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE function [db_user].[Getchaimg](@docnum  int)
returns varchar(1)
as
begin
declare @risultato varchar(1)
declare @vpath varchar(128)
declare @vmaxidGenarica int
begin
set @vmaxidGenarica =0

SELECT @vmaxidGenarica =max(v1.version_id) from versions v1, components c where v1.docnumber=@docnum and v1.version_id=c.version_id
end

begin
set @vpath=0
select @vpath=path from components where docnumber=@docnum and version_id=@vmaxidGenarica
end


if (( @vpath <> '''' )OR  (@vpath is not null))
begin
set @risultato =''1''
end
else 
begin set  @risultato=''0''
end


return @risultato
end

' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FORMATTA_SEGN]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FORMATTA_SEGN](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_STRINGA] [varchar](16) NULL,
	[ID_AMM] [int] NULL,
	[CHA_VISUALIZZA] [varchar](1) NULL,
	[ID_PESO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TEMPLATES_COMPONENT_BK]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TEMPLATES_COMPONENT_BK](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TEMPLATE] [int] NULL,
	[Tipo_Atto] [varchar](255) NULL,
	[ID_AMM] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FUNZIONI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FUNZIONI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[COD_FUNZIONE] [varchar](32) NULL,
	[VAR_DESC_FUNZIONE] [varchar](256) NULL,
	[ID_PARENT] [int] NULL,
	[CHA_TIPO_FUNZ] [varchar](1) NULL,
	[ID_PESO] [int] NULL,
	[CHA_FLAG_PARENT] [varchar](1) NULL,
	[ID_TIPO_FUNZIONE] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_FUNZIONI]') AND name = N'indx_FUNZ1')
CREATE NONCLUSTERED INDEX [indx_FUNZ1] ON [db_user].[DPA_FUNZIONI] 
(
	[ID_TIPO_FUNZIONE] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TEMPLATES_BK]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TEMPLATES_BK](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Descrizione] [varchar](255) NULL,
	[Abilitato_SI_NO] [int] NULL,
	[In_Esercizio] [varchar](255) NULL,
	[Path_Mod_1] [varchar](255) NULL,
	[Ext_Mod_1] [char](10) NULL,
	[Path_Mod_2] [varchar](255) NULL,
	[Ext_Mod_2] [char](10) NULL,
	[ID_TIPO_ATTO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_L_AOO_UO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_L_AOO_UO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_UO] [int] NULL,
	[ID_REGISTRO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FIRMA_VERS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FIRMA_VERS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_FIRMATARIO] [int] NULL,
	[ID_VERSIONE] [int] NULL,
	[NUM_LIVELLO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FIRMATARI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FIRMATARI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_COGNOME] [varchar](50) NULL,
	[VAR_NOME] [varchar](50) NULL,
	[VAR_COD_FISCALE] [varchar](16) NULL,
	[VAR_TITOLARE] [varchar](250) NULL,
	[VAR_RUOLO] [varchar](250) NULL,
	[VAR_SERIE] [varchar](64) NULL,
	[VAR_EMITTENTE_C] [varchar](250) NULL,
	[VAR_EMITTENTE_O] [varchar](250) NULL,
	[VAR_EMITTENTE_OU] [varchar](250) NULL,
	[VAR_EMITTENTE_CN] [varchar](250) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LOCK]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LOCK](
	[NUM_STATO] [int] NULL,
	[VAR_SEMAFORO] [varchar](40) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FASCICOLAZIONE_CARTACEA]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FASCICOLAZIONE_CARTACEA](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[PROJECT_ID] [int] NOT NULL,
	[ID_DOCUMENT] [int] NOT NULL,
	[VERSION_ID] [int] NOT NULL,
	[DATA_ARCHIVIAZIONE] [datetime] NOT NULL,
 CONSTRAINT [PK_DPA_PROJECT_VERSIONS] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_FASCICOLAZIONE_CARTACEA]') AND name = N'IX_DPA_FASCICOLAZIONE_CARTACEA')
CREATE UNIQUE NONCLUSTERED INDEX [IX_DPA_FASCICOLAZIONE_CARTACEA] ON [db_user].[DPA_FASCICOLAZIONE_CARTACEA] 
(
	[PROJECT_ID] ASC,
	[VERSION_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_FASCICOLAZIONE_CARTACEA]') AND name = N'IX_DPA_PROJECT_VERSIONS_ID_DOCUMENT')
CREATE NONCLUSTERED INDEX [IX_DPA_PROJECT_VERSIONS_ID_DOCUMENT] ON [db_user].[DPA_FASCICOLAZIONE_CARTACEA] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_FASCICOLAZIONE_CARTACEA]') AND name = N'IX_DPA_PROJECT_VERSIONS_PROJECT_ID')
CREATE NONCLUSTERED INDEX [IX_DPA_PROJECT_VERSIONS_PROJECT_ID] ON [db_user].[DPA_FASCICOLAZIONE_CARTACEA] 
(
	[PROJECT_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_FASCICOLAZIONE_CARTACEA]') AND name = N'IX_DPA_PROJECT_VERSIONS_VERSION_ID')
CREATE NONCLUSTERED INDEX [IX_DPA_PROJECT_VERSIONS_VERSION_ID] ON [db_user].[DPA_FASCICOLAZIONE_CARTACEA] 
(
	[VERSION_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LOG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LOG](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[USERID_OPERATORE] [varchar](20) NULL,
	[ID_PEOPLE_OPERATORE] [int] NOT NULL,
	[ID_GRUPPO_OPERATORE] [int] NULL,
	[ID_AMM] [int] NULL,
	[DTA_AZIONE] [datetime] NOT NULL,
	[VAR_OGGETTO] [varchar](64) NOT NULL,
	[ID_OGGETTO] [int] NULL,
	[VAR_DESC_OGGETTO] [varchar](2000) NULL,
	[VAR_COD_AZIONE] [varchar](32) NOT NULL,
	[VAR_DESC_AZIONE] [nvarchar](2000) NOT NULL,
	[CHA_ESITO] [varchar](1) NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LOG_ATTIVATI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LOG_ATTIVATI](
	[SYSTEM_ID_ANAGRAFICA] [int] NOT NULL,
	[ID_AMM] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_VOCI_MENU_ADMIN]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_VOCI_MENU_ADMIN](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT FOR REPLICATION NOT NULL,
	[VAR_CODICE] [varchar](64) NOT NULL,
	[VAR_DESCRIZIONE] [varchar](64) NOT NULL,
	[VAR_VISIBILITA_MENU] [varchar](32) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LOGIN]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LOGIN](
	[USER_ID] [varchar](20) NULL,
	[ID_AMM] [int] NULL,
	[IP_ADDRESS] [varchar](20) NULL,
	[DTA_CONNESSIONE] [datetime] NULL,
	[DST] [varchar](4000) NULL,
	[SESSION_ID] [varchar](50) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_USERADMIN_VOCI_MENU]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_USERADMIN_VOCI_MENU](
	[ID_CORR_GLOBALE] [int] NOT NULL,
	[ID_VOCE_MENU] [int] NOT NULL,
	[ID_AMM] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_MAIL_ELABORATE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_MAIL_ELABORATE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_MESSAGE] [varchar](254) NULL,
	[CHA_RAGIONE_ELAB] [varchar](1) NULL,
	[DTA_ELAB] [datetime] NULL,
	[ID_PEOPLE] [int] NULL,
	[VAR_NOTE] [varchar](250) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_MAIL_ELABORATE]') AND name = N'indx_MAILELAB1')
CREATE NONCLUSTERED INDEX [indx_MAILELAB1] ON [db_user].[DPA_MAIL_ELABORATE] 
(
	[ID_PEOPLE] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_tipo_funzione_BK]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[dpa_tipo_funzione_BK](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_COD_TIPO] [varchar](32) NULL,
	[VAR_DESC_TIPO_FUN] [varchar](256) NULL,
	[CHA_VIS] [char](1) NULL,
	[ID_AMM] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_OGGETTARIO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_OGGETTARIO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_REGISTRO] [int] NULL,
	[ID_AMM] [int] NULL,
	[VAR_DESC_OGGETTO] [varchar](2000) NULL,
	[CHA_OCCASIONALE] [varchar](1) NULL,
	[VAR_COD_OGGETTO] [varchar](50) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_OGGETTARIO]') AND name = N'indx_OGG1')
CREATE NONCLUSTERED INDEX [indx_OGG1] ON [db_user].[DPA_OGGETTARIO] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_OGGETTARIO]') AND name = N'indx_OGG2')
CREATE NONCLUSTERED INDEX [indx_OGG2] ON [db_user].[DPA_OGGETTARIO] 
(
	[CHA_OCCASIONALE] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_funzioni_BK]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[dpa_funzioni_BK](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[COD_FUNZIONE] [varchar](32) NULL,
	[VAR_DESC_FUNZIONE] [varchar](256) NULL,
	[ID_PARENT] [int] NULL,
	[CHA_TIPO_FUNZ] [varchar](1) NULL,
	[ID_PESO] [int] NULL,
	[CHA_FLAG_PARENT] [varchar](1) NULL,
	[ID_TIPO_FUNZIONE] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_OGGETTI_STO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_OGGETTI_STO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[DTA_MODIFICA] [datetime] NULL,
	[ID_PROFILE] [int] NULL,
	[ID_OGGETTO] [int] NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_RUOLO_IN_UO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_tipo_f_ruolo_BK]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[dpa_tipo_f_ruolo_BK](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TIPO_FUNZ] [int] NOT NULL,
	[ID_RUOLO_IN_UO] [int] NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_PAROLE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_PAROLE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[VAR_DESC_PAROLA] [varchar](128) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_PAROLE]') AND name = N'indx_PAROLE1')
CREATE NONCLUSTERED INDEX [indx_PAROLE1] ON [db_user].[DPA_PAROLE] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_FORMATI_DOCUMENTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_FORMATI_DOCUMENTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMMINISTRAZIONE] [int] NULL,
	[FILE_TYPE_USED] [int] NOT NULL,
	[DESCRIPTION] [nvarchar](255) NOT NULL,
	[FILE_EXTENSION] [nvarchar](10) NOT NULL,
	[MAX_FILE_SIZE] [int] NOT NULL CONSTRAINT [DF_DPA_SUPPORTED_FILES_MAX_FILE_SIZE]  DEFAULT (0),
	[MAX_FILE_SIZE_ALERT_MODE] [int] NOT NULL CONSTRAINT [DF_DPA_SUPPORTED_FILES_MAX_FILE_SIZE_ALERT_MODE]  DEFAULT (2),
	[CONTAINS_FILE_MODEL] [int] NOT NULL CONSTRAINT [DF_DPA_SUPPORTED_FILES_CONTAINS_FILE_MODEL]  DEFAULT (0),
	[DOCUMENT_TYPE] [int] NOT NULL CONSTRAINT [DF_DPA_SUPPORTED_FILES_DOCUMENT_TYPE]  DEFAULT (0),
 CONSTRAINT [PK_DPA_FORMATI_DOCUMENTO] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_PROF_PAROLE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_PROF_PAROLE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_PROFILE] [int] NULL,
	[ID_PAROLA] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_RAGIONE_TRASM]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_RAGIONE_TRASM](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_DESC_RAGIONE] [varchar](32) NULL,
	[CHA_TIPO_RAGIONE] [varchar](1) NULL,
	[CHA_VIS] [varchar](1) NULL,
	[CHA_TIPO_DIRITTI] [varchar](1) NULL,
	[CHA_TIPO_DEST] [varchar](1) NULL,
	[CHA_RISPOSTA] [varchar](1) NULL,
	[VAR_NOTE] [varchar](250) NULL,
	[CHA_EREDITA] [varchar](1) NULL,
	[ID_AMM] [int] NULL,
	[CHA_TIPO_RISPOSTA] [varchar](1) NULL,
	[VAR_NOTIFICA_TRASM] [varchar](2) NULL,
	[VAR_TESTO_MSG_NOTIFICA_DOC] [varchar](1024) NULL,
	[VAR_TESTO_MSG_NOTIFICA_FASC] [varchar](1024) NULL,
	[CHA_CEDE_DIRITTI] [varchar](1) NULL,
	[CHA_RAG_SISTEMA] [char](1) NULL CONSTRAINT [DF_DPA_RAGIONE_TRASM_CHA_RAG_SISTEMA]  DEFAULT (0)
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_REG_PROTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_REG_PROTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[NUM_RIF] [int] NULL,
	[ID_REGISTRO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_REGISTRO_STO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_REGISTRO_STO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[DTA_OPEN] [datetime] NULL,
	[DTA_CLOSE] [datetime] NULL,
	[NUM_RIF] [int] NULL,
	[ID_REGISTRO] [int] NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_RUOLO_IN_UO] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_RUOE_UTENTE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_RUOE_UTENTE](
	[ID_RUOE] [int] NULL,
	[ID_UTENTE_EST] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_STAMPAREGISTRI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_STAMPAREGISTRI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_REGISTRO] [int] NULL,
	[NUM_PROTO_START] [int] NULL,
	[NUM_PROTO_END] [int] NULL,
	[NUM_ANNO] [int] NULL,
	[NUM_ORD_FILE] [int] NULL,
	[NUM_PAGINA_END] [int] NULL,
	[DOCNUMBER] [int] NULL,
	[DTA_STAMPA] [datetime] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_STAMPAREGISTRI]') AND name = N'indx_STAMPA1')
CREATE NONCLUSTERED INDEX [indx_STAMPA1] ON [db_user].[DPA_STAMPAREGISTRI] 
(
	[DOCNUMBER] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_STATO_INVIO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_STATO_INVIO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_CORR_GLOBALE] [int] NULL,
	[ID_PROFILE] [int] NULL,
	[ID_DOC_ARRIVO_PAR] [int] NULL,
	[ID_CANALE] [int] NULL,
	[DTA_SPEDIZIONE] [datetime] NULL,
	[VAR_INDIRIZZO] [varchar](128) NULL,
	[VAR_CAP] [varchar](5) NULL,
	[VAR_CITTA] [varchar](64) NULL,
	[CHA_INTEROP] [varchar](1) NULL,
	[VAR_PROVINCIA] [varchar](2) NULL,
	[ID_DOCUMENTTYPE] [int] NULL,
	[VAR_SERVER_SMTP] [varchar](64) NULL,
	[NUM_PORTA_SMTP] [int] NULL,
	[VAR_CODICE_AOO] [varchar](16) NULL,
	[VAR_CODICE_AMM] [varchar](64) NULL,
	[VAR_PROTO_DEST] [varchar](128) NULL,
	[DTA_PROTO_DEST] [datetime] NULL,
	[VAR_MOTIVO_ANNULLA] [varchar](256) NULL,
	[CHA_ANNULLATO] [varchar](1) NULL,
	[VAR_PROVVEDIMENTO] [varchar](256) NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_T_CANALE_CORR]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_T_CANALE_CORR](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_CORR_GLOBALE] [int] NULL,
	[ID_DOCUMENTTYPE] [int] NULL,
	[CHA_PREFERITO] [varchar](1) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_T_CANALE_CORR]') AND name = N'indx_CANALECORR1')
CREATE NONCLUSTERED INDEX [indx_CANALECORR1] ON [db_user].[DPA_T_CANALE_CORR] 
(
	[ID_CORR_GLOBALE] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_SUPPORTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_SUPPORTO](
	[SYSTEM_ID] [int] NOT NULL,
	[VAR_TIPO] [varchar](32) NULL,
	[CAPACITA] [float] NULL,
	[PERIODO_VERIFICA] [int] NULL,
	[VAR_DESCRIZIONE] [varchar](128) NULL,
 CONSTRAINT [DPA_TIPO_SUPPORTO_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TEMPL_TRASM]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TEMPL_TRASM](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_TEMPLATE] [varchar](256) NOT NULL,
	[ID_TRASMISSIONE] [int] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_ATTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_ATTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_DESC_ATTO] [varchar](64) NULL,
	[ID_AMM] [int] NULL,
	[Abilitato_SI_NO] [int] NULL,
	[In_Esercizio] [varchar](255) NULL,
	[Path_Mod_1] [varchar](255) NULL,
	[Ext_Mod_1] [char](10) NULL,
	[Path_Mod_2] [varchar](255) NULL,
	[Ext_mod_2] [char](10) NULL,
	[GG_SCADENZA] [int] NULL,
	[GG_PRE_SCADENZA] [int] NULL,
	[CHA_PRIVATO] [varchar](1) NULL,
	[IPERFASCICOLO] [int] NULL,
	[PATH_ALL_1] [varchar](255) NULL,
	[EXT_ALL_1] [varchar](10) NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_SUPPORTO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_SUPPORTO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[COPIA] [int] NULL,
	[DATA_PRODUZIONE] [datetime] NULL,
	[VAR_COLLOCAZIONE_FISICA] [varchar](250) NULL,
	[DATA_ULTIMA_VERIFICA] [datetime] NULL,
	[DATA_ELIMINAZIONE] [datetime] NULL,
	[ESITO_ULTIMA_VERIFICA] [int] NULL,
	[VERIFICHE_EFFETTUATE] [int] NULL,
	[DATA_PROX_VERIFICA] [datetime] NULL,
	[DATA_APPO_MARCA] [datetime] NULL,
	[DATA_SCADENZA_MARCA] [datetime] NULL,
	[VAR_MARCA_TEMPORALE] [varchar](3000) NULL,
	[ID_CONSERVAZIONE] [int] NULL,
	[ID_TIPO_SUPPORTO] [int] NULL,
	[CHA_STATO] [char](1) NULL,
	[VAR_NOTE] [varchar](500) NULL,
 CONSTRAINT [DPA_SUPPORTO_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_F_RUOLO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_F_RUOLO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TIPO_FUNZ] [int] NOT NULL,
	[ID_RUOLO_IN_UO] [int] NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_F_RUOLO]') AND name = N'indx_TIPOFUNRUOLO1')
CREATE NONCLUSTERED INDEX [indx_TIPOFUNRUOLO1] ON [db_user].[DPA_TIPO_F_RUOLO] 
(
	[ID_RUOLO_IN_UO] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_F_RUOLO]') AND name = N'indx_TIPOFUNRUOLO2')
CREATE NONCLUSTERED INDEX [indx_TIPOFUNRUOLO2] ON [db_user].[DPA_TIPO_F_RUOLO] 
(
	[ID_TIPO_FUNZ] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_FUNZIONE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_FUNZIONE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_COD_TIPO] [varchar](32) NULL,
	[VAR_DESC_TIPO_FUN] [varchar](256) NULL,
	[CHA_VIS] [char](1) NULL,
	[ID_AMM] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_FUNZIONE]') AND name = N'INDX_TIPOFRUO1')
CREATE UNIQUE NONCLUSTERED INDEX [INDX_TIPOFRUO1] ON [db_user].[DPA_TIPO_FUNZIONE] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_L_RUOLO_REG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_L_RUOLO_REG](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_REGISTRO] [int] NOT NULL,
	[ID_RUOLO_IN_UO] [int] NOT NULL,
	[CHA_PREFERITO] [varchar](1) NULL,
	[CHA_RIFERIMENTO] [varchar](1) NULL,
	[DTA_INIZIO] [datetime] NULL,
	[DTA_FINE] [datetime] NULL,
	[DTA_ASS_VISIBILITA] [datetime] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_L_RUOLO_REG]') AND name = N'indx_RUOLOREG1')
CREATE NONCLUSTERED INDEX [indx_RUOLOREG1] ON [db_user].[DPA_L_RUOLO_REG] 
(
	[ID_RUOLO_IN_UO] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LEGISLATURE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LEGISLATURE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_COD_LEG] [varchar](64) NULL,
	[VAR_DESC_LEG] [varchar](256) NULL,
	[DTA_INIZIO] [datetime] NULL,
	[DTA_FINE] [datetime] NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_RUOLO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TIPO_RUOLO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[ID_PARENT] [int] NULL,
	[VAR_CODICE] [varchar](16) NULL,
	[NUM_LIVELLO] [int] NULL,
	[VAR_DESC_RUOLO] [varchar](64) NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TIPO_RUOLO]') AND name = N'indx_TIPORUO1')
CREATE NONCLUSTERED INDEX [indx_TIPORUO1] ON [db_user].[DPA_TIPO_RUOLO] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_SINGOLA]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_TRASM_SINGOLA](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_RAGIONE] [int] NULL,
	[ID_TRASMISSIONE] [int] NULL,
	[CHA_TIPO_DEST] [varchar](1) NULL,
	[ID_CORR_GLOBALE] [int] NULL,
	[VAR_NOTE_SING] [varchar](250) NULL,
	[CHA_TIPO_TRASM] [varchar](1) NULL,
	[DTA_SCADENZA] [datetime] NULL,
	[ID_TRASM_UTENTE] [int] NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_SINGOLA]') AND name = N'indx_TRASMSING1')
CREATE NONCLUSTERED INDEX [indx_TRASMSING1] ON [db_user].[DPA_TRASM_SINGOLA] 
(
	[ID_TRASMISSIONE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_SINGOLA]') AND name = N'indx_TRASMSING2')
CREATE NONCLUSTERED INDEX [indx_TRASMSING2] ON [db_user].[DPA_TRASM_SINGOLA] 
(
	[ID_CORR_GLOBALE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_SINGOLA]') AND name = N'indx_TRASMSING3')
CREATE NONCLUSTERED INDEX [indx_TRASMSING3] ON [db_user].[DPA_TRASM_SINGOLA] 
(
	[ID_RAGIONE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_SINGOLA]') AND name = N'indx_TRASMSING4')
CREATE NONCLUSTERED INDEX [indx_TRASMSING4] ON [db_user].[DPA_TRASM_SINGOLA] 
(
	[ID_TRASM_UTENTE] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_TRASM_SINGOLA]') AND name = N'indx_TRASMSING5')
CREATE NONCLUSTERED INDEX [indx_TRASMSING5] ON [db_user].[DPA_TRASM_SINGOLA] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LOG_STORICO]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LOG_STORICO](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[USERID_OPERATORE] [varchar](20) NULL,
	[ID_PEOPLE_OPERATORE] [int] NOT NULL,
	[ID_GRUPPO_OPERATORE] [int] NULL,
	[ID_AMM] [int] NULL,
	[DTA_AZIONE] [datetime] NOT NULL,
	[VAR_OGGETTO] [varchar](64) NOT NULL,
	[ID_OGGETTO] [int] NULL,
	[VAR_DESC_OGGETTO] [varchar](2000) NULL,
	[VAR_COD_AZIONE] [varchar](32) NOT NULL,
	[VAR_DESC_AZIONE] [nvarchar](2000) NOT NULL,
	[CHA_ESITO] [varchar](1) NOT NULL
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LDAP_SYNC_HISTORY]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LDAP_SYNC_HISTORY](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NOT NULL,
	[USER_ID] [nvarchar](50) NOT NULL,
	[SYNC_DATE] [datetime] NOT NULL,
	[ITEMS_SYNCRONIZED] [int] NOT NULL,
	[ERROR_DETAILS] [nvarchar](2000) NULL,
 CONSTRAINT [PK_DPA_LDAP_SYNC_HISTORY] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_LDAP_CONFIG]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_LDAP_CONFIG](
	[ID_AMM] [int] NOT NULL,
	[SERVER_NAME] [nvarchar](255) NOT NULL,
	[GROUP_DN] [nvarchar](255) NOT NULL,
	[USER_NAME] [nvarchar](255) NULL,
	[PASSWORD] [nvarchar](255) NULL,
	[USERID_ATTRIBUTE] [nvarchar](50) NOT NULL,
	[EMAIL_ATTRIBUTE] [nvarchar](255) NOT NULL,
	[MATRICOLA_ATTRIBUTE] [nvarchar](50) NOT NULL,
	[NOME_ATTRIBUTE] [nvarchar](50) NOT NULL,
	[COGNOME_ATTRIBUTE] [nvarchar](50) NOT NULL,
	[SEDE_ATTRIBUTE] [nvarchar](255) NOT NULL
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[DPA_LDAP_CONFIG]') AND name = N'IX_DPA_LDAP_CONFIG_ID_AMM')
CREATE UNIQUE NONCLUSTERED INDEX [IX_DPA_LDAP_CONFIG_ID_AMM] ON [db_user].[DPA_LDAP_CONFIG] 
(
	[ID_AMM] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[PEOPLE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[PEOPLE](
	[SYSTEM_ID] [int] IDENTITY(1,2) NOT NULL,
	[USER_ID] [varchar](32) NOT NULL,
	[FULL_NAME] [varchar](64) NULL,
	[DISABLED] [varchar](1) NULL,
	[USER_PASSWORD] [varchar](30) NULL,
	[USER_LOCATION] [varchar](60) NULL,
	[PHONE] [varchar](40) NULL,
	[EXTENSION] [varchar](10) NULL,
	[LAST_LOGIN_DATE] [datetime] NULL,
	[LAST_LOGIN_TIME] [datetime] NULL,
	[ALLOW_LOGIN] [varchar](1) NULL,
	[FAX] [varchar](40) NULL,
	[DID] [varchar](10) NULL,
	[TARGET_DOCSRVR] [int] NULL,
	[PRIMARY_GROUP] [int] NULL,
	[PRIMARY_LIB] [int] NULL,
	[PROFILE_DEFAULTS] [text] NULL,
	[CONNECT_BRIDGED] [varchar](1) NULL,
	[BUTTON_BAR] [varchar](254) NULL,
	[NETWORK_ID] [varchar](254) NULL,
	[ACL_DEFAULTS] [varchar](254) NULL,
	[SHOW_RESTORED] [varchar](1) NULL,
	[PASS_EXP_DATE] [datetime] NULL,
	[LOGINS_REMAINING] [int] NULL,
	[PSWORD_VALID_FOR] [int] NULL,
	[NO_EXP_DATE] [varchar](1) NULL,
	[DR_USER] [varchar](1) NULL,
	[SEARCH_FORM_ID] [int] NULL,
	[EMAIL_ADDRESS] [varchar](128) NULL,
	[LAST_UPDATE] [datetime] NULL,
	[CHA_AMMINISTRATORE] [varchar](1) NULL,
	[CHA_NOTIFICA] [varchar](1) NULL,
	[VAR_TELEFONO] [varchar](16) NULL,
	[ID_AMM] [int] NULL,
	[CHA_RESP_ASS] [varchar](1) NULL,
	[CHA_ASSEGNATARIO] [varchar](1) NULL,
	[VAR_COGNOME] [varchar](100) NULL,
	[VAR_NOME] [varchar](100) NULL,
	[CHA_NOTIFICA_CON_ALLEGATO] [varchar](1) NULL,
	[VAR_SEDE] [varchar](64) NULL,
	[ENCRYPTED_PASSWORD] [nvarchar](255) NULL,
	[PASSWORD_CREATION_DATE] [datetime] NULL,
	[PASSWORD_NEVER_EXPIRE] [smallint] NULL,
	[FROM_EMAIL_ADDRESS] [varchar](128) NULL,
	[LDAP_NEVER_SYNC] [char](10) NULL,
	[LDAP_ID_SYNC] [varchar](50) NULL,
	[ID_CLIENT_MODEL_PROCESSOR] [int] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PEOPLE]') AND name = N'indx_PEOPLE1')
CREATE UNIQUE NONCLUSTERED INDEX [indx_PEOPLE1] ON [db_user].[PEOPLE] 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
GO

IF NOT EXISTS (SELECT * FROM dbo.sysindexes WHERE id = OBJECT_ID(N'[db_user].[PEOPLE]') AND name = N'indx_PEOPLE2')
CREATE NONCLUSTERED INDEX [indx_PEOPLE2] ON [db_user].[PEOPLE] 
(
	[USER_ID] ASC
) ON [PRIMARY]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_AMMINISTRA]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_AMMINISTRA](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[VAR_CODICE_AMM] [varchar](16) NULL,
	[VAR_CODICE_ISTAT] [varchar](16) NULL,
	[VAR_DESC_AMM] [varchar](128) NULL,
	[VAR_LIBRERIA] [varchar](32) NULL,
	[CHA_SEPARATORE] [varchar](1) NULL,
	[CHA_STR_FISSA] [varchar](1) NULL,
	[CHA_STR_SEGNATURA] [varchar](1) NULL,
	[VAR_SMTP] [varchar](128) NULL,
	[NUM_PORTA_SMTP] [int] NULL,
	[VAR_LOGIN] [varchar](128) NULL,
	[VAR_PATH] [varchar](128) NULL,
	[VAR_FORMATO_SEGNATURA] [varchar](255) NULL,
	[VAR_FORMATO_FASCICOLATURA] [varchar](255) NULL,
	[VAR_DOMINIO] [varchar](255) NULL,
	[CHA_PROTOINT] [char](1) NULL,
	[ID_RAGIONE_TO] [int] NULL,
	[ID_RAGIONE_CC] [int] NULL,
	[VAR_USER_SMTP] [varchar](128) NULL,
	[VAR_PWD_SMTP] [varchar](128) NULL,
	[VAR_RAGIONE_REFERENTE] [varchar](32) NULL,
	[ID_RAGIONE_REFERENTE] [int] NULL,
	[NUM_GG_PERM_TODOLIST] [int] NULL,
	[CHA_ATTIVA_GG_PERM_TODOLIST] [char](1) NULL,
	[CHA_SMTP_SSL] [char](1) NULL,
	[CHA_SMTP_STA] [char](1) NULL,
	[ENABLE_PASSWORD_EXPIRATION] [smallint] NULL,
	[PASSWORD_EXPIRATION_DAYS] [int] NULL,
	[PASSWORD_MIN_LENGTH] [int] NULL,
	[PASSWORD_SPECIAL_CHAR_LIST] [nvarchar](50) NULL,
	[FROM_EMAIL_ADDRESS] [varchar](128) NULL,
	[ID_RAGIONE_CONOSCENZA] [int] NULL,
	[ID_RAGIONE_COMPETENZA] [int] NULL,
	[NUM_RECORD] [int] NULL,
	[CHA_ARCHIVIAZIONE_LOG] [char](1) NULL,
	[FONTCOLOR] [varchar](12) NULL,
	[VAR_FORMATO_DOMINIO] [varchar](255) NULL,
	[VAR_FORMATO_TIMBRO] [varchar](1024) NULL,
	[ID_CARAT_DF] [int] NULL,
	[ID_COLORE_DF] [int] NULL,
	[ID_POS_DF] [int] NULL,
	[ORIENTAMENTO] [varchar](30) NULL,
	[TIPO_ROTAZ] [varchar](30) NULL,
	[ID_CLIENT_MODEL_PROCESSOR] [int] NULL,
 CONSTRAINT [PK_DPA_AMMINISTRA] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_AREA_CONSERVAZIONE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_AREA_CONSERVAZIONE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_AMM] [int] NULL,
	[ID_PEOPLE] [int] NULL,
	[ID_RUOLO_IN_UO] [int] NULL,
	[CHA_STATO] [char](1) NULL,
	[VAR_TIPO_SUPPORTO] [int] NULL,
	[VAR_NOTE] [varchar](500) NULL,
	[VAR_DESCRIZIONE] [varchar](250) NULL,
	[DATA_APERTURA] [datetime] NULL,
	[DATA_INVIO] [datetime] NULL,
	[DATA_CONSERVAZIONE] [datetime] NULL,
	[VAR_MARCA_TEMPORALE] [varchar](3000) NULL,
	[VAR_FIRMA_RESPONSABILE] [varchar](1024) NULL,
	[VAR_LOCAZIONE_FISICA] [varchar](512) NULL,
	[DATA_PROX_VERIFICA] [datetime] NULL,
	[DATA_ULTIMA_VERIFICA] [datetime] NULL,
	[DATA_RIVERSAMENTO] [datetime] NULL,
	[VAR_TIPO_CONS] [varchar](32) NULL,
	[COPIE_SUPPORTI] [int] NULL,
	[VAR_NOTE_RIFIUTO] [varchar](256) NULL,
	[VAR_FORMATO_DOC] [varchar](10) NULL,
	[USER_ID] [varchar](32) NULL,
	[ID_GRUPPO] [int] NULL,
	[ID_PROFILE_TRASMISSIONE] [int] NULL,
 CONSTRAINT [INDX_AREA_CONS_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_VIS_TIPO_DOC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_VIS_TIPO_DOC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TIPO_DOC] [int] NULL,
	[ID_RUOLO] [int] NULL,
	[DIRITTI] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ITEMS_CONSERVAZIONE]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ITEMS_CONSERVAZIONE](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_CONSERVAZIONE] [int] NULL,
	[ID_PROFILE] [int] NULL,
	[ID_PROJECT] [int] NULL,
	[CHA_TIPO_DOC] [char](1) NULL,
	[VAR_OGGETTO] [varchar](64) NULL,
	[ID_REGISTRO] [int] NULL,
	[DATA_INS] [datetime] NULL,
	[CHA_STATO] [char](1) NULL,
	[VAR_XML_METADATI] [varchar](1024) NULL,
	[SIZE_ITEM] [int] NULL,
	[COD_FASC] [varchar](64) NULL,
	[DOCNUMBER] [int] NULL,
	[VAR_TIPO_FILE] [varchar](32) NULL,
	[NUMERO_ALLEGATI] [int] NULL,
	[CHA_TIPO_OGGETTO] [char](1) NULL,
 CONSTRAINT [INDX_ITEMS_CONS_PK] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_OGGETTI_CUSTOM]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_OGGETTI_CUSTOM](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Descrizione] [varchar](255) NULL,
	[Orizzontale_Verticale] [varchar](255) NULL,
	[Campo_Obbligatorio] [varchar](255) NULL,
	[Multilinea] [varchar](255) NULL,
	[Numero_Di_Linee] [varchar](255) NULL,
	[Numero_Di_Caratteri] [varchar](255) NULL,
	[Campo_Di_Ricerca] [varchar](255) NULL,
	[ID_TIPO_OGGETTO] [int] NULL,
	[RESET_ANNO] [varchar](50) NULL,
	[FORMATO_CONTATORE] [varchar](100) NULL,
	[ID_R_DEFAULT] [varchar](50) NULL,
	[RICERCA_CORR] [varchar](50) NULL,
	[CHA_TIPO_TAR] [varchar](2) NULL,
	[CONTA_DOPO] [int] NULL,
	[REPERTORIO] [int] NULL,
	[CAMPO_COMUNE] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ASSOCIAZIONE_VALORI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ASSOCIAZIONE_VALORI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Descrizione_Valore] [varchar](255) NULL,
	[Valore] [varchar](255) NULL,
	[Valore_Di_Default] [varchar](255) NULL,
	[ID_OGGETTO_CUSTOM] [int] NULL,
	[ABILITATO] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_OGG_CUSTOM_COMP]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_OGG_CUSTOM_COMP](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TEMPLATE] [int] NULL,
	[ID_OGG_CUSTOM] [int] NULL,
	[POSIZIONE] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_VIS_TIPO_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_VIS_TIPO_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TIPO_FASC] [int] NULL,
	[ID_RUOLO] [int] NULL,
	[DIRITTI] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ASS_TEMPLATES_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ASS_TEMPLATES_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_OGGETTO] [int] NULL,
	[ID_TEMPLATE] [int] NULL,
	[Id_Project] [varchar](255) NULL,
	[Valore_Oggetto_Db] [varchar](255) NULL,
	[Anno] [int] NULL,
	[ID_AOO_RF] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_OGGETTI_CUSTOM_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_OGGETTI_CUSTOM_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Descrizione] [varchar](255) NULL,
	[Orizzontale_Verticale] [varchar](255) NULL,
	[Campo_Obbligatorio] [varchar](255) NULL,
	[Multilinea] [varchar](255) NULL,
	[Numero_Di_Linee] [varchar](255) NULL,
	[Numero_Di_Caratteri] [varchar](255) NULL,
	[Campo_Di_Ricerca] [varchar](255) NULL,
	[ID_TIPO_OGGETTO] [int] NULL,
	[RESET_ANNO] [varchar](100) NULL,
	[FORMATO_CONTATORE] [varchar](100) NULL,
	[ID_R_DEFAULT] [varchar](50) NULL,
	[RICERCA_CORR] [varchar](50) NULL,
	[CHA_TIPO_TAR] [varchar](2) NULL,
	[CONTA_DOPO] [int] NULL,
	[REPERTORIO] [int] NULL,
	[CAMPO_COMUNE] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ASS_VALORI_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ASS_VALORI_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[Descrizione_Valore] [varchar](255) NULL,
	[Valore] [varchar](255) NULL,
	[Valore_Di_Default] [varchar](255) NULL,
	[ID_OGGETTO_CUSTOM] [int] NULL,
	[ABILITATO] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_OGG_CUSTOM_COMP_FASC]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_OGG_CUSTOM_COMP_FASC](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_TEMPLATE] [int] NULL,
	[ID_OGG_CUSTOM] [int] NULL,
	[POSIZIONE] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_PASSI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_PASSI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_STATO] [int] NULL,
	[Id_next_stato] [int] NULL,
	[Id_diagramma] [int] NULL,
	[ID_STATO_AUTO] [int] NULL,
	[DESC_STATO_AUTO] [varchar](255) NULL,
 CONSTRAINT [PK__DPA_PASSI] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_STATI]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_STATI](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_DIAGRAMMA] [int] NULL,
	[Var_descrizione] [varchar](255) NULL,
	[Stato_iniziale] [int] NULL,
	[Stato_finale] [int] NULL,
	[CONV_PDF] [int] NULL,
 CONSTRAINT [PK__DPA_STATI] PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[DPA_ASS_INDX_SIS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [dbo].[DPA_ASS_INDX_SIS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_PROJECT] [int] NULL,
	[ID_INDICE_SIS] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ASS_INDX_SIS]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
CREATE TABLE [db_user].[DPA_ASS_INDX_SIS](
	[SYSTEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[ID_PROJECT] [int] NULL,
	[ID_INDICE_SIS] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[SYSTEM_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_RIMUOVI_DOCUMENTI]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[SP_RIMUOVI_DOCUMENTI]
@idProfile INT

AS

BEGIN

DECLARE @retValue INT
SET @retValue = 1

DELETE FROM DPA_TRASM_UTENTE WHERE id_trasm_singola in
(SELECT system_id FROM DPA_TRASM_SINGOLA WHERE id_trasmissione in
(select	t.system_id  from dpa_trasmissione t where	t.id_profile =@idProfile))

DELETE FROM DPA_TRASM_SINGOLA WHERE id_trasmissione in
(select	t.system_id  from dpa_trasmissione t where	t.id_profile =@idProfile)

DELETE FROM DPA_TRASMISSIONE WHERE id_profile=@idProfile

DELETE FROM project_components where LINK =@idProfile
DELETE FROM VERSIONS WHERE DOCNUMBER = @idProfile
DELETE FROM COMPONENTS WHERE DOCNUMBER = @idProfile
DELETE FROM DPA_AREA_LAVORO WHERE ID_PROFILE = @idProfile
DELETE FROM DPA_PROF_PAROLE WHERE ID_PROFILE = @idProfile
DELETE FROM PROFILE WHERE DOCNUMBER = @idProfile
DELETE FROM SECURITY WHERE THING = @idProfile
delete from dpa_todolist where id_profile = @idProfile

DELETE FROM DPA_ASSOCIAZIONE_TEMPLATES WHERE DOC_NUMBER = @idProfile

RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_ANNUALE_DOC_X_UO]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [db_user].[REPORT_ANNUALE_DOC_X_UO]
--parametri di input
@anno int,
@id_registro int,
@id_amm int

AS
--tabella temporanea
CREATE TABLE [db_user].[#REPORT_ANNUALE_X_UO]
(
[UO] [varchar] (250),
[TOT_PROT] [varchar] (250),
[ARRIVO] [varchar] (250),
[PERC_ARRIVO] [varchar] (250),
[PARTENZA] [varchar] (250),
[PERC_PARTENZA] [varchar] (250),
[INTERNI] [varchar] (250),
[PERC_INTERNI] [varchar] (250),
[ANNULL] [varchar] (250),
[PERC_ANNULL] [varchar] (250),
[PROFILI] [varchar] (250),
[PERC_PROFILI] [varchar] (250),
[CLASSIFICATI] [varchar] (250),
[PERC_CLASSIFICATI] [varchar] (250),
) ON [PRIMARY]
-- VARIABILI TEMPORANEE
DECLARE @ProtA FLOAT
DECLARE @ProtP FLOAT
DECLARE @ProtI FLOAT
DECLARE @ProtAndAnn FLOAT
DECLARE @ProtNotImg FLOAT
DECLARE @ProtAndClass FLOAT
DECLARE @PercProtA float
DECLARE @PercProtP float
DECLARE @PercProtI float
DECLARE @PercProtAndAnn float
DECLARE @PercProtNotImg float
DECLARE @PercProtAndClass float
--variabili temporanee totali
DECLARE @TOTPROT FLOAT
DECLARE @TOTPROTA FLOAT
DECLARE @TOTPROTP FLOAT
DECLARE @TOTPROTI FLOAT
DECLARE @TOTPROTANN FLOAT
DECLARE @TOTPROTPROF FLOAT
DECLARE @TOTPROTCLASS FLOAT
DECLARE @PERCTOTPROTA FLOAT
DECLARE @PERCTOTPROTP FLOAT
DECLARE @PERCTOTPROTI FLOAT
DECLARE @PERCTOTPROTANN FLOAT
DECLARE @PERCTOTPROTPROF FLOAT
DECLARE @PERCTOTPROTCLASS FLOAT
-- SET VARIABILI TEMPORANEE TOTALI
SET @TOTPROT = 0
SET @TOTPROTA = 0
SET @TOTPROTP = 0
SET @TOTPROTI = 0
SET @TOTPROTANN = 0
SET @TOTPROTPROF = 0
SET @TOTPROTCLASS = 0
SET @PERCTOTPROTA = 0
SET @PERCTOTPROTP = 0
SET @PERCTOTPROTI = 0
SET @PERCTOTPROTANN = 0
SET @PERCTOTPROTPROF = 0
SET @PERCTOTPROTCLASS = 0


--VARIABILI CURSORE
DECLARE @TOT_PROT_UO FLOAT
DECLARE @ID_UO FLOAT
DECLARE @VAR_UO VARCHAR (250)
-- definizione cursore
DECLARE C_UO CURSOR LOCAL FOR
select count(*) as TotProtUO,
dpa_corr_globali.system_id,dpa_corr_globali.var_desc_corr
from
profile,dpa_corr_globali
where
profile.id_registro = @id_registro
and
dpa_corr_globali.id_amm = @id_amm
and
profile.num_anno_proto = @anno
and
profile.id_uo_prot = dpa_corr_globali.system_id
and profile.cha_da_proto = ''0''
group by dpa_corr_globali.var_desc_corr,dpa_corr_globali.system_id
OPEN C_UO
FETCH NEXT FROM C_UO into @TOT_PROT_UO,@ID_UO,@VAR_UO
while(@@fetch_status=0) --( 1 CICLO )
BEGIN -- PER OGNI UO APPARTENENTE AL REGISTRO ED ALL AMMINISTAZIONE DEI PARAM DI INPUT
--setting variabili temporanee
set @protA = 0
set @ProtP = 0
set @ProtI = 0
set @ProtAndAnn = 0
set @ProtNotImg = 0
set @ProtAndClass = 0
set @PercProtA = 0
set @PercProtP = 0
set @PercProtI = 0
set @PercProtAndAnn = 0
set @PercProtNotImg = 0
set @PercProtAndClass = 0
--conta PROTO A per singola uo
select @ProtA = count(profile.system_id)
from profile
where profile.cha_da_proto = ''0''
and profile.id_registro = @id_registro
and profile.num_anno_proto = @anno
AND profile.cha_tipo_proto = ''A''
and profile.id_uo_prot = @ID_UO
and profile.dta_annulla is null
--conta PROTO P per singola uo
select @ProtP = count(profile.system_id)
from profile
where profile.cha_da_proto = ''0''
and profile.id_registro = @id_registro
and profile.num_anno_proto = @anno
AND profile.cha_tipo_proto = ''P''
and profile.id_uo_prot = @ID_UO
and profile.dta_annulla is null
--conta PROTO I per singola uo
select @ProtI = count(profile.system_id)
from profile
where profile.cha_da_proto = ''0''
and profile.id_registro = @id_registro
and profile.num_anno_proto = @anno
AND profile.cha_tipo_proto = ''I''
and profile.id_uo_prot = @ID_UO
and profile.dta_annulla is null
--conta i DOC Protocollati ed annullati per singola uo
select @ProtAndAnn = count(profile.system_id)
from profile
where profile.cha_da_proto = ''0''
and profile.id_registro = @id_registro
and profile.num_anno_proto = @anno
AND profile.num_proto is not null
and profile.dta_annulla is not null
and profile.id_uo_prot = @ID_UO
--conta I DOC protocollati SENZA IMG per singola uo
select @ProtNotImg = count(profile.system_id)
from profile
where profile.cha_img = ''0''
and profile.cha_da_proto = ''0''
and profile.id_registro = @id_registro
and profile.num_anno_proto = @anno
--and profile.dta_annulla is null
and profile.id_uo_prot = @ID_UO
--conta I DOC protocollati e classificati per singola uo
select @ProtAndClass = count(profile.system_id)
from profile
where
docnumber in (select project_components.link from project_components)
and profile.id_registro = @id_registro
AND profile.num_proto is not null
and profile.num_anno_proto = @anno
and profile.id_uo_prot = @ID_UO
--CALCOLO LE PERCENTUALI
IF (@TOT_PROT_UO <> 0)
BEGIN
IF (@ProtA <> 0)
BEGIN --% di protocolli A sul totale dei protocolli
SET @PercProtA = ROUND(((@ProtA / @TOT_PROT_UO) * 100),2)
END
IF (@ProtP <> 0)
BEGIN --% di protocolli P sul totale dei protocolli
SET @PercProtP = ROUND(((@ProtP / @TOT_PROT_UO) * 100),2)
END
IF (@ProtI <> 0)
BEGIN --% di protocolli I sul totale dei protocolli
SET @PercProtI = ROUND(((@ProtI / @TOT_PROT_UO) * 100),2)
END
IF (@ProtAndAnn <> 0)
BEGIN --% di protocolli Annullati sul totale dei protocolli
SET @PercProtAndAnn = ROUND(((@ProtAndAnn / @TOT_PROT_UO) * 100),2)
END
IF (@ProtNotImg <> 0)
BEGIN --% di protocolli senza Immagine sul totale dei protocolli
SET @PercProtNotImg = ROUND(((@ProtNotImg / @TOT_PROT_UO) * 100),2)
END
IF (@ProtAndClass <> 0)
BEGIN --% di protocolli senza Immagine sul totale dei protocolli
SET @PercProtAndClass = ROUND(((@ProtAndClass / @TOT_PROT_UO) * 100),2)
END
END
-- INSERISCO NELLA TAB TEMPORANEA
insert into #REPORT_ANNUALE_X_UO
(UO,TOT_PROT,ARRIVO,PERC_ARRIVO,PARTENZA,PERC_PARTENZA,INTERNI,PERC_INTERNI,ANNULL,PERC_ANNULL,PROFILI,PERC_PROFILI,CLASSIFICATI,PERC_CLASSIFICATI)
values
(@VAR_UO,@TOT_PROT_UO,@ProtA,@PercProtA,@ProtP,@PercProtP,@ProtI,@PercProtI,@ProtAndAnn,@PercProtAndAnn,@ProtNotImg,@PercProtNotImg,@ProtAndClass,@PercProtAndClass)
--aggiorno variabili totali
set @TOTPROT = @TOTPROT + @TOT_PROT_UO
set @TOTPROTA = @TOTPROTA + @ProtA
set @TOTPROTP = @TOTPROTP + @ProtP
set @TOTPROTI = @TOTPROTI + @ProtI
set @TOTPROTANN = @TOTPROTANN + @ProtAndAnn
set @TOTPROTPROF = @TOTPROTPROF + @ProtNotImg
set @TOTPROTCLASS = @TOTPROTCLASS + @ProtAndClass


FETCH next from C_UO into @TOT_PROT_UO,@ID_UO,@VAR_UO

END    --( END 1 CICLO ) --
--verifico e calcolo percentuali totali
IF (@TOTPROT <> 0)
BEGIN
IF (@TOTPROTA <> 0)
BEGIN --% di protocolli A sul totale dei protocolli
SET @PERCTOTPROTA = ROUND(((@TOTPROTA / @TOTPROT) * 100),2)
END
IF (@TOTPROTP <> 0)
BEGIN --% di protocolli P sul totale dei protocolli
SET @PERCTOTPROTP = ROUND(((@TOTPROTP / @TOTPROT) * 100),2)
END
IF (@TOTPROTI <> 0)
BEGIN --% di protocolli I sul totale dei protocolli
SET @PERCTOTPROTI = ROUND(((@TOTPROTI / @TOTPROT) * 100),2)
END
IF (@TOTPROTANN <> 0)
BEGIN --% di protocolli ANNULLATI sul totale dei protocolli
SET @PERCTOTPROTANN = ROUND(((@TOTPROTANN / @TOTPROT) * 100),2)
END
IF (@TOTPROTPROF <> 0)
BEGIN --% di protocolli senza Immagine sul totale dei protocolli
SET @PERCTOTPROTPROF = ROUND(((@TOTPROTPROF / @TOTPROT) * 100),2)
END
IF (@TOTPROTCLASS <> 0)
BEGIN --% di protocolli senza Immagine sul totale dei protocolli
SET @PERCTOTPROTCLASS = ROUND(((@TOTPROTCLASS / @TOTPROT) * 100),2)
END
END
-- inserisco i valori totali come ultima riga di report
insert into #REPORT_ANNUALE_X_UO
(UO,TOT_PROT,ARRIVO,PERC_ARRIVO,PARTENZA,PERC_PARTENZA,INTERNI,PERC_INTERNI,ANNULL,PERC_ANNULL,PROFILI,PERC_PROFILI,CLASSIFICATI,PERC_CLASSIFICATI)
values
(''TOTALE'',@TOTPROT,@TOTPROTA,@PERCTOTPROTA,@TOTPROTP,@PERCTOTPROTP,@TOTPROTI,@PERCTOTPROTI,@TOTPROTANN,@PERCTOTPROTANN,@TOTPROTPROF,@PERCTOTPROTPROF,@TOTPROTCLASS,@PERCTOTPROTCLASS)

DEALLOCATE C_UO
-- return dei risultati
SELECT * FROM #REPORT_ANNUALE_X_UO


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Report_Annuale_Doc_Class]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create procedure [db_user].[Report_Annuale_Doc_Class]

@ID_AMM int,
@ID_REGISTRO int,
@ID_ANNO int,
@VAR_SEDE varchar (255) =''''

AS

--DICHIARAZIONI VARIABILI
declare @TotDocClass float
declare @CodClass varchar (255)
declare @DescClass varchar (255)
declare @TotDocClassVT int
declare @PercDocClassVT float
declare @Contatore float

--SETTAGGIO INIZIALE VARIABILI
set @PercDocClassVT = 0
set @TotDocClass = 0
set @Contatore = 0


--SELECT PER LA CONTA DI TUTTI I DOCUMENTI CLASSIFICATI RELATIVAMENTE AD UNA AMMINISTRAZIONE
if(@var_sede <> '''' and @var_sede is not null)
begin
set @TotDocClass = ( SELECT COUNT(distinct(profile.system_id)) FROM profile,dpa_l_ruolo_reg
WHERE dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = db_user.dpa_l_ruolo_reg.id_ruolo_in_uo
AND cha_fascicolato = ''1''
AND YEAR(profile.creation_date) = @id_anno
AND ((@var_sede is null and profile.var_sede is null) OR (@var_sede is not null and profile.var_sede = @var_sede)))
end
else
begin
set @TotDocClass = ( SELECT COUNT(distinct(profile.system_id)) FROM profile,dpa_l_ruolo_reg
WHERE dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = db_user.dpa_l_ruolo_reg.id_ruolo_in_uo
AND cha_fascicolato = ''1''
AND YEAR(profile.creation_date) = @id_anno)
end
--TABELLA TEMPORANEA ALLOCAZIONE RISULTATI
CREATE TABLE [db_user].[#TEMP_REPORT_ANNUALE_DOC_CLASSIFICATI]
(
[TOT_DOC_CLASS ] int,
[COD_CLASS] [varchar] (255),
[DESC_CLASS] [varchar] (255),
[TOT_DOC_CLASS_VT] float,
[PERC_DOC_CLASS_VT] float,

) ON [PRIMARY]

-- variabili ausiliarie per il cursore che recupera le voci di titolario
DECLARE @SYSTEM_ID_VT INT
DECLARE @DESCRIPTION_VT VARCHAR (255)
DECLARE @VAR_CODICE_VT VARCHAR (255)

-- variabili ausiliarie per il cursore che re+cupera la lista dei fascicoli
DECLARE @SYSTEM_ID_FASC INT

-- variabili ausiliarie per il cursore che recupera la lista dei folder
DECLARE @SYSTEM_ID_FOLD INT

--1 QUERY- elenco voci di titolario  -- (input : @id_amm)
DECLARE c_VociTit CURSOR LOCAL FOR -- contiene tutte le voci di titolario (TIPO "T")
select system_id,description,var_codice from project where var_codice is not null
AND id_titolario = (select system_id from project where cha_stato= ''A'' and var_codice = ''T'')
AND id_amm =@ID_AMM and cha_tipo_proj = ''T''
and (id_registro = @id_registro OR id_registro is null)
order by VAR_COD_LIV1
OPEN c_VociTit
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT
while(@@fetch_status=0)
BEGIN
--------2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)
DECLARE c_Fascicoli CURSOR LOCAL FOR -- contiene tutti i fascicoli (TIPO "F")
select system_id
from project
where cha_tipo_proj = ''F'' and id_amm = @ID_AMM
and (id_registro = @id_registro or id_registro is null)
and id_parent = @SYSTEM_ID_VT
OPEN c_Fascicoli
FETCH next from c_Fascicoli into @SYSTEM_ID_FASC
while(@@fetch_status=0)
BEGIN
-----------------3 QUERY--Selezione di tutti i folder del fascicolo preselezionato - (input @id_amm)
DECLARE c_Folder CURSOR LOCAL FOR --contiene tutti i folder (TIPO "C")
select system_id from project
where cha_tipo_proj = ''C'' and id_amm = @ID_AMM
and id_parent =  @SYSTEM_ID_FASC
and (id_registro = @id_registro or id_registro is null)
OPEN c_Folder
FETCH next from c_Folder into @SYSTEM_ID_FOLD
while(@@fetch_status=0)
BEGIN --(3 ciclo - calcolo paraziale dei doc classificati in ogni folder)
if(@var_sede <> '''' and @var_sede is not null)
begin
set @Contatore = @Contatore + (select count(distinct(profile.system_id)) from project_components , profile,dpa_l_ruolo_reg
where  project_components.project_id = @SYSTEM_ID_FOLD
AND project_components.link = profile.docnumber
AND (YEAR(profile.creation_date) = @id_anno)
AND dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo
AND ((@var_sede is null and profile.var_sede is null) OR (@var_sede is not null and profile.var_sede = @var_sede)))
end
else
begin
set @Contatore = @Contatore + (select count(distinct(profile.system_id)) from project_components , profile ,dpa_l_ruolo_reg
where  project_components.project_id = @SYSTEM_ID_FOLD
AND project_components.link = profile.docnumber
AND (YEAR(profile.creation_date) = @id_anno)
AND dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo )
end
FETCH next from c_Folder into @SYSTEM_ID_FOLD
END
--(FINE 3 ciclo)
DEALLOCATE c_Folder

FETCH next from c_Fascicoli into @SYSTEM_ID_FASC
END
--(FINE 2 ciclo)
DEALLOCATE c_Fascicoli
-- al termine della conta di tutti i documenti classificati nei fascicoli, prima di cambiare voce di titolario
-- devo inserire le informazioni nella tabella temporanea e resettare il contatore.
---- calcolo delle percentuale dei documenti classificati nella voce di titolario rispetto al totale dei classificati
if ((@Contatore <> 0) and (@TotDocClass <>0))
begin
set @PercDocClassVT = ROUND(((@Contatore / @TotDocClass) * 100),2)
end
---- inserisco le informazioni nella tabella temporanea
if (@Contatore <> 0)
begin
INSERT INTO #TEMP_REPORT_ANNUALE_DOC_CLASSIFICATI (TOT_DOC_CLASS,COD_CLASS,DESC_CLASS,TOT_DOC_CLASS_VT,PERC_DOC_CLASS_VT)
VALUES (@TotDocClass,@VAR_CODICE_VT,@DESCRIPTION_VT,@Contatore,@PercDocClassVT)
end
---- reset del contatore parziale per la conta della prossima voce di titolario
set @Contatore = 0
---- reset del valore percentuale
set @PercDocClassVT = 0
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT
END
-- (FINE 1 ciclo)
DEALLOCATE c_VociTit

-- restituzione informazioni richieste
select * from #TEMP_REPORT_ANNUALE_DOC_CLASSIFICATI

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Report_Annuale_Doc_Class_compatta]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create procedure [db_user].[Report_Annuale_Doc_Class_compatta]
@ID_AMM int,
@ID_REGISTRO int,
@ID_ANNO int,
@VAR_SEDE varchar (255) =''''

AS

--DICHIARAZIONI VARIABILI
declare @TotDocClass float
declare @CodClass varchar (255)
declare @DescClass varchar (255)
declare @TotDocClassVT int
declare @PercDocClassVT float
declare @Contatore float

--SETTAGGIO INIZIALE VARIABILI
set @PercDocClassVT = 0
set @TotDocClass = 0
set @Contatore = 0


--SELECT PER LA CONTA DI TUTTI I DOCUMENTI CLASSIFICATI RELATIVAMENTE AD UNA AMMINISTRAZIONE
if(@var_sede <> '''')
begin
set @TotDocClass = ( SELECT COUNT(distinct(profile.system_id)) FROM profile,dpa_l_ruolo_reg
WHERE dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = db_user.dpa_l_ruolo_reg.id_ruolo_in_uo
AND cha_fascicolato = ''1''
AND YEAR(profile.creation_date) = @id_anno
AND ((@var_sede is null and profile.var_sede is null) OR (@var_sede is not null and profile.var_sede = @var_sede)))
end
else
begin
set @TotDocClass = ( SELECT COUNT(distinct(profile.system_id)) FROM profile,dpa_l_ruolo_reg
WHERE dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = db_user.dpa_l_ruolo_reg.id_ruolo_in_uo
AND cha_fascicolato = ''1''
AND YEAR(profile.creation_date) = @id_anno)
end

--TABELLA TEMPORANEA ALLOCAZIONE RISULTATI
CREATE TABLE [db_user].[#TEMP_REPORT_ANNUALE_DOC_CLASSIFICATI]
(
[TOT_DOC_CLASS ] int,
[COD_CLASS] [varchar] (255),
[DESC_CLASS] [varchar] (255),
[TOT_DOC_CLASS_VT] float,
[PERC_DOC_CLASS_VT] float,
[NUM_LIVELLO] [varchar] (255)
) ON [PRIMARY]

-- variabili ausiliarie per il cursore che recupera le voci di titolario
DECLARE @SYSTEM_ID_VT INT
DECLARE @DESCRIPTION_VT VARCHAR (255)
DECLARE @VAR_CODICE_VT VARCHAR (255)
DECLARE @NUM_LIVELLO1 VARCHAR (255)
DECLARE @TOT_PRIMO_LIVELLO int
DECLARE @VAR_CODICE_LIVELLO1 VARCHAR (255)
DECLARE @DESCRIPTION__LIVELLO1 VARCHAR (255)
-- variabili ausiliarie per il cursore che re+cupera la lista dei fascicoli
DECLARE @SYSTEM_ID_FASC INT

-- variabili ausiliarie per il cursore che recupera la lista dei folder
DECLARE @SYSTEM_ID_FOLD INT
--inizializzazione del valore contenente la somma dei documenti classificati nel ramo di titolario
set @TOT_PRIMO_LIVELLO = 0

--1 QUERY- elenco voci di titolario  -- (input : @id_amm)
DECLARE c_VociTit CURSOR LOCAL FOR -- contiene tutte le voci di titolario (TIPO "T")
select system_id,description,var_codice,num_livello from project where var_codice is not null and
id_titolario = (select system_id from project where cha_stato= ''A'' and var_codice = ''T'') and
id_amm =@ID_AMM and cha_tipo_proj = ''T''
and (id_registro = @id_registro OR id_registro is null)
order by var_cod_liv1
OPEN c_VociTit
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT,@NUM_LIVELLO1
while(@@fetch_status=0)
BEGIN
if(@NUM_LIVELLO1 = 1)
begin
set @VAR_CODICE_LIVELLO1 = @VAR_CODICE_VT
set @DESCRIPTION__LIVELLO1 = @DESCRIPTION_VT
end
--------2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)
DECLARE c_Fascicoli CURSOR LOCAL FOR -- contiene tutti i fascicoli (TIPO "F")
select system_id
from project
where cha_tipo_proj = ''F'' and id_amm = @ID_AMM
and (id_registro = @id_registro or id_registro is null)
and id_parent = @SYSTEM_ID_VT
OPEN c_Fascicoli
FETCH next from c_Fascicoli into @SYSTEM_ID_FASC
while(@@fetch_status=0)
BEGIN
-----------------3 QUERY--Selezione di tutti i folder del fascicolo preselezionato - (input @id_amm)
DECLARE c_Folder CURSOR LOCAL FOR --contiene tutti i folder (TIPO "C")
select system_id from project
where cha_tipo_proj = ''C'' and id_amm = @ID_AMM
and id_parent =  @SYSTEM_ID_FASC
and (id_registro = @id_registro or id_registro is null)
OPEN c_Folder
FETCH next from c_Folder into @SYSTEM_ID_FOLD
while(@@fetch_status=0)
BEGIN --(3 ciclo - calcolo paraziale dei doc classificati in ogni folder)
if(@var_sede <> '''')
begin
set @Contatore = @Contatore + (select count(distinct(profile.system_id)) from project_components , profile,dpa_l_ruolo_reg
where  project_components.project_id = @SYSTEM_ID_FOLD
AND project_components.link = profile.docnumber
AND (YEAR(profile.creation_date) = @id_anno)
AND dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo
AND ((@var_sede is null and profile.var_sede is null) OR (@var_sede is not null and profile.var_sede = @var_sede)))
end
else
begin
set @Contatore = @Contatore + (select count(distinct(profile.system_id)) from project_components , profile ,dpa_l_ruolo_reg
where  project_components.project_id = @SYSTEM_ID_FOLD
AND project_components.link = profile.docnumber
AND (YEAR(profile.creation_date) = @id_anno)
AND dpa_l_ruolo_reg.id_registro = @id_registro
AND profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo )
end

FETCH next from c_Folder into @SYSTEM_ID_FOLD
END
--(FINE 3 ciclo)
DEALLOCATE c_Folder

FETCH next from c_Fascicoli into @SYSTEM_ID_FASC
END
--(FINE 2 ciclo)
DEALLOCATE c_Fascicoli

set @TOT_PRIMO_LIVELLO = @TOT_PRIMO_LIVELLO + @Contatore

set @Contatore = 0
---- reset del valore percentuale

FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT,@NUM_LIVELLO1
if(@NUM_LIVELLO1=1 or @@fetch_status<>0)
begin
if ((@TOT_PRIMO_LIVELLO <> 0) and (@TotDocClass <>0))
begin
set @PercDocClassVT = ROUND(((@TOT_PRIMO_LIVELLO / @TotDocClass) * 100),2)
end
if (@TotDocClass<>0)
begin
INSERT INTO #TEMP_REPORT_ANNUALE_DOC_CLASSIFICATI (TOT_DOC_CLASS,COD_CLASS,DESC_CLASS,TOT_DOC_CLASS_VT,PERC_DOC_CLASS_VT,NUM_LIVELLO)
VALUES (@TotDocClass,@VAR_CODICE_LIVELLO1,@DESCRIPTION__LIVELLO1,@TOT_PRIMO_LIVELLO,@PercDocClassVT,''1'')
end
set @TOT_PRIMO_LIVELLO = 0
set @PercDocClassVT = 0
set @PercDocClassVT = 0
end
END
-- (FINE 1 ciclo)
DEALLOCATE c_VociTit

select * from #TEMP_REPORT_ANNUALE_DOC_CLASSIFICATI
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[classcat]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

CREATE function [db_user].[classcat] (@docId int)
returns varchar(8000)
as
begin
declare @item varchar(200)
declare @outcome varchar(8000)

set @outcome=''''

declare cur CURSOR LOCAL
for SELECT DISTINCT A.VAR_CODICE
FROM PROJECT A WITH (NOLOCK)
WHERE A.CHA_TIPO_PROJ = ''F''
AND A.SYSTEM_ID IN
(SELECT A1.ID_FASCICOLO
FROM PROJECT A1 WITH (NOLOCK), PROJECT_COMPONENTS B WITH (NOLOCK)
WHERE A1.SYSTEM_ID=B.PROJECT_ID AND B.LINK=@docId)
open cur
fetch next from cur into @item
while(@@fetch_status=0)
begin
set @outcome=@outcome+db_user.parsenull(@item)+'', ''
fetch next from cur into @item
end
close cur
deallocate cur
if (len(@outcome)>0)
set @outcome = substring(@outcome,1,(len(@outcome)-1))
return @outcome
end
' 
END

GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_INSERT_DOC_ARCHIVIO]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [db_user].[SP_INSERT_DOC_ARCHIVIO]
@p_idProfile INT, 
@p_serie INT, 
@p_result INT 
 AS

declare @inFasc INT
declare @inSerie INT
declare @docNumber INT
BEGIN

      set  @p_result = -1
      select @docNumber = docnumber from profile where system_id = @p_idProfile

      SELECT @inFasc =  count(*) FROM PROJECT A
      WHERE A.CHA_TIPO_PROJ = ''F'' AND
      A.SYSTEM_ID IN
      (SELECT A.ID_FASCICOLO FROM PROJECT A, PROJECT_COMPONENTS B
      WHERE A.SYSTEM_ID=B.PROJECT_ID AND B.LINK=@p_idProfile);

      select @inSerie = count(*) 
      from profile, dpa_associazione_templates, dpa_oggetti_custom
      where
      profile.docnumber = dpa_associazione_templates.doc_number
      and
      dpa_associazione_templates.id_oggetto = dpa_oggetti_custom.system_id
      and
      profile.docnumber = @docNumber
      and
      dpa_oggetti_custom.repertorio = 1
      and
      dpa_associazione_templates.valore_oggetto_db is not null;

    if ((@inFasc=1 and @p_serie=1) or (@inFasc>1 and @p_serie=0) ) 
        begin
           UPDATE PROFILE SET  CHA_IN_ARCHIVIO=''2'' WHERE SYSTEM_ID = @p_idProfile
           SET @p_result=2
        end
    else
        begin
           UPDATE PROFILE SET  CHA_IN_ARCHIVIO=''1'' WHERE SYSTEM_ID = @p_idProfile;
           DELETE FROM DPA_AREA_LAVORO WHERE ID_PROFILE = @p_idProfile;
           update dpa_trasm_utente set cha_in_todolist = ''0'' where id_trasm_singola in
            (select system_id from dpa_trasm_singola where id_trasmissione in
                 (select system_id from dpa_trasmissione where id_profile = @p_idProfile))
           SET @p_result=1
        end

END' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[corrcat_address]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

CREATE function [db_user].[corrcat_address] (@docId int, @dirProt varchar(1))
returns varchar(8000)
as
begin
declare @item varchar(200)
declare @outcome varchar(8000)
declare @dirCorr varchar(1)
declare @ind varchar(1000)
declare @indirizzo varchar(128)
declare @cap varchar(5)
declare @citta varchar(64)
declare @provincia varchar(2)

set @outcome=''''


declare cur CURSOR LOCAL

for select distinct c.var_desc_corr, dap.cha_tipo_mitt_dest, dett.VAR_INDIRIZZO, dett.VAR_CAP, dett.VAR_CITTA, dett.VAR_PROVINCIA
from dpa_corr_globali c WITH (NOLOCK) left outer join DPA_DETT_GLOBALI dett on c.system_id=dett.id_corr_globali, dpa_doc_arrivo_par dap WITH (NOLOCK)
where dap.id_profile=@docId
and dap.id_mitt_dest=c.system_id
order by dap.cha_tipo_mitt_dest desc
open cur

fetch next from cur into @item,@dirCorr, @indirizzo, @cap, @citta, @provincia
while(@@fetch_status=0)
begin
if (@dirProt=''P'' and @dirCorr=''M'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (M); ''
end

if (@dirProt=''P'' and @dirCorr=''D'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (D); ''
end

if (@dirProt=''P'' and @dirCorr=''C'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (CC); ''
end

if (@dirProt=''A'' and @dirCorr=''M'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+''; ''
end

if (@dirProt=''A'' and @dirCorr=''I'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (MI); ''
end

if (@dirProt=''I'' and @dirCorr=''M'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (M); ''
end

if (@dirProt=''I'' and @dirCorr=''D'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (D); ''
end

if (@dirProt=''I'' and @dirCorr=''C'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (CC); ''
end

IF (@cap IS NULL)  set @cap =''''

IF (@citta IS NULL) set @citta =''''

IF (@provincia IS NULL) set @provincia =''''

IF (@indirizzo IS NOT NULL)
begin
set @ind = @indirizzo +'' ''+ @cap +'' ''+ @citta +'' ''+ @provincia
set @outcome = @outcome +  '' ('' + @ind  + '')''
end

fetch next from cur into @item,@dirCorr, @indirizzo, @cap, @citta, @provincia

end

close cur

deallocate cur

if (len(@outcome)>0)

set @outcome = substring(@outcome,1,(len(@outcome)-1))

return @outcome

end
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[createDocSP]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[createDocSP]
@idpeople int,
@doctype varchar (128),
@systemId int out

AS

DECLARE @Docnum  int
DECLARE @Verid int
DECLARE @IDDocType int

BEGIN

SET @systemId= 0

set @IDDocType =  ( SELECT SYSTEM_ID  FROM
DOCUMENTTYPES
WHERE TYPE_ID = @doctype)

IF (NOT @IDDocType IS NULL)
BEGIN
INSERT INTO Profile
(

TYPIST,
AUTHOR,
DOCUMENTTYPE,
CREATION_DATE,
CREATION_TIME

)
VALUES
(

@idpeople,
@idpeople,
@IDDocType,
GETDATE(),
GETDATE()

)

-- Reperimento identity appena immessa
SET @systemId=scope_identity()
SET @Docnum = @systemId

--AGGIORNO LA PROFILE CON DOCNUMBER=SYSTEMID APPENA INSERITA
UPDATE PROFILE
SET DOCNUMBER = @Docnum
WHERE SYSTEM_ID = @systemId


IF (@@ROWCOUNT = 0)
BEGIN
SET @systemId= 0
RETURN @systemId
END
ELSE

BEGIN

INSERT INTO VERSIONS
(
DOCNUMBER,
VERSION,
SUBVERSION,
VERSION_LABEL,
AUTHOR, TYPIST,
DTA_CREAZIONE
) VALUES (
@Docnum, 1, ''!'', ''1'',@idpeople, @idpeople,  GETDATE()
)

SET @Verid = scope_identity()


INSERT INTO COMPONENTS
(
VERSION_ID,
DOCNUMBER,
FILE_SIZE
) VALUES (
@Verid, @Docnum, 0
)


INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
) VALUES (
@systemId, @idpeople, 0, NULL, NULL
)

END

END
ELSE

SET @systemId = 0
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_DOC_E1]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE  PROCEDURE [db_user].[SP_EREDITA_VIS_DOC_E1]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

/*
.......................................................................................
SP_EREDITA_VIS_DOC_E1          		ESTENSIONE 1
.......................................................................................
*/

DECLARE @retValue int
DECLARE @thing int
DECLARE @personorgroup int
DECLARE @acr int
DECLARE @gtrasm int
DECLARE @dir varchar

DECLARE c1 CURSOR LOCAL FOR
select
s.thing as thing,
@IDGruppo as personorgroup,
(case when
(s.accessrights=255 AND (s.cha_tipo_diritto=''P'' OR s.cha_tipo_diritto=''A''))
then
63
else
s.accessrights
end)  as acr,
s.id_gruppo_trasm as gtrasm,
''A'' as dir
from security s, profile p
where p.system_id = s.thing
and p.cha_privato = ''0''
and (p.id_registro = @IDRegistro or p.id_registro is null)
and s.personorgroup in (
SELECT	c.SYSTEM_ID
FROM	DPA_TIPO_RUOLO a, DPA_CORR_GLOBALI b, GROUPS c, DPA_L_RUOLO_REG d
WHERE 	a.SYSTEM_ID = b.ID_TIPO_RUOLO
AND	b.id_gruppo = c.system_id
AND 	d.id_ruolo_in_uo = b.system_id
AND 	b.CHA_TIPO_URP = ''R''
AND 	b.CHA_TIPO_IE = ''I''
AND 	b.DTA_FINE IS NULL
AND 	a.NUM_LIVELLO > @LivelloRuolo
AND	b.ID_UO = @IDCorrGlobaleUO
AND	d.id_registro = @IDRegistro
)

DECLARE c2 CURSOR LOCAL FOR
select
s.thing as thing,
@IDGruppo as personorgroup,
(case when
(s.accessrights=255 AND (s.cha_tipo_diritto=''P'' OR s.cha_tipo_diritto=''A''))
then
63
else
s.accessrights
end)  as acr,
s.id_gruppo_trasm as gtrasm,
''A'' as dir
from security s, profile p
where p.system_id = s.thing
and p.cha_privato = ''0''
and (p.id_registro = @IDRegistro or p.id_registro is null)
and s.personorgroup in (
SELECT	c.SYSTEM_ID
FROM	DPA_TIPO_RUOLO a, DPA_CORR_GLOBALI b, GROUPS c, DPA_L_RUOLO_REG d
WHERE 	a.SYSTEM_ID = b.ID_TIPO_RUOLO
AND	b.id_gruppo = c.system_id
AND 	d.id_ruolo_in_uo = b.system_id
AND 	b.CHA_TIPO_URP = ''R''
AND 	b.CHA_TIPO_IE = ''I''
AND 	b.DTA_FINE IS NULL
AND 	a.NUM_LIVELLO >= @LivelloRuolo
AND	b.ID_UO = @IDCorrGlobaleUO
AND	d.id_registro = @IDRegistro
)

BEGIN
SET @retValue = 0

IF (@PariLivello=0)
BEGIN
OPEN c1
FETCH NEXT FROM c1
INTO @thing, @personorgroup,@acr,@gtrasm,@dir

WHILE @@FETCH_STATUS = 0
BEGIN
IF NOT EXISTS
(SELECT *
FROM SECURITY
WHERE THING = @thing AND
PERSONORGROUP = @personorgroup AND
ACCESSRIGHTS = @acr)
INSERT  INTO SECURITY
(THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO)
VALUES
(@thing,
@personorgroup,
@acr,
@gtrasm,
@dir)

IF(@@ERROR <> 0)
CONTINUE

FETCH NEXT FROM c1
INTO @thing, @personorgroup,@acr,@gtrasm,@dir
END

CLOSE c1
DEALLOCATE c1
END
ELSE
BEGIN
OPEN c2
FETCH NEXT FROM c2
INTO @thing, @personorgroup,@acr,@gtrasm,@dir

WHILE @@FETCH_STATUS = 0
BEGIN
IF NOT EXISTS
(SELECT *
FROM SECURITY
WHERE THING = @thing AND
PERSONORGROUP = @personorgroup AND
ACCESSRIGHTS = @acr)
INSERT  INTO SECURITY
(THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO)
VALUES
(@thing,
@personorgroup,
@acr,
@gtrasm,
@dir)

IF(@@ERROR <> 0)
CONTINUE

FETCH NEXT FROM c2
INTO @thing, @personorgroup,@acr,@gtrasm,@dir
END

CLOSE c2
DEALLOCATE c2
END


RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[setsecurityRuoloReg]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create  PROCEDURE [db_user].[setsecurityRuoloReg]
@idCorrGlobali int,
@idProfile int,
@diritto int
 
AS
DECLARE @esito int
DECLARE @idGruppo int
 
BEGIN
 SET @esito = -1
 SET @idGruppo = (select id_Gruppo from dpa_corr_globali where system_id = @idCorrGlobali)
 
 IF (@idGruppo IS NOT NULL)
 BEGIN
  SET @esito = (select max(accessrights) from security where thing = @idProfile and personorgroup = @idGruppo)
  IF (@esito < @diritto )
  BEGIN
   update security set accessrights = @diritto where thing = @idProfile and personorgroup = @idGruppo
  END
  ELSE
  BEGIN 
   if (@esito is null) 
   BEGIN
     insert into security values(@idProfile,@idGruppo,@diritto,null,''A'')
                   SET  @esito = @diritto
   END
  END
 END
END
 
RETURN @esito
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[I_SMISTAMENTO_SMISTADOC_R_2]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[I_SMISTAMENTO_SMISTADOC_R_2]
@IDPeopleMittente int,
@IDCorrGlobaleRuoloMittente int,
@IDGruppoMittente int,
@IDAmministrazioneMittente int,
@IDCorrGlobaleDestinatario int,
@IDDocumento int,
@TipoDiritto nchar(1),
@Rights int,
@IDRagioneTrasm int
AS

DECLARE @ReturnValue int
DECLARE @Identity int
DECLARE @IdentityTrasm int

BEGIN
INSERT INTO DPA_TRASMISSIONE
(
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
@IDCorrGlobaleRuoloMittente,
@IDPeopleMittente,
''D'',
@IDDocumento,
NULL,
GETDATE(),
NULL
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=2
END
ELSE
BEGIN
SET @Identity=scope_identity()
SET @IdentityTrasm = @Identity

INSERT INTO DPA_TRASM_SINGOLA
(
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
VAR_NOTE_SING,
CHA_TIPO_TRASM,
DTA_SCADENZA,
ID_TRASM_UTENTE
)
VALUES
(
@IDRagioneTrasm,
@Identity,
''R'',
@IDCorrGlobaleDestinatario,
NULL,
''S'',
NULL,
NULL
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=3
END
ELSE
BEGIN
SET @Identity=scope_identity()
DECLARE cursor_IDUtenti

CURSOR FOR
SELECT 	P.SYSTEM_ID
FROM 	GROUPS G,
PEOPLEGROUPS PG,
PEOPLE P,
DPA_CORR_GLOBALI CG
WHERE 	PG.GROUPS_SYSTEM_ID=G.SYSTEM_ID AND
PG.PEOPLE_SYSTEM_ID=P.SYSTEM_ID AND
G.SYSTEM_ID = (SELECT A.ID_GRUPPO FROM DPA_CORR_GLOBALI A WHERE A.SYSTEM_ID = @IDCorrGlobaleDestinatario) AND
P.DISABLED NOT IN (''Y'') AND
P.SYSTEM_ID=CG.ID_PEOPLE
AND CG.CHA_TIPO_URP != ''L''
AND CG.DTA_FINE IS NULL
AND PG.DTA_FINE IS NULL

OPEN cursor_IDUtenti

DECLARE @IDUtente int

FETCH NEXT FROM cursor_IDUtenti
INTO 	@IDUtente

WHILE @@FETCH_STATUS = 0
BEGIN
-- Inserimento in tabella DPA_TRASM_UTENTE
INSERT INTO DPA_TRASM_UTENTE
(
ID_TRASM_SINGOLA,
ID_PEOPLE,
DTA_VISTA,
DTA_ACCETTATA,
DTA_RIFIUTATA,
DTA_RISPOSTA,
CHA_VISTA,
CHA_ACCETTATA,
CHA_RIFIUTATA,
VAR_NOTE_ACC,
VAR_NOTE_RIF,
CHA_VALIDA,
ID_TRASM_RISP_SING
)
VALUES
(
@Identity,
@IDUtente,
NULL,
NULL,
NULL,
NULL,
''0'',
''0'',
''0'',
NULL,
NULL,
''1'',
NULL
)

-- Verifica se non vi sia gia'' una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < @Rights
--	   viene fatto un''aggiornamento impostandone il valore a @Rights
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = @Rights
DECLARE @IDGroups int

SET @IDGroups = (
SELECT A.ID_GRUPPO
FROM DPA_CORR_GLOBALI A
WHERE A.SYSTEM_ID = @IDCorrGlobaleDestinatario
)

DECLARE @AccessRights int

SET @AccessRights=
(
SELECT 	MAX(ACCESSRIGHTS)
FROM 		SECURITY
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @IDGroups
)

IF (NOT @AccessRights IS NULL)
BEGIN
IF (@AccessRights < @Rights)
-- aggiornamento a @Rights
UPDATE 	SECURITY
SET 	ACCESSRIGHTS=@Rights
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @IDGroups
AND
ACCESSRIGHTS=@AccessRights
END
ELSE
BEGIN
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
@IDDocumento,
@IDGroups,
@Rights,
@IDGruppoMittente,
@TipoDiritto
)
END

-- Posizionamento sul record successivo del cursore temporaneo
FETCH NEXT FROM cursor_IDUtenti
INTO 	@IDUtente

END

-- Chiusura e deallocazione cursore
CLOSE cursor_IDUtenti
DEALLOCATE cursor_IDUtenti

--AGGIORNAMENTO DELLA DATA DI INVIO DELLA TRASMISSIONE
UPDATE DPA_TRASMISSIONE SET DTA_INVIO = GETDATE() WHERE SYSTEM_ID = @IdentityTrasm

-- Esecuzione a buon fine
SET @ReturnValue=0
END
END
END

RETURN @ReturnValue

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[I_Smistamento_Setvisibsup]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create  PROCEDURE  [db_user].[I_Smistamento_Setvisibsup]
@IDCorrGlobaleRuolo int,
@IDGruppoMittente int,
@LivelloRuoloMittente int,
@PariLivello int,
@DirittoDaEred int,
@IDDocumento int

AS

DECLARE @ExistIDGruppiSuperiori nvarchar(1)
DECLARE @recordCorrente int
DECLARE @idGruppoSuperiore int
DECLARE @ExistAccessRights nvarchar(1)
DECLARE @AccessRights int
DECLARE @accessRightsValue int
DECLARE @MyUo int
DECLARE @IDParent int
DECLARE @IDUnitaOrganizzativa int
DECLARE @LivelloRuolo int
DECLARE @IDRegistro int

SET @ExistIDGruppiSuperiori=''Y''
SET @ExistAccessRights=''Y''

-- variabile utilizzata per il reperimento del valore dal cursore
DECLARE @ID_GRUPPO int

SET @IDRegistro=
(SELECT ID_REGISTRO
FROM PROFILE
WHERE SYSTEM_ID = @IDDocumento)

SET @MyUO=
(SELECT id_uo
FROM DPA_CORR_GLOBALI
WHERE system_id = @IDCorrGlobaleRuolo)

SET @LivelloRuolo=
(SELECT TR.NUM_LIVELLO
FROM DPA_CORR_GLOBALI CG,DPA_TIPO_RUOLO TR
WHERE CG.SYSTEM_ID = @IDCorrGlobaleRuolo  AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID)

BEGIN

/* visibilita'' ai ruoli superiori della stessa UO ------------------------------------------ */

IF (@IDRegistro IS NULL)
DECLARE IDGruppiSuperiori CURSOR FOR
SELECT 	CG.ID_GRUPPO
FROM	DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR
WHERE	ID_UO = @MyUO
AND
CHA_TIPO_URP = ''R''
AND
DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
TR.NUM_LIVELLO < @LivelloRuolo
ELSE
DECLARE IDGruppiSuperiori CURSOR FOR
SELECT 	CG.ID_GRUPPO
FROM	DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR,
DPA_L_RUOLO_REG RR
WHERE	CG.ID_UO = @MyUO
AND
CG.CHA_TIPO_URP = ''R''
AND
CG.DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
CG.SYSTEM_ID = RR.ID_RUOLO_IN_UO
AND
RR.ID_REGISTRO = @IDRegistro
AND
TR.NUM_LIVELLO < @LivelloRuolo

OPEN IDGruppiSuperiori

FETCH NEXT FROM IDGruppiSuperiori
INTO 	@ID_GRUPPO

WHILE @@FETCH_STATUS = 0
BEGIN
-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un''aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
SET @AccessRights=
(
SELECT 	MAX(ACCESSRIGHTS)
FROM 	SECURITY
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @ID_GRUPPO
AND
CHA_TIPO_DIRITTO = ''A''
)

IF (NOT @AccessRights IS NULL)
IF (@AccessRights < @DirittoDaEred)
/* aggiornamento a DirittoDaEred */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = @DirittoDaEred
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @ID_GRUPPO
AND
CHA_TIPO_DIRITTO = ''A''
AND
ACCESSRIGHTS = @AccessRights
ELSE
/* inserimento a DirittoDaEred */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
@IDDocumento,
@ID_GRUPPO,
@DirittoDaEred,
@IDGruppoMittente,
''A''
)

-- Posizionamento sul record successivo del cursore temporaneo
FETCH NEXT FROM IDGruppiSuperiori
INTO 	@ID_GRUPPO

END

-- Chiusura e deallocazione cursore
CLOSE IDGruppiSuperiori
DEALLOCATE IDGruppiSuperiori


/* visibilita'' ai ruoli superiori delle UO superiori ------------------------------------*/
WHILE (1=1)
BEGIN
SET @IDUnitaOrganizzativa=
(SELECT id_parent
FROM DPA_CORR_GLOBALI
WHERE system_id = @MyUO)

IF (@IDUnitaOrganizzativa=0)
BREAK
ELSE
SET @MyUO=@IDUnitaOrganizzativa

BEGIN

IF (@PariLivello=0)
BEGIN
IF (@IDRegistro IS NULL)
DECLARE IDGruppiSuperiori CURSOR FOR
SELECT 	CG.ID_GRUPPO
FROM	DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR
WHERE	ID_UO = @MyUO
AND
CHA_TIPO_URP = ''R''
AND
DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
TR.NUM_LIVELLO < @LivelloRuolo
ELSE
DECLARE IDGruppiSuperiori CURSOR FOR
SELECT 	CG.ID_GRUPPO
FROM	DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR,
DPA_L_RUOLO_REG RR
WHERE	CG.ID_UO = @MyUO
AND
CG.CHA_TIPO_URP = ''R''
AND
CG.DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
CG.SYSTEM_ID = RR.ID_RUOLO_IN_UO
AND
RR.ID_REGISTRO = @IDRegistro
AND
TR.NUM_LIVELLO < @LivelloRuolo
END
ELSE
BEGIN
IF (@IDRegistro IS NULL)
DECLARE IDGruppiSuperiori CURSOR FOR
SELECT 	CG.ID_GRUPPO
FROM	DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR
WHERE	ID_UO = @MyUO
AND
CHA_TIPO_URP = ''R''
AND
DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
TR.NUM_LIVELLO <= @LivelloRuolo
ELSE
DECLARE IDGruppiSuperiori CURSOR FOR
SELECT 	CG.ID_GRUPPO
FROM	DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR,
DPA_L_RUOLO_REG RR
WHERE	CG.ID_UO = @MyUO
AND
CG.CHA_TIPO_URP = ''R''
AND
CG.DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
CG.SYSTEM_ID = RR.ID_RUOLO_IN_UO
AND
RR.ID_REGISTRO = @IDRegistro
AND
TR.NUM_LIVELLO <= @LivelloRuolo
END

OPEN IDGruppiSuperiori

FETCH NEXT FROM IDGruppiSuperiori
INTO 	@ID_GRUPPO

WHILE @@FETCH_STATUS = 0
BEGIN
SET @AccessRights=
(
SELECT 	MAX(ACCESSRIGHTS)
FROM 	SECURITY
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @ID_GRUPPO
AND
CHA_TIPO_DIRITTO = ''A''
)

IF (NOT @AccessRights IS NULL)
IF (@AccessRights < @DirittoDaEred)
/* aggiornamento a DirittoDaEred */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = @DirittoDaEred
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @ID_GRUPPO
AND
CHA_TIPO_DIRITTO = ''A''
AND
ACCESSRIGHTS = @AccessRights
ELSE
/* inserimento a DirittoDaEred */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
@IDDocumento,
@ID_GRUPPO,
@DirittoDaEred,
@IDGruppoMittente,
''A''
)

-- Posizionamento sul record successivo del cursore temporaneo
FETCH NEXT FROM IDGruppiSuperiori
INTO 	@ID_GRUPPO

END

-- Chiusura e deallocazione cursore
CLOSE IDGruppiSuperiori
DEALLOCATE IDGruppiSuperiori

END

END

END


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_setdirittoruoloprop]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE  PROCEDURE [db_user].[dpa_setdirittoruoloprop] 
@idprofile     INT,
@idcorrGlobRuolo  INT,
@returnvalue   INT OUT    
AS
DECLARE @rtn INT
DECLARE @gruppo INT
BEGIN
----

	set @returnvalue = 1
		set @gruppo =  (SELECT id_gruppo FROM dpa_corr_globali WHERE system_id = @idcorrGlobRuolo)
		set @rtn = (SELECT COUNT (*) FROM security s WHERE s.personorgroup = @gruppo AND s.thing =@idprofile)
		
		IF (@rtn = 0) 
		begin
			INSERT INTO security (accessrights, cha_tipo_diritto, personorgroup, thing)
			VALUES (255, ''P'',@gruppo,@idprofile)
		end
		ELSE
			IF (@rtn > 0) 
			begin
		            UPDATE security  SET accessrights = 255, cha_tipo_diritto = ''P'' 
			    WHERE thing = @idprofile AND personorgroup = @gruppo
		         end
		
		END
		
if @@error <> 0 set @returnvalue = -1
----

return @returnvalue


 

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_FASC]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[SP_EREDITA_VIS_FASC]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

DECLARE @retValue int
DECLARE @id_thing int

DECLARE c1 CURSOR FOR
(SELECT DISTINCT a.system_id AS THING
FROM PROJECT a
WHERE ((a.cha_tipo_proj = ''T'' AND (a.id_registro = @IDRegistro or id_registro is null)) OR (a.cha_tipo_proj = ''F'' AND a.cha_tipo_fascicolo = ''G'' AND (a.id_registro = @IDRegistro or a.id_registro is null))))
UNION
(SELECT DISTINCT b.system_id AS THING
FROM PROJECT b
WHERE b.cha_tipo_proj = ''C''
AND id_fascicolo IN (
SELECT system_id
FROM PROJECT
WHERE cha_tipo_proj = ''F''
AND cha_tipo_fascicolo = ''G''
AND (id_registro = @IDRegistro or id_registro is null)))

IF (@@ERROR <> 0)
RETURN(1)

BEGIN

SET @retValue = 0

OPEN c1
FETCH NEXT FROM c1
INTO @id_thing

WHILE @@FETCH_STATUS = 0
BEGIN
IF NOT EXISTS
(SELECT *
FROM SECURITY
WHERE THING = @id_thing AND
PERSONORGROUP = @IDGruppo AND
ACCESSRIGHTS = 255)
INSERT  INTO SECURITY
(THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO)
VALUES
(@id_thing,
@IDGruppo,
255,
NULL,
''P'')

IF(@@ERROR <> 0)
CONTINUE

FETCH NEXT FROM c1
INTO @id_thing
END

CLOSE c1
DEALLOCATE c1

EXECUTE @retValue=SP_EREDITA_VIS_FASC_E1 @IDCorrGlobaleUO, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_FASC_E2]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE  PROCEDURE [db_user].[SP_EREDITA_VIS_FASC_E2]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

DECLARE @retValue int
DECLARE @thing int
DECLARE @personorgroup int
DECLARE @acr int
DECLARE @dir varchar

DECLARE c2 CURSOR LOCAL FOR
SELECT DISTINCT
s.THING as thing,
@IDGruppo as personorgroup,
(CASE WHEN
(s.accessrights=255 AND (s.cha_tipo_diritto=''P'' OR s.cha_tipo_diritto=''A'' OR s.cha_tipo_diritto=''F''))
THEN
63
ELSE
s.accessrights
END)  as acr,
''A'' as dir
FROM SECURITY s,PROJECT p
WHERE p.system_id = s.thing
AND p.system_id IN (
(SELECT a.system_id
FROM PROJECT a
WHERE ((a.cha_tipo_proj = ''F'' AND a.cha_tipo_fascicolo = ''P'') AND (a.id_registro = @IDRegistro or a.id_registro is null))
) UNION (
SELECT b.system_id
FROM PROJECT b
WHERE b.cha_tipo_proj = ''C''
AND b.id_fascicolo IN (
SELECT system_id
FROM PROJECT
WHERE cha_tipo_proj = ''F''
AND cha_tipo_fascicolo = ''P''
AND (id_registro = @IDRegistro or id_registro is null)))
)
AND s.personorgroup IN (
SELECT
c.SYSTEM_ID
FROM
DPA_TIPO_RUOLO a, DPA_CORR_GLOBALI b, GROUPS c, DPA_L_RUOLO_REG d
WHERE
a.SYSTEM_ID = b.ID_TIPO_RUOLO
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.CHA_TIPO_URP = ''R''
AND b.CHA_TIPO_IE = ''I''
AND b.DTA_FINE IS NULL
AND (a.NUM_LIVELLO > @LivelloRuolo)
AND b.ID_UO = @IDCorrGlobaleUO
AND (d.id_registro = @IDRegistro or d.id_registro is null))

IF(@@ERROR <> 0)
RETURN(1)

DECLARE c3 CURSOR LOCAL FOR
SELECT DISTINCT
s.THING as thing,
@IDGruppo as personorgroup,
(CASE WHEN
(s.accessrights=255 AND (s.cha_tipo_diritto=''P'' OR s.cha_tipo_diritto=''A'' OR s.cha_tipo_diritto=''F''))
THEN
63
ELSE
s.accessrights
END)  as acr,
''A'' as dir
FROM SECURITY s,PROJECT p
WHERE p.system_id = s.thing
AND p.system_id IN (
(SELECT a.system_id
FROM PROJECT a
WHERE ((a.cha_tipo_proj = ''F'' AND a.cha_tipo_fascicolo = ''P'') AND (a.id_registro = @IDRegistro or a.id_registro is null))
) UNION (
SELECT b.system_id
FROM PROJECT b
WHERE b.cha_tipo_proj = ''C''
AND b.id_fascicolo IN (
SELECT system_id
FROM PROJECT
WHERE cha_tipo_proj = ''F''
AND cha_tipo_fascicolo = ''P''
AND (id_registro = @IDRegistro or id_registro is null)))
)
AND s.personorgroup IN (
SELECT
c.SYSTEM_ID
FROM
DPA_TIPO_RUOLO a, DPA_CORR_GLOBALI b, GROUPS c, DPA_L_RUOLO_REG d
WHERE
a.SYSTEM_ID = b.ID_TIPO_RUOLO
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.CHA_TIPO_URP = ''R''
AND b.CHA_TIPO_IE = ''I''
AND b.DTA_FINE IS NULL
AND (a.NUM_LIVELLO >= @LivelloRuolo)
AND b.ID_UO = @IDCorrGlobaleUO
AND (d.id_registro = @IDRegistro or d.id_registro is null))

IF(@@ERROR <> 0)
RETURN(1)

BEGIN
SET @retValue = 0

IF (@PariLivello=0)
BEGIN
OPEN c2
FETCH NEXT FROM c2
INTO @thing, @personorgroup,@acr,@dir

WHILE @@FETCH_STATUS = 0
BEGIN
IF NOT EXISTS
(SELECT *
FROM SECURITY
WHERE THING = @thing AND
PERSONORGROUP = @personorgroup AND
ACCESSRIGHTS = @acr)
INSERT  INTO SECURITY
(THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO)
VALUES
(@thing,
@personorgroup,
@acr,
NULL,
@dir)

IF(@@ERROR <> 0)
CONTINUE

FETCH NEXT FROM c2
INTO @thing, @personorgroup,@acr,@dir
END

CLOSE c2
DEALLOCATE c2

END
ELSE
BEGIN
OPEN c3
FETCH NEXT FROM c3
INTO @thing, @personorgroup,@acr,@dir

WHILE @@FETCH_STATUS = 0
BEGIN
IF NOT EXISTS
(SELECT *
FROM SECURITY
WHERE THING = @thing AND
PERSONORGROUP = @personorgroup AND
ACCESSRIGHTS = @acr)
INSERT  INTO SECURITY
(THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO)
VALUES
(@thing,
@personorgroup,
@acr,
NULL,
@dir)

IF(@@ERROR <> 0)
CONTINUE

FETCH NEXT FROM c3
INTO @thing, @personorgroup,@acr,@dir
END

CLOSE c3
DEALLOCATE c3
END



RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[getAccessRights]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE function [db_user].[getAccessRights](@id_ruolo INT,@id_people INT,@systemid INT)
returns INT
as
begin
declare @risultato INT

SET @risultato = -1

declare @idDocumentoPrincipale int
set @idDocumentoPrincipale = (select id_documento_principale from profile where system_id = @systemid)

if (not @idDocumentoPrincipale is null)
set @systemid = @idDocumentoPrincipale

SELECT @risultato =  max(accessrights)
from security
where thing = @systemid and
PERSONORGROUP in (@id_ruolo,@id_people)

return @risultato
end



' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[createProjectSP]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

create PROCEDURE [db_user].[createProjectSP]
@idpeople int,
@description varchar (2000)  ,
@projectId int out

AS

BEGIN

set @projectId = 0


INSERT INTO PROJECT
(

[DESCRIPTION],
ICONIZED
)
VALUES
(

@description,
''Y''
)


-- Reperimento identity appena immessa
SET @projectId = scope_identity()

if(@@ROWCOUNT > 0)

INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
@projectId,
@idpeople,
0,
NULL,
NULL
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @projectId=0
END

END

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Del_Rec_Dupl_In_Security]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE  PROCEDURE [db_user].[Del_Rec_Dupl_In_Security] AS

/*
--------------------------------------------------------
Ripulisce la tabella SECURITY dei record duplicati
--------------------------------------------------------
*/

DECLARE @fc_THING int
DECLARE @fc_PERSONORGROUP int
DECLARE @fc_ACCESSRIGHTS int
DECLARE @fc_COUNT int

DECLARE @f_THING int
DECLARE @f_PERSONORGROUP int
DECLARE @f_ACCESSRIGHTS int
DECLARE @f_ID_GRUPPO_TRASM int
DECLARE @f_CHA_TIPO_DIRITTO nvarchar(1)

BEGIN
DECLARE cursor_A
CURSOR LOCAL FOR
SELECT DISTINCT
THING,PERSONORGROUP,ACCESSRIGHTS,COUNT(*)
FROM SECURITY
GROUP BY THING,PERSONORGROUP,ACCESSRIGHTS
HAVING COUNT(*) > 1

OPEN cursor_A

FETCH NEXT FROM cursor_A
INTO 	@fc_THING,@fc_PERSONORGROUP,@fc_ACCESSRIGHTS,@fc_COUNT

WHILE @@FETCH_STATUS = 0
BEGIN
SELECT TOP 1
@f_THING = THING,
@f_PERSONORGROUP = PERSONORGROUP,
@f_ACCESSRIGHTS = ACCESSRIGHTS,
@f_ID_GRUPPO_TRASM = ID_GRUPPO_TRASM,
@f_CHA_TIPO_DIRITTO = CHA_TIPO_DIRITTO
FROM
SECURITY
WHERE
thing = @fc_THING
AND PERSONORGROUP = @fc_PERSONORGROUP
AND ACCESSRIGHTS = @fc_ACCESSRIGHTS
ORDER BY ACCESSRIGHTS DESC, CHA_TIPO_DIRITTO DESC


BEGIN TRANSACTION

-- ELIMINA TUTTI I RECORD
DELETE FROM SECURITY
WHERE THING = @fc_THING AND PERSONORGROUP = @fc_PERSONORGROUP

-- QUINDI INSERISCE IL RECORD MEMORIZZATO PRIMA
INSERT INTO SECURITY
(THING, PERSONORGROUP, ACCESSRIGHTS, ID_GRUPPO_TRASM, CHA_TIPO_DIRITTO)
VALUES
(@f_THING,@f_PERSONORGROUP,@f_ACCESSRIGHTS,@f_ID_GRUPPO_TRASM,@f_CHA_TIPO_DIRITTO)

IF(@@ERROR <> 0)
ROLLBACK
ELSE
COMMIT


-- Posizionamento sul record successivo del cursore
FETCH NEXT FROM cursor_A
INTO 	@fc_THING,@fc_PERSONORGROUP,@fc_ACCESSRIGHTS,@fc_COUNT
END

-- Chiusura e deallocazione cursore
CLOSE cursor_A
DEALLOCATE cursor_A

RETURN 0
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[checkSecurityProprietario]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [db_user].[checkSecurityProprietario]
(
	@thingParam INT,
	@idpeopleParam INT,
	@idgroupParam INT
)  
RETURNS INT AS  

BEGIN
  	DECLARE @retValue INT
   	DECLARE @cnt INT
	SET @cnt = 0

	SELECT @cnt = COUNT(*) 
	FROM security s, project b
	WHERE s.thing = @thingParam  AND s.personorgroup IN (@idgroupParam, @idpeopleParam) 
	and s.cha_tipo_diritto=''P''
	and s.thing = b.system_id
	AND b.CHA_TIPO_FASCICOLO = ''P''
      
   	IF (@cnt > 0)  set @retValue = 1
   	ELSE	set @retValue = 0


   	RETURN @retValue

END






' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Clear_Security]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE  PROCEDURE [db_user].[Clear_Security] AS

/*
--------------------------------------------------------
Ripulisce la tabella SECURITY dei record duplicati
--------------------------------------------------------
*/

DECLARE @fc_THING int
DECLARE @fc_PERSONORGROUP int
DECLARE @fc_ACCESSRIGHTS int
DECLARE @fc_COUNT int

DECLARE @f_THING int
DECLARE @f_PERSONORGROUP int
DECLARE @f_ACCESSRIGHTS int
DECLARE @f_ID_GRUPPO_TRASM int
DECLARE @f_CHA_TIPO_DIRITTO nvarchar(1)


BEGIN
DECLARE cursor_A
CURSOR LOCAL FOR
SELECT DISTINCT
THING,PERSONORGROUP,COUNT(*)
FROM SECURITY
GROUP BY THING,PERSONORGROUP
HAVING COUNT(*) > 1

OPEN cursor_A

FETCH NEXT FROM cursor_A
INTO 	@fc_THING,@fc_PERSONORGROUP, @fc_COUNT

WHILE @@FETCH_STATUS = 0
BEGIN
SELECT TOP 1
@f_THING = THING,
@f_PERSONORGROUP = PERSONORGROUP,
@f_ACCESSRIGHTS = ACCESSRIGHTS,
@f_ID_GRUPPO_TRASM = ID_GRUPPO_TRASM,
@f_CHA_TIPO_DIRITTO = CHA_TIPO_DIRITTO
FROM
SECURITY
WHERE
thing = @fc_THING
AND PERSONORGROUP = @fc_PERSONORGROUP
--AND ACCESSRIGHTS = @fc_ACCESSRIGHTS
ORDER BY ACCESSRIGHTS DESC, CHA_TIPO_DIRITTO DESC


BEGIN TRANSACTION

-- ELIMINA TUTTI I RECORD
DELETE FROM SECURITY
WHERE THING = @fc_THING AND PERSONORGROUP = @fc_PERSONORGROUP

-- QUINDI INSERISCE IL RECORD MEMORIZZATO PRIMA
INSERT INTO SECURITY
(THING, PERSONORGROUP, ACCESSRIGHTS, ID_GRUPPO_TRASM, CHA_TIPO_DIRITTO)
VALUES
(@f_THING,@f_PERSONORGROUP,@f_ACCESSRIGHTS,@f_ID_GRUPPO_TRASM,@f_CHA_TIPO_DIRITTO)

IF(@@ERROR <> 0)
ROLLBACK
ELSE
COMMIT


-- Posizionamento sul record successivo del cursore
FETCH NEXT FROM cursor_A
INTO 	@fc_THING,@fc_PERSONORGROUP,@fc_COUNT
END

-- Chiusura e deallocazione cursore
CLOSE cursor_A
DEALLOCATE cursor_A

RETURN 0
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[VISTA_ALLEGATI_DELIBERE]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'CREATE VIEW [dbo].[VISTA_ALLEGATI_DELIBERE] 
AS

SELECT  V.COMMENTS AS DESCRIZIONE_ALLEG, 
	P_DOC.NUM_ANNO_PROTO AS ANNO,
	P_DOC.NUM_PROTO AS NUM_DELIBERA,
	V.DOCNUMBER AS DOCNUMBER_ALLEG, 
	C.PATH AS PATH

FROM  	db_user.VERSIONS V 
		INNER JOIN db_user.PROFILE P_ALL ON V.DOCNUMBER = P_ALL.DOCNUMBER
		INNER JOIN db_user.COMPONENTS C ON V.VERSION_ID = C.VERSION_ID
		INNER JOIN (SELECT * FROM db_user.PROFILE P 
				WHERE P.ID_TIPO_ATTO in (3, 13) AND P.NUM_PROTO IS NOT NULL
			    ) P_DOC 
			ON P_ALL.ID_DOCUMENTO_PRINCIPALE = P_DOC.SYSTEM_ID

WHERE	V.VERSION IN
		      (
		      SELECT MAX(VERSION)
		      FROM db_user.VERSIONS
		      WHERE DOCNUMBER = P_ALL.DOCNUMBER
		      )

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[putFile]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[putFile]
@versionId int,
@filePath varchar(500),
@fileSize int,
@printThumb varchar(64),
@iscartaceo smallint

AS

declare @retValue int
declare @docNumber int

if exists(select version_id from versions where version_id = @versionId)
begin
set @docNumber = (select docnumber from versions where version_id = @versionId)
update 	versions
set 	subversion = ''A'',
cartaceo = @iscartaceo
where 	version_id = @versionId

set @retValue = @@rowcount
end
if (@retValue > 0 and exists(select version_id from components where version_id = @versionId))
begin
update 	components
set 	path = @filePath,
file_size = @fileSize,
var_impronta = @printThumb
where 	version_id = @versionId

set @retValue = @@rowcount
end

if (@retValue > 0 and exists(select docnumber from profile where docnumber = @docNumber))
begin
update 	profile
set 	cha_img = ''1''
where	docnumber = @docNumber

set @retValue = @@rowcount
end
return @retValue
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[CountAllegati_BY_DocNumber]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
create  function [db_user].[CountAllegati_BY_DocNumber](@id int)
returns int
as
begin
declare @risultato int

SELECT @risultato=
COUNT(V.VERSION_ID)
FROM PROFILE P INNER JOIN VERSIONS V ON P.DOCNUMBER = V.DOCNUMBER
WHERE (P.DOCNUMBER = @id AND V.VERSION = 0) OR P.ID_DOCUMENTO_PRINCIPALE = @id

return @risultato
end
' 
END

GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[addNuovaVersione]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE  PROCEDURE [db_user].[addNuovaVersione]
@subVersion  VARCHAR(1),
@idPeople INT,
@docNumber INT,
@descrizione VARCHAR(200),
@cartaceo INT,
@versionID INT OUT

AS


declare @identityVersion INT
declare @version INT

BEGIN

SET @version  =  (SELECT TOP 1 VERSION
FROM VERSIONS
WHERE DOCNUMBER = @docNumber
ORDER BY VERSION DESC)

SET @version =@version+1

BEGIN

INSERT INTO VERSIONS
(

DOCNUMBER,
VERSION,
SUBVERSION,
VERSION_LABEL,
AUTHOR,
TYPIST,
DTA_CREAZIONE,
COMMENTS,
CARTACEO
)
VALUES
(

@docNumber,
@version,
@subVersion,
@version,
@idPeople,
@idPeople,
getdate(),
@descrizione,
@cartaceo
)
IF (@@ROWCOUNT = 0)
BEGIN
SET @versionID=0
RETURN
END

SET @identityVersion = SCOPE_IDENTITY()

SET @versionID = @identityVersion
END



BEGIN

INSERT INTO COMPONENTS
(
VERSION_ID,
DOCNUMBER,
FILE_SIZE
)
VALUES
(
@versionID,
@docNumber,
0
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @versionID=0
RETURN
END

END

END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[createAllegato]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[createAllegato]
@idDocumentoPrincipale int,
@idPeople int,
@comments varchar(200),
@numeroPagine int,
@idProfile int out,
@versionId int out

AS

BEGIN

DECLARE @idDocType INT
SET @idDocType = (SELECT DOCUMENTTYPE FROM PROFILE WHERE SYSTEM_ID = @idDocumentoPrincipale)

INSERT INTO Profile
(
TYPIST,
AUTHOR,
CHA_TIPO_PROTO,
CHA_DA_PROTO,
DOCUMENTTYPE,
CREATION_DATE,
CREATION_TIME,
ID_DOCUMENTO_PRINCIPALE
)
VALUES
(

@idpeople,
@idpeople,
''G'',
''0'',
@idDocType,
GETDATE(),
GETDATE(),
@idDocumentoPrincipale
)

SET @idProfile = scope_identity()
UPDATE PROFILE
SET DOCNUMBER = @idProfile
WHERE SYSTEM_ID = @idProfile

IF (@@ROWCOUNT > 0)
BEGIN
INSERT INTO VERSIONS
(
DOCNUMBER,
VERSION,
SUBVERSION,
VERSION_LABEL,
AUTHOR,
TYPIST,
COMMENTS,
NUM_PAG_ALLEGATI,
DTA_CREAZIONE,
CHA_DA_INVIARE
)
VALUES
(
@idProfile,
1,
''!'',
''1'',
@idPeople,
@idPeople,
@comments,
@numeroPagine,
GETDATE(),
1
)

SET @versionId = scope_identity()
INSERT INTO COMPONENTS
(
VERSION_ID,
DOCNUMBER,
FILE_SIZE
)
VALUES
(
@versionId,
@idProfile,
0
)
END
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[CARICA_DPA_REG_FASC]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[CARICA_DPA_REG_FASC] AS

DECLARE @sysCurrTitolario int
DECLARE @sysCurrRegistro INT
DECLARE @countFasc int
DECLARE @sysCurrAmm int
DECLARE @sysCurrRegistroNodoTit INT


BEGIN


DECLARE currAmm -- CURSORE CHE SCORRE LE AMMINISTRAZIONI
CURSOR LOCAL FOR
SELECT system_id
FROM db_user.DPA_AMMINISTRA

OPEN currAmm
FETCH NEXT FROM currAmm
INTO @sysCurrAmm


WHILE @@FETCH_STATUS = 0
BEGIN

DECLARE currTit -- CURSORE CHE SCORRE I NODI DI TITOLARIO
CURSOR LOCAL FOR
SELECT system_id, id_registro
FROM db_user.PROJECT
WHERE CHA_TIPO_PROJ = ''T''
AND ID_AMM = @sysCurrAmm order by id_registro

OPEN currTit
FETCH NEXT FROM currTit
INTO @sysCurrTitolario, @sysCurrRegistroNodoTit

WHILE @@FETCH_STATUS = 0
BEGIN

-- si il modo di titolario ha id_registro NULL allora nella tabella dpa_reg_fasc
--dovranno essere inseriti tanti record quanti sono i registri contentuti nella dpa_el_registri

IF (@sysCurrRegistroNodoTit IS NULL)

BEGIN

DECLARE currReg -- CURSORE CHE SCORRE I REGISTRI
CURSOR LOCAL FOR
SELECT system_id
FROM db_user.DPA_EL_REGISTRI
WHERE ID_AMM = @sysCurrAmm and cha_rf= ''0'';

OPEN currReg
FETCH NEXT FROM currReg INTO @sysCurrRegistro

WHILE @@FETCH_STATUS = 0

BEGIN
-- Si calcola il NUMERO DEL FASCICOLO relativo al nodo corrente	SUL REGISTRO CORRENTE
SET @countFasc = (SELECT MAX(NUM_FASCICOLO)
FROM db_user.PROJECT
WHERE ID_PARENT = @sysCurrTitolario AND CHA_TIPO_FASCICOLO = ''P'' AND ANNO_CREAZIONE = YEAR(GETDATE())
and ID_REGISTRO = @sysCurrRegistro)

IF (@countFasc IS NULL)
SET @countFasc = 0

BEGIN
INSERT INTO DPA_REG_FASC
(
ID_TITOLARIO,
ID_REGISTRO,
NUM_RIF

)
VALUES
(
@sysCurrTitolario,
@sysCurrRegistro,
@countFasc+1 -- QUI  mettiamo il MAX (NUM FASCICOLO) - dafault a 0 per il pregresso

)

FETCH NEXT FROM currReg INTO @sysCurrRegistro

END

END

CLOSE currReg
DEALLOCATE currReg

-- CASO DEL REGISTRO NULL

SET @countFasc = (SELECT MAX(NUM_FASCICOLO)
FROM db_user.PROJECT
WHERE ID_PARENT = @sysCurrTitolario AND CHA_TIPO_FASCICOLO = ''P'' AND ANNO_CREAZIONE = YEAR(GETDATE())
and ID_REGISTRO IS NULL)

IF (@countFasc IS NULL)
SET @countFasc = 0

INSERT INTO DPA_REG_FASC
(
ID_TITOLARIO,
ID_REGISTRO,
NUM_RIF

)
VALUES
(
@sysCurrTitolario,
NULL,
@countFasc+1 -- QUI mettiamo IL MAX (NUM FASCICOLO)

)
END

ELSE  -- SE IL NODO ? ASSOCIATO AD UN SOLO REGISTRO

BEGIN

SET @countFasc = (SELECT MAX(NUM_FASCICOLO)
FROM db_user.PROJECT
WHERE ID_PARENT = @sysCurrTitolario AND CHA_TIPO_FASCICOLO = ''P'' AND ANNO_CREAZIONE = YEAR(GETDATE())
and ID_REGISTRO= @sysCurrRegistroNodoTit)

IF (@countFasc IS NULL)
SET @countFasc = 0

INSERT INTO DPA_REG_FASC
(
ID_TITOLARIO,
ID_REGISTRO,
NUM_RIF

)
VALUES
(
@sysCurrTitolario,
@sysCurrRegistroNodoTit,
@countFasc+1

)
END

FETCH NEXT FROM currTit
INTO @sysCurrTitolario, @sysCurrRegistroNodoTit

END
CLOSE currTit
DEALLOCATE currTit

END
FETCH NEXT FROM currAmm
INTO @sysCurrAmm
CLOSE currAmm
DEALLOCATE currAmm
END

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[CARICA_FORMATO_DOCUMENTI]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[CARICA_FORMATO_DOCUMENTI] AS
DECLARE @sysCurrAmm INT;
BEGIN


DECLARE currAmm -- CURSORE CHE SCORRE LE AMMINISTRAZIONI
CURSOR LOCAL FOR
SELECT system_id
FROM db_user.DPA_AMMINISTRA

OPEN currAmm
FETCH NEXT FROM currAmm
INTO @sysCurrAmm

WHILE @@FETCH_STATUS = 0

BEGIN

if exists (select * from [db_user].[DPA_FORMATI_DOCUMENTO] where FILE_EXTENSION = ''PDF'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Adobe Acrobat'',
''PDF'',
0,
2,
0,
0
)
END







IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''TXT'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''File di testo'',
''TXT'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''P7M'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''File firmati digitalmente'',
''P7M'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''BMP'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Immagine Bitmap'',
''BMP'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''JPG'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Immagine JPG'',
''JPG'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''TIF'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Immagine TIF'',
''TIF'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''TIFF'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Immagine TIFF'',
''TIFF'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''PPT'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Microsoft PowerPoint'',
''PPT'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''DOC'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Microsoft Word'',
''DOC'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''RTF'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Rich Text Format'',
''RTF'',
0,
2,
0,
0
)
END


IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''XLS'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Microsoft Excel'',
''XLS'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''HTM'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Web Publishing Browser (htm)'',
''HTM'',
0,
2,
0,
0
)
END

IF EXISTS(select * from [db_user].[DPA_FORMATI_DOCUMENTO] where  FILE_EXTENSION = ''HTML'')
BEGIN
INSERT INTO [db_user].[DPA_FORMATI_DOCUMENTO]
(
[ID_AMMINISTRAZIONE],
[FILE_TYPE_USED],
[DESCRIPTION],
[FILE_EXTENSION],
[MAX_FILE_SIZE],
[MAX_FILE_SIZE_ALERT_MODE],
[CONTAINS_FILE_MODEL],
[DOCUMENT_TYPE]
)
VALUES
(
@sysCurrAmm,
1,
''Web Publishing Browser (html)'',
''HTML'',
0,
2,
0,
0
)
END

FETCH NEXT FROM currAmm
INTO @sysCurrAmm
END
CLOSE currAmm
DEALLOCATE currAmm
END


SET QUOTED_IDENTIFIER OFF
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[CARICA_TIPO_DOC_RIS]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[CARICA_TIPO_DOC_RIS] AS
DECLARE @sysCurrAmm INT;
BEGIN


DECLARE currAmm -- CURSORE CHE SCORRE LE AMMINISTRAZIONI
CURSOR LOCAL FOR
SELECT system_id
FROM db_user.DPA_AMMINISTRA

OPEN currAmm
FETCH NEXT FROM currAmm
INTO @sysCurrAmm

WHILE @@FETCH_STATUS = 0

BEGIN

if (exists (select * from [db_user].[DPA_TIPO_FUNZIONE] where VAR_COD_TIPO=''DOC_RIS''))
BEGIN
INSERT INTO [db_user].[DPA_TIPO_FUNZIONE](VAR_COD_TIPO, VAR_DESC_TIPO_FUN, CHA_VIS, ID_AMM)
VALUES (''DOC_RIS'', ''DOCUMENTAZIONE RISERVATA'', ''1'', @sysCurrAmm)
END


FETCH NEXT FROM currAmm
INTO @sysCurrAmm
END
CLOSE currAmm
DEALLOCATE currAmm
END


SET QUOTED_IDENTIFIER OFF
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_IMPOSTA_UO_CONTENITORE]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[SP_IMPOSTA_UO_CONTENITORE]  @id_amm int as

DECLARE @num_livello int
DECLARE @system_id varchar(32)
DECLARE @var_desc_amm varchar(32)
DECLARE @var_codice_amm varchar(32)
DECLARE @identity int


BEGIN

SELECT *
FROM DPA_CORR_GLOBALI
WHERE cha_tipo_urp = ''U'' AND CHA_TIPO_IE = ''I''
AND ID_AMM = @id_amm and  NUM_LIVELLO = 0 and id_parent = 0

IF @@ROWCOUNT > 1

BEGIN -- inizio 1 begin

SELECT  @var_desc_amm=VAR_DESC_AMM,  @var_codice_amm=VAR_CODICE_AMM
FROM DPA_AMMINISTRA WHERE SYSTEM_ID = @id_amm

SELECT * FROM  DPA_CORR_GLOBALI WHERE VAR_CODICE = @var_codice_amm
OR VAR_COD_RUBRICA = @var_codice_amm  AND ID_AMM = @id_amm

IF @@ROWCOUNT = 0

BEGIN -- inizio 2 begin

UPDATE DPA_CORR_GLOBALI
SET NUM_LIVELLO = NUM_LIVELLO+1
WHERE cha_tipo_urp = ''U'' AND CHA_TIPO_IE = ''I'' AND ID_AMM = @id_amm

--INSERISCO IL CORRISPONDENTE
INSERT INTO DPA_CORR_GLOBALI
(
ID_AMM,
VAR_COD_RUBRICA,
VAR_DESC_CORR,
ID_PARENT,
NUM_LIVELLO,
VAR_CODICE,
CHA_TIPO_IE,
CHA_TIPO_CORR,
CHA_TIPO_URP
)
VALUES (
@id_amm,
@var_codice_amm,
@var_desc_amm,
0,
0,
@var_codice_amm,
''I'',
''S'',
''U''
)

SET @identity = SCOPE_IDENTITY()

UPDATE DPA_CORR_GLOBALI
SET ID_PARENT = @identity
WHERE cha_tipo_urp = ''U'' AND CHA_TIPO_IE = ''I'' AND ID_AMM = @id_amm
AND NUM_LIVELLO = 1

END	-- fine 2 begin
ELSE

print ''ATTENZIONE:  VAR_CODICE O CODICE RUBRICA PRESENTI - LA PROCEDURA TERMINA QUI''

END

END


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[CARICA_DOCUMENTI_RISERVATI]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[CARICA_DOCUMENTI_RISERVATI] AS

DECLARE @sysCurrAmm INT;
DECLARE @syscurrTipoFunz INT;

BEGIN
DECLARE currAmm -- CURSORE CHE SCORRE LE AMMINISTRAZIONI
CURSOR LOCAL FOR
SELECT system_id
FROM db_user.DPA_AMMINISTRA

OPEN currAmm
FETCH NEXT FROM currAmm
INTO @sysCurrAmm

WHILE @@FETCH_STATUS = 0

BEGIN
DECLARE currTipoFunz -- CURSORE CHE PRENDE L''ID del tipo funzione
CURSOR LOCAL FOR
SELECT SYSTEM_ID
FROM db_user.DPA_TIPO_FUNZIONE
WHERE VAR_COD_TIPO=''DOC_RIS'' and ID_AMM=@sysCurrAmm

OPEN currTipoFunz
FETCH NEXT FROM currTipoFunz
INTO @syscurrTipoFunz

WHILE @@FETCH_STATUS = 0
BEGIN
if (exists (select * from [db_user].[DPA_FUNZIONI] where COD_FUNZIONE=''DO_FASC_PRIVATO''))
BEGIN
INSERT INTO [db_user].[DPA_FUNZIONI](ID_AMM,COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (@sysCurrAmm, ''DO_FASC_PRIVATO'', ''DO_FASC_PRIVATO'', @syscurrTipoFunz)
END

if (exists (select * from [db_user].[DPA_FUNZIONI] where COD_FUNZIONE=''DO_PROTO_PRIVATO''))
BEGIN
INSERT INTO [db_user].[DPA_FUNZIONI] (ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (@sysCurrAmm, ''DO_PROTO_PRIVATO'', ''DO_PROTO_PRIVATO'', @syscurrTipoFunz)
END

if (exists (select * from [db_user].[DPA_FUNZIONI] where COD_FUNZIONE=''DO_CREA_PRIVATO''))
BEGIN
INSERT INTO [db_user].[DPA_FUNZIONI] (ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (@sysCurrAmm, ''DO_CREA_PRIVATO'', ''DO_CREA_PRIVATO'', @syscurrTipoFunz)
END

if (exists (select * from [db_user].[DPA_FUNZIONI] where COD_FUNZIONE=''DO_PROTO_PRIVATO_SEMPL''))
BEGIN
INSERT INTO [db_user].[DPA_FUNZIONI] (ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (@sysCurrAmm, ''DO_PROTO_PRIVATO_SEMPL'', ''DO_PROTO_PRIVATO_SEMPL'', @syscurrTipoFunz)
END

FETCH NEXT FROM currTipoFunz
INTO @syscurrTipoFunz

END
CLOSE currTipoFunz
DEALLOCATE currTipoFunz

FETCH NEXT FROM currAmm
INTO @sysCurrAmm
END
CLOSE currAmm
DEALLOCATE currAmm
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[RDE_Utente]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [db_user].[RDE_Utente]
AS
SELECT 
	DISTINCT A.USER_ID AS IdUtente, 
	A.SYSTEM_ID AS IdUtenteRemoto,   
	B.ID_AMM  AS IdAmministrazioneRemoto,
	B.VAR_COGNOME AS Cognome, 
	B.VAR_NOME AS Nome,
	D.var_codice_amm AS CodAmministrazioneRemoto
FROM 
	db_user.DPA_CORR_GLOBALI B, 
	db_user.PEOPLEGROUPS C, 
	db_user.PEOPLE A,
	db_user.dpa_amministra D
WHERE 
	A.SYSTEM_ID = B.ID_PEOPLE
	AND A.id_amm = D.system_id
	AND (B.CHA_TIPO_URP = ''P'')  
	AND (B.CHA_TIPO_IE = ''I'') 
	AND (B.DTA_FINE IS NULL)
	AND (A.SYSTEM_ID = C.PEOPLE_SYSTEM_ID AND C.GROUPS_SYSTEM_ID
	IN (SELECT N.ID_GRUPPO 
		FROM db_user.DPA_TIPO_F_RUOLO M, db_user.DPA_CORR_GLOBALI N 
		WHERE ID_TIPO_FUNZ IN 
			(select id_tipo_funzione from db_user.DPA_FUNZIONI where cod_funzione = ''PROTO_EME'') AND M.ID_RUOLO_IN_UO = N.SYSTEM_ID)
	)

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[RDE_Utente_2]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW [db_user].[RDE_Utente_2]
AS
SELECT
DISTINCT A.USER_ID AS IdUtente,
A.SYSTEM_ID AS IdUtenteRemoto,
B.ID_AMM  AS IdAmministrazioneRemoto,
B.VAR_COGNOME AS Cognome,
B.VAR_NOME AS Nome,
D.var_codice_amm AS CodAmministrazioneRemoto
FROM
db_user.DPA_CORR_GLOBALI B,
db_user.PEOPLEGROUPS C,
db_user.PEOPLE A,
db_user.dpa_amministra D
WHERE
A.SYSTEM_ID = B.ID_PEOPLE
AND A.id_amm = D.system_id
AND (B.CHA_TIPO_URP = ''P'')
AND (B.CHA_TIPO_IE = ''I'')
AND (B.DTA_FINE IS NULL)
AND (A.SYSTEM_ID = C.PEOPLE_SYSTEM_ID AND C.GROUPS_SYSTEM_ID
IN (SELECT N.ID_GRUPPO
FROM db_user.DPA_TIPO_F_RUOLO M, db_user.DPA_CORR_GLOBALI N
WHERE ID_TIPO_FUNZ IN
(select id_tipo_funzione from db_user.DPA_FUNZIONI where cod_funzione = ''PROTO_EME'') AND M.ID_RUOLO_IN_UO = N.SYSTEM_ID)
)

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[uo_ammin]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [db_user].[uo_ammin]  @id_amm int as
-- dichiarazione variabili
DECLARE @num_livello int
DECLARE @system_id varchar(32)
DECLARE @var_desc_amm varchar(32)
DECLARE @var_codice_amm varchar(32)
DECLARE @identity int
-- fine dichiarazione
BEGIN
DECLARE curr2 CURSOR FOR
SELECT DISTINCT num_livello
FROM db_user.DPA_CORR_GLOBALI
WHERE cha_tipo_urp = ''U'' AND CHA_TIPO_IE = ''I'' AND ID_AMM = @id_amm
ORDER BY NUM_LIVELLO DESC
OPEN curr2

FETCH NEXT FROM curr2 INTO @num_livello
-- finch?i sono record da prelevare
WHILE @@FETCH_STATUS = 0
BEGIN
UPDATE db_user.DPA_CORR_GLOBALI
SET NUM_LIVELLO = @num_livello+1
WHERE NUM_LIVELLO = @num_livello
AND cha_tipo_urp = ''U'' AND CHA_TIPO_IE = ''I'' AND ID_AMM = @id_amm

FETCH NEXT FROM curr2 INTO @num_livello
END

CLOSE curr2
DEALLOCATE curr2
SELECT  @system_id=SYSTEM_ID,
@var_desc_amm=VAR_DESC_AMM,
@var_codice_amm=VAR_CODICE_AMM
FROM db_user.DPA_AMMINISTRA WHERE SYSTEM_ID = @id_amm

SELECT SYSTEM_ID
FROM db_user.DPA_CORR_GLOBALI WHERE VAR_COD_RUBRICA = @var_codice_amm
IF @@ROWCOUNT = 0

BEGIN
SELECT SYSTEM_ID
FROM db_user.DPA_CORR_GLOBALI WHERE VAR_CODICE = @var_codice_amm
IF @@ROWCOUNT = 0
BEGIN
--INSERISCO IL CORRISPONDENTE
INSERT INTO db_user.DPA_CORR_GLOBALI
(

ID_AMM,
VAR_COD_RUBRICA,
VAR_DESC_CORR,
ID_PARENT,
NUM_LIVELLO,
VAR_CODICE,
CHA_TIPO_IE,
CHA_TIPO_CORR,
CHA_TIPO_URP
)
VALUES (
@id_amm,
@var_codice_amm,
@var_desc_amm,
0,
0,
@var_codice_amm,
''I'',
''S'',
''U''
)

SET @identity = SCOPE_IDENTITY()

UPDATE db_user.DPA_CORR_GLOBALI
SET ID_PARENT = @identity
WHERE cha_tipo_urp = ''U'' AND CHA_TIPO_IE = ''I'' AND ID_AMM = @id_amm
AND NUM_LIVELLO = 1
END
ELSE
print ''ATTENZIONE: VAR_CODICE GI?RESENTE - LA PROCEDURA TERMINA''

END
ELSE
print ''ATTENZIONE: CODICE RUBRICA GI?RESENTE - LA PROCEDURA TERMINA''

END


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Sp_Dpa_Uo_Reg]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[Sp_Dpa_Uo_Reg]
@idUO int
AS


DECLARE @ReturnValue int
DECLARE @record_corr_ruolo int
DECLARE @record_corr_registro int
DECLARE @rec int


BEGIN
DELETE FROM DPA_UO_REG WHERE id_uo = @idUO
END

DECLARE cursor_ruoli

CURSOR FOR
SELECT system_id
FROM DPA_CORR_GLOBALI
WHERE
cha_tipo_urp = ''R''
AND cha_tipo_ie = ''I''
AND dta_fine IS NULL
AND id_old = 0
AND id_uo = @idUO

OPEN cursor_ruoli
FETCH NEXT FROM cursor_ruoli
INTO @record_corr_ruolo


WHILE @@FETCH_STATUS = 0
BEGIN

DECLARE cursor_registri

CURSOR FOR
SELECT id_registro
FROM DPA_L_RUOLO_REG A, DPA_EL_REGISTRI B
WHERE  A.ID_REGISTRO = B.SYSTEM_ID AND A.id_ruolo_in_uo = @record_corr_ruolo
AND B.CHA_RF = 0;


OPEN cursor_registri
FETCH NEXT FROM cursor_registri
INTO @record_corr_registro


WHILE @@FETCH_STATUS = 0
BEGIN

SET @rec = (SELECT count(system_id)
FROM DPA_UO_REG
WHERE ID_UO = @idUO
AND ID_REGISTRO = @record_corr_registro)

IF (@rec = 0)
BEGIN
INSERT INTO DPA_UO_REG
(ID_UO, ID_REGISTRO)
VALUES
(@idUO, @record_corr_registro)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=1
RETURN
END
END

-- Posizionamento sul record successivo del cursore cursor_registri
FETCH NEXT FROM cursor_registri
INTO 	@record_corr_registro
END

-- Chiusura e deallocazione cursore cursor_registri
CLOSE cursor_registri
DEALLOCATE cursor_registri

-- Posizionamento sul record successivo del cursore cursor_ruoli
FETCH NEXT FROM cursor_ruoli
INTO 	@record_corr_ruolo
END

-- Chiusura e deallocazione cursore cursor_uo
CLOSE cursor_ruoli
DEALLOCATE cursor_ruoli

RETURN @ReturnValue
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Sp_Fill_Dpa_Uo_Reg]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[Sp_Fill_Dpa_Uo_Reg] AS
DECLARE @record_corr_uo int
DECLARE @record_corr_ruolo int
DECLARE @record_corr_registro int
DECLARE @rec int

BEGIN
DECLARE cursor_uo

CURSOR FOR
SELECT system_id
FROM DPA_CORR_GLOBALI
WHERE
cha_tipo_urp = ''U''
AND cha_tipo_ie = ''I''
AND dta_fine IS NULL
AND id_old = 0

OPEN cursor_uo
FETCH NEXT FROM cursor_uo
INTO @record_corr_uo


WHILE @@FETCH_STATUS = 0
BEGIN

DECLARE cursor_ruoli

CURSOR FOR
SELECT system_id
FROM DPA_CORR_GLOBALI
WHERE
cha_tipo_urp = ''R''
AND cha_tipo_ie = ''I''
AND dta_fine IS NULL
AND id_old = 0
AND id_uo = @record_corr_uo

OPEN cursor_ruoli
FETCH NEXT FROM cursor_ruoli
INTO @record_corr_ruolo


WHILE @@FETCH_STATUS = 0
BEGIN

DECLARE cursor_registri

CURSOR FOR
SELECT id_registro
FROM DPA_L_RUOLO_REG A, DPA_EL_REGISTRO B
WHERE A.id_ruolo_in_uo = @record_corr_ruolo AND
A.ID_REGISTRO = B.SYSTEM_ID AND B.CHA_RF = ''0''

OPEN cursor_registri
FETCH NEXT FROM cursor_registri
INTO @record_corr_registro


WHILE @@FETCH_STATUS = 0
BEGIN

SET @rec = (SELECT count(system_id)
FROM DPA_UO_REG
WHERE ID_UO = @record_corr_uo
AND ID_REGISTRO = @record_corr_registro)

IF (@rec = 0)
BEGIN
INSERT INTO DPA_UO_REG
(ID_UO, ID_REGISTRO)
VALUES
(@record_corr_uo, @record_corr_registro)
END

-- Posizionamento sul record successivo del cursore cursor_registri
FETCH NEXT FROM cursor_registri
INTO 	@record_corr_registro
END

-- Chiusura e deallocazione cursore cursor_registri
CLOSE cursor_registri
DEALLOCATE cursor_registri

-- Posizionamento sul record successivo del cursore cursor_ruoli
FETCH NEXT FROM cursor_ruoli
INTO 	@record_corr_ruolo
END

-- Chiusura e deallocazione cursore cursor_uo
CLOSE cursor_ruoli
DEALLOCATE cursor_ruoli

-- Posizionamento sul record successivo del cursore cursor_uo
FETCH NEXT FROM cursor_uo
INTO 	@record_corr_uo
END

-- Chiusura e deallocazione cursore cursor_uo
CLOSE cursor_uo
DEALLOCATE cursor_uo
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_DOC_E2]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE  PROCEDURE [db_user].[SP_EREDITA_VIS_DOC_E2]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

/*
.......................................................................................
SP_EREDITA_VIS_DOC_E2        		ESTENSIONE 2
.......................................................................................
*/

DECLARE @IDUOInferiore int
DECLARE @id_uo_cursore int
DECLARE @retValue int

BEGIN

SET @retValue = 0

DECLARE IDUOInferiori
CURSOR LOCAL FOR
select system_id
from dpa_corr_globali
where cha_tipo_urp = ''U''
and cha_tipo_ie = ''I''
and dta_fine is null
and id_old = 0
and id_parent = @IDCorrGlobaleUO

IF(@@ERROR <> 0)
RETURN 1

OPEN IDUOInferiori
FETCH NEXT FROM IDUOInferiori
INTO @id_uo_cursore

WHILE @@FETCH_STATUS = 0
BEGIN
-- ricerca i ruoli in questa UO e le sue UO figlie
EXECUTE @retValue=SP_EREDITA_VIS_DOC @id_uo_cursore, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

FETCH NEXT FROM IDUOInferiori
INTO @id_uo_cursore
END

CLOSE IDUOInferiori
DEALLOCATE IDUOInferiori

RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[getInADL]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE FUNCTION [db_user].[getInADL] (@sysID int, @typeID char,@idGruppo INT,@idPeople INT)
RETURNS INT
AS
BEGIN --generale
DECLARE @risultato int
set @risultato = 0

begin --interno

IF (@typeID = ''D'')
BEGIN
set @risultato = (SELECT DISTINCT(SYSTEM_ID) FROM DPA_AREA_LAVORO WHERE ID_PROFILE = @sysID
AND ID_PEOPLE =@idPeople and ID_RUOLO_IN_UO = (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_GRUPPO = @idGruppo))
IF (@risultato > 0)
BEGIN
set @risultato = 1
END
END
IF (@typeID = ''F'')
BEGIN
set @risultato = (SELECT DISTINCT(SYSTEM_ID) FROM DPA_AREA_LAVORO WHERE ID_PROJECT = @sysID
AND ID_PEOPLE =@idPeople and ID_RUOLO_IN_UO = (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_GRUPPO = @idGruppo))
IF (@risultato > 0)
BEGIN
set @risultato = 1
END
END

end

RETURN @risultato;
END
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_EREDITA_VIS_FASC_E3]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE  PROCEDURE [db_user].[SP_EREDITA_VIS_FASC_E3]
@IDCorrGlobaleUO int,
@IDCorrGlobaleRuolo int,
@IDGruppo int,
@LivelloRuolo int,
@IDRegistro int,
@PariLivello int
AS

/*
.......................................................................................
SP_EREDITA_VIS_FASC_E3        		ESTENSIONE 3
.......................................................................................
*/

DECLARE @IDUOInferiore int
DECLARE @id_uo_cursore int
DECLARE @retValue int

BEGIN

SET @retValue = 0

DECLARE IDUOInferiori
CURSOR LOCAL FOR
select system_id
from dpa_corr_globali
where cha_tipo_urp = ''U''
and cha_tipo_ie = ''I''
and dta_fine is null
and id_old = 0
and id_parent = @IDCorrGlobaleUO

IF(@@ERROR <> 0)
RETURN(1)

OPEN IDUOInferiori
FETCH NEXT FROM IDUOInferiori
INTO @id_uo_cursore

WHILE @@FETCH_STATUS = 0
BEGIN
-- Prende tutti i fascicoli PROCEDIMENTALI dei ruoli inferiori/pari livello della UO data
EXECUTE @retValue=SP_EREDITA_VIS_FASC_E1 @id_uo_cursore, @IDCorrGlobaleRuolo, @IDGruppo, @LivelloRuolo, @IDRegistro, @PariLivello

IF(@retValue = 1)
CONTINUE

FETCH NEXT FROM IDUOInferiori
INTO @id_uo_cursore
END

CLOSE IDUOInferiori
DEALLOCATE IDUOInferiori

RETURN @retValue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[RDE_Autorizzazione]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW  [db_user].[RDE_Autorizzazione]
AS
SELECT 
	DISTINCT db_user.DPA_EL_REGISTRI.SYSTEM_ID AS IdRegistroRemoto,  
	db_user.PEOPLE.SYSTEM_ID AS IdUtenteRemoto,
	db_user.DPA_EL_REGISTRI.VAR_CODICE AS CodRegistroRemoto
FROM    
	db_user.DPA_TIPO_F_RUOLO INNER JOIN
	db_user.DPA_TIPO_FUNZIONE ON db_user.DPA_TIPO_F_RUOLO.ID_TIPO_FUNZ = db_user.DPA_TIPO_FUNZIONE.SYSTEM_ID INNER JOIN
	db_user.DPA_EL_REGISTRI INNER JOIN
	db_user.DPA_L_RUOLO_REG ON db_user.DPA_EL_REGISTRI.SYSTEM_ID = db_user.DPA_L_RUOLO_REG.ID_REGISTRO INNER JOIN
	db_user.DPA_CORR_GLOBALI ON db_user.DPA_L_RUOLO_REG.ID_RUOLO_IN_UO = db_user.DPA_CORR_GLOBALI.SYSTEM_ID INNER JOIN
	db_user.PEOPLEGROUPS ON db_user.DPA_CORR_GLOBALI.ID_GRUPPO = db_user.PEOPLEGROUPS.GROUPS_SYSTEM_ID INNER JOIN
	db_user.PEOPLE ON db_user.PEOPLEGROUPS.PEOPLE_SYSTEM_ID = db_user.PEOPLE.SYSTEM_ID ON
	db_user.DPA_TIPO_F_RUOLO.ID_RUOLO_IN_UO = db_user.DPA_L_RUOLO_REG.ID_RUOLO_IN_UO
WHERE  
	(db_user.DPA_TIPO_FUNZIONE.SYSTEM_ID IN 
	(select id_tipo_funzione from db_user.DPA_FUNZIONI where cod_funzione = ''PROTO_EME'')) 
	AND (db_user.DPA_CORR_GLOBALI.DTA_FINE IS NULL) 
	AND (db_user.DPA_CORR_GLOBALI.CHA_TIPO_URP = ''R'')	
        AND (db_user.DPA_EL_REGISTRI.cha_rf IS NULL OR db_user.DPA_EL_REGISTRI.cha_rf = ''0'')
        AND (db_user.DPA_EL_REGISTRI.cha_disabilitato IS NULL OR db_user.DPA_EL_REGISTRI.cha_disabilitato = ''0'')

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Vardescribe]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

CREATE   FUNCTION [db_user].[Vardescribe] (@sysid INT, @typeTable VARCHAR(1000)) RETURNS VARCHAR (8000)
AS
BEGIN
declare @outcome varchar(8000)
set @outcome=''''
declare @tipo varchar(1)
declare @num_proto int
DECLARE @TMPVAR VARCHAR(4000)

--MAIN
IF(@typeTable = ''PEOPLENAME'')
BEGIN
SET @outcome = (SELECT VAR_DESC_CORR FROM DPA_CORR_GLOBALI WHERE ID_PEOPLE = @sysid AND CHA_TIPO_URP=''P'' AND CHA_TIPO_IE = ''I'')
END
IF(@typeTable = ''GROUPNAME'')
BEGIN
SET @outcome = (SELECT VAR_DESC_CORR  FROM DPA_CORR_GLOBALI WHERE SYSTEM_ID = @sysid AND CHA_TIPO_URP=''R'')
END
IF(@typeTable = ''DESC_RUOLO'')
BEGIN
SET @outcome = (SELECT VAR_DESC_CORR  FROM DPA_CORR_GLOBALI WHERE ID_GRUPPO= @sysid AND CHA_TIPO_URP=''R'')
END
IF(@typeTable = ''RAGIONETRASM'')
BEGIN
SET @outcome = (SELECT VAR_DESC_RAGIONE  FROM DPA_RAGIONE_TRASM WHERE SYSTEM_ID= @sysid)
END
IF(@typeTable = ''TIPO_RAGIONE'')
BEGIN
SET @outcome = (SELECT CHA_TIPO_RAGIONE FROM DPA_RAGIONE_TRASM WHERE SYSTEM_ID= @sysid)
END
IF(@typeTable = ''DATADOC'')
BEGIN
begin
SET @tipo = (SELECT CHA_TIPO_PROTO  FROM PROFILE WHERE SYSTEM_ID= @sysid)
set @num_proto =(SELECT isnull(num_proto,0)  FROM PROFILE WHERE SYSTEM_ID= @sysid)
end
IF(@tipo is not null and (@tipo  IN (''A'',''P'',''I'') and @num_proto < > 0))
BEGIN
SET @outcome = (SELECT convert(varchar,DTA_PROTO,103) FROM PROFILE WHERE SYSTEM_ID= @sysid)
END
ELSE
BEGIN
SET @outcome = (SELECT convert(varchar,CREATION_DATE,103) FROM PROFILE WHERE SYSTEM_ID= @sysid)
END
END
IF(@typeTable = ''CHA_TIPO_PROTO'')
BEGIN
SET @outcome = (SELECT CHA_TIPO_PROTO FROM PROFILE WHERE SYSTEM_ID= @sysid)
END
IF(@typeTable = ''NUMPROTO'')
BEGIN
SET @outcome = (SELECT NUM_PROTO FROM PROFILE WHERE SYSTEM_ID= @sysid)
END
IF(@typeTable = ''CODFASC'')
BEGIN
SET @outcome = (SELECT VAR_CODICE FROM PROJECT WHERE SYSTEM_ID= @sysid)
END
IF(@typeTable = ''DESC_OGGETTO'')
BEGIN
SET @outcome = (SELECT VAR_PROF_OGGETTO FROM PROFILE WHERE SYSTEM_ID= @sysid)
END
IF(@typeTable = ''DESC_FASC'')
BEGIN
SET @outcome = (SELECT DESCRIPTION  FROM db_user.PROJECT WHERE SYSTEM_ID= @sysid)
IF ((@outcome = '''')or (@outcome is null)) set @outcome  = ''''
END
IF(@typeTable = ''PROF_IDREG'')
BEGIN
IF (@sysid IS NOT NULL)
BEGIN
SET @outcome = (SELECT ID_REGISTRO  FROM PROFILE WHERE SYSTEM_ID= @sysid)
IF (@outcome IS NULL) set @outcome = ''0''
END
ELSE set @outcome = ''0''
END
IF(@typeTable = ''ID_GRUPPO'')
BEGIN
IF @sysid IS NOT NULL
BEGIN
SET @outcome = (SELECT ID_GRUPPO FROM DPA_CORR_GLOBALI WHERE system_id = @sysid)
IF (@outcome IS NULL) set @outcome = ''0''
END
ELSE set @outcome = ''0''
END
IF(@typeTable = ''SEGNATURA_DOCNUMBER'')
BEGIN
SET @outcome =  (SELECT VAR_SEGNATURA FROM PROFILE WHERE SYSTEM_ID= @sysid)
IF (@outcome IS NULL)
BEGIN
SET @outcome = (SELECT DOCNUMBER FROM PROFILE WHERE SYSTEM_ID= @sysid)
END
END
IF(@typeTable = ''OGGETTO_MITTENTE'')
BEGIN
-- OGGETTO
SET @outcome = (SELECT  TOP 1 VAR_PROF_OGGETTO FROM PROFILE WHERE SYSTEM_ID= @sysid)
BEGIN
SET @TMPVAR = (SELECT TOP 1 var_desc_corr FROM DPA_CORR_GLOBALI a, DPA_DOC_ARRIVO_PAR b WHERE b.id_mitt_dest=a.system_id AND b.cha_tipo_mitt_dest=''M''
AND b.id_profile=@sysid)
END
IF (@TMPVAR IS NOT NULL)
BEGIN
SET @outcome = @outcome + ''@@'' + @TMPVAR
END
END
IF(@typeTable = ''PROFILE_CHA_IMG'')
BEGIN
SET @outcome =(
 SELECT db_user.getchaimg (docnumber)
                   FROM PROFILE
          WHERE system_id = @sysid   )

END
return @outcome
end



' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[getDescCorr]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
create function [db_user].[getDescCorr] (@corrId int)
returns varchar(256)
as
begin

declare @varDescCorr varchar(256)

select @varDescCorr = var_desc_corr
from dpa_corr_globali
where system_id=@corrId;

return @varDescCorr

end

' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SPsetDataVistaSmistamento]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE  PROCEDURE [db_user].[SPsetDataVistaSmistamento]
@idPeople INT,
@idOggetto INT,
@idGruppo INT,
@tipoOggetto CHAR(1),
@idTrasmissione INT,
@resultValue int out
AS

DECLARE @sysTrasmSingola INT
DECLARE @chaTipoTrasm CHAR(1)
DECLARE @chaTipoRagione CHAR(1)
DECLARE @chaTipoDest CHAR(1)

BEGIN
SET @resultValue = 0


DECLARE cursorTrasmSingolaDocumento CURSOR FOR

SELECT B.system_id, b.cha_tipo_trasm, c.cha_tipo_ragione, b.cha_tipo_dest
FROM dpa_trasmissione a, dpa_trasm_singola b,  DPA_RAGIONE_TRASM c
WHERE a.system_id = @idTrasmissione and a.dta_invio is not null and a.system_id = b.id_trasmissione and (b.id_corr_globale =
(select system_id from dpa_corr_globali where id_gruppo = @idGruppo)
OR b.id_corr_globale =
(SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_people = @idPeople))
AND a.ID_PROFILE = @idOggetto and
b.ID_RAGIONE = c.SYSTEM_ID

IF(@tipoOggetto=''D'')


OPEN cursorTrasmSingolaDocumento
FETCH NEXT FROM cursorTrasmSingolaDocumento
INTO @sysTrasmSingola, @chaTipoTrasm, @chaTipoRagione, @chaTipoDest

BEGIN

WHILE @@FETCH_STATUS = 0

begin

IF (@chaTipoRagione = ''N'' OR @chaTipoRagione = ''I'')

BEGIN

BEGIN

UPDATE DPA_TRASM_UTENTE
SET DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  GETDATE() ELSE DTA_VISTA END),
DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
WHERE
DPA_TRASM_UTENTE.DTA_VISTA IS NULL
AND id_trasm_singola = @sysTrasmSingola
and DPA_TRASM_UTENTE.ID_PEOPLE =@idPeople

IF (@@ERROR <> 0)
BEGIN
SET @resultValue=1
return @resultValue
END
END

IF (@chaTipoTrasm = ''S'' AND @chaTipoDest= ''R'')

BEGIN

UPDATE DPA_TRASM_UTENTE SET
DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
WHERE
DPA_TRASM_UTENTE.DTA_VISTA IS NULL
AND id_trasm_singola = @sysTrasmSingola
AND DPA_TRASM_UTENTE.ID_PEOPLE != @idPeople


IF (@@ERROR <> 0)
BEGIN
SET @resultValue=1
return @resultValue
END
END

END

ELSE

BEGIN

UPDATE DPA_TRASM_UTENTE
SET DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  GETDATE() ELSE DTA_VISTA END),
DTA_ACCETTATA = (CASE WHEN DTA_ACCETTATA IS NULL THEN  GETDATE() ELSE DTA_ACCETTATA END),
CHA_ACCETTATA = ''1'', CHA_IN_TODOLIST = ''0''

WHERE
DPA_TRASM_UTENTE.CHA_ACCETTATA = ''0''
AND id_trasm_singola = @sysTrasmSingola
and DPA_TRASM_UTENTE.ID_PEOPLE = @idPeople

IF (@@ERROR <> 0)
BEGIN
SET @resultValue=1
return @resultValue
END

IF (@chaTipoTrasm = ''S'' AND @chaTipoDest= ''R'')

begin
UPDATE DPA_TRASM_UTENTE SET
DPA_TRASM_UTENTE.CHA_VALIDA= ''0'',
DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
WHERE

id_trasm_singola = @sysTrasmSingola
AND DPA_TRASM_UTENTE.ID_PEOPLE != @idPeople

IF (@@ERROR <> 0)
BEGIN
SET @resultValue=1
return @resultValue
END

end

END


FETCH NEXT FROM cursorTrasmSingolaDocumento
INTO @sysTrasmSingola, @chaTipoTrasm, @chaTipoRagione, @chaTipoDest

END

CLOSE cursorTrasmSingolaDocumento
DEALLOCATE cursorTrasmSingolaDocumento
END

END

RETURN @resultValue
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa3_get_children]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'--3.2.0
CREATE PROCEDURE [db_user].[dpa3_get_children]
@id_amm varchar(64),
@cha_tipo_ie varchar(2),
@var_cod_rubrica varchar(64),
@corr_types int = 7
as

declare @tipo varchar(2)
declare @system_id int
declare @id_gruppo int

select
@tipo = cha_tipo_urp, @system_id = system_id, @id_gruppo = id_gruppo
from
dpa_corr_globali
where
id_amm = @id_amm and
cha_tipo_ie=@cha_tipo_ie and
var_cod_rubrica = @var_cod_rubrica

if (@tipo = ''U'')
begin
SELECT
var_cod_rubrica, var_desc_corr, (case when CHA_TIPO_IE=''I'' then 1 else 0 end) AS interno, cha_tipo_urp
FROM
dpa_corr_globali
where
id_parent = @system_id and
dta_fine is null and
((@corr_types & 1) > 0)
union
SELECT
var_cod_rubrica, var_desc_corr, (case when CHA_TIPO_IE=''I'' then 1 else 0 end) AS interno, cha_tipo_urp
FROM
dpa_corr_globali
where
cha_tipo_urp=''R'' and id_uo = @system_id and
dta_fine is null and
((@corr_types & 2) > 0)
end
else
begin
SELECT DISTINCT
var_cod_rubrica, var_desc_corr, (case when CHA_TIPO_IE=''I'' then 1 else 0 end) AS interno, cha_tipo_urp
FROM
dpa_corr_globali
where
id_people in (
select people_system_id from peoplegroups where groups_system_id = @id_gruppo and dta_fine is null)
and dta_fine is null and CHA_TIPO_URP != ''L'' and
((@corr_types & 4) > 0)
end
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa3_get_hierarchy]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'--

create procedure  [db_user].[dpa3_get_hierarchy]
@id_amm varchar(64),
@cod varchar(64),
@tipo_ie varchar(2),
@codes varchar(4000) output
as
declare @c_type varchar(2)
declare @p_cod varchar(64)
declare @system_id int
declare @id_parent int
declare @id_uo int
declare @id_utente int

set @codes = ''''
select @id_parent = id_parent, @system_id = system_id, @id_uo = id_uo, @id_utente = id_people, @c_type = cha_tipo_urp from dpa_corr_globali where
var_cod_rubrica=@cod and
cha_tipo_ie=@tipo_ie and
id_amm=@id_amm and
dta_fine is null

while (1 > 0)
begin
if @c_type is null
break

if @c_type = ''U''
begin
if (@id_parent is null or @id_parent = 0)
break
select @p_cod = var_cod_rubrica, @system_id = system_id from dpa_corr_globali where system_id = @id_parent and id_amm=@id_amm and dta_fine is null
end
if @c_type = ''R''
begin
if (@id_uo is null or @id_uo = 0)
break
select @p_cod = var_cod_rubrica, @system_id = system_id from dpa_corr_globali where system_id = @id_uo and id_amm=@id_amm and dta_fine is null
end
if @c_type = ''P''
begin
select top 1 @p_cod = var_cod_rubrica from dpa_corr_globali where id_gruppo =
(
case when exists
(select groups_system_id from peoplegroups where people_system_id = @id_utente and cha_preferito = 1)
then
(select groups_system_id from peoplegroups where people_system_id = @id_utente  and cha_preferito = 1)
else
(select max(groups_system_id) from peoplegroups where people_system_id = @id_utente and dta_fine is null)
end
)
and id_amm=@id_amm and dta_fine is null
end
if @p_cod is null
break

select @id_parent = id_parent, @system_id = system_id, @id_uo = id_uo, @c_type = cha_tipo_urp from dpa_corr_globali where var_cod_rubrica=@p_cod and id_amm=@id_amm and dta_fine is null

set @codes = @p_cod + '':'' + @codes
end
set @codes = @codes + @cod

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[RDE_Autorizzazione_2]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW  [db_user].[RDE_Autorizzazione_2]
AS
SELECT
DISTINCT db_user.DPA_EL_REGISTRI.SYSTEM_ID AS IdRegistroRemoto,
db_user.PEOPLE.SYSTEM_ID AS IdUtenteRemoto,
db_user.DPA_EL_REGISTRI.VAR_CODICE AS CodRegistroRemoto
FROM
db_user.DPA_TIPO_F_RUOLO INNER JOIN
db_user.DPA_TIPO_FUNZIONE ON db_user.DPA_TIPO_F_RUOLO.ID_TIPO_FUNZ = db_user.DPA_TIPO_FUNZIONE.SYSTEM_ID INNER JOIN
db_user.DPA_EL_REGISTRI INNER JOIN
db_user.DPA_L_RUOLO_REG ON db_user.DPA_EL_REGISTRI.SYSTEM_ID = db_user.DPA_L_RUOLO_REG.ID_REGISTRO INNER JOIN
db_user.DPA_CORR_GLOBALI ON db_user.DPA_L_RUOLO_REG.ID_RUOLO_IN_UO = db_user.DPA_CORR_GLOBALI.SYSTEM_ID INNER JOIN
db_user.PEOPLEGROUPS ON db_user.DPA_CORR_GLOBALI.ID_GRUPPO = db_user.PEOPLEGROUPS.GROUPS_SYSTEM_ID INNER JOIN
db_user.PEOPLE ON db_user.PEOPLEGROUPS.PEOPLE_SYSTEM_ID = db_user.PEOPLE.SYSTEM_ID ON
db_user.DPA_TIPO_F_RUOLO.ID_RUOLO_IN_UO = db_user.DPA_L_RUOLO_REG.ID_RUOLO_IN_UO
WHERE
(db_user.DPA_TIPO_FUNZIONE.SYSTEM_ID IN
(select id_tipo_funzione from db_user.DPA_FUNZIONI where cod_funzione = ''PROTO_EME''))
AND (db_user.DPA_CORR_GLOBALI.DTA_FINE IS NULL)
AND (db_user.DPA_CORR_GLOBALI.CHA_TIPO_URP = ''R'')
AND (db_user.DPA_EL_REGISTRI.cha_rf IS NULL OR db_user.DPA_EL_REGISTRI.cha_rf = ''0'')
AND (db_user.DPA_EL_REGISTRI.cha_disabilitato IS NULL OR db_user.DPA_EL_REGISTRI.cha_disabilitato = ''0'')

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_INSERT_DPA_DETT_GLOBALI]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[SP_INSERT_DPA_DETT_GLOBALI]

AS

DECLARE @sysCorrente INT

DECLARE sysCursor CURSOR FOR
select system_id from DPA_CORR_GLOBALI
WHERE cha_tipo_ie = ''E'' AND CHA_TIPO_URP IN (''U'', ''P'') AND DTA_FINE IS NULL
and system_id
not in (select id_corr_globali from dpa_dett_globali)
BEGIN

OPEN  sysCursor
FETCH NEXT FROM sysCursor INTO @sysCorrente
WHILE @@FETCH_STATUS = 0

BEGIN

INSERT INTO DPA_DETT_GLOBALI
(
ID_CORR_GLOBALI
)
VALUES
(
@sysCorrente
)

FETCH NEXT FROM sysCursor INTO @sysCorrente
END


CLOSE sysCursor
DEALLOCATE sysCursor


END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_MODIFY_CORR_ESTERNO]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[SP_MODIFY_CORR_ESTERNO]
@IDCorrGlobale INT,
@desc_corr  VARCHAR(128),
@nome  VARCHAR(50),
@cognome  VARCHAR(50),
@codice_aoo VARCHAR(16),
@codice_amm VARCHAR(32),
@email  VARCHAR(128),
@indirizzo VARCHAR(128),
@cap VARCHAR(5),
@provincia VARCHAR(2),
@nazione VARCHAR(32),
@citta  VARCHAR(64),
@cod_fiscale VARCHAR(16),
@telefono VARCHAR(16),
@telefono2 VARCHAR(16),
@note VARCHAR(250),
@fax VARCHAR(16),
@var_idDocType INT,
@inrubricacomune VARCHAR(1),
@newid INTEGER OUTPUT
AS

/*
1)	update del corrispondente vecchio:
- settando var_cod_rubrica = var_cod_rubrica_system_id;
- settando dta_fine = GETDATE();

2)	insert del nuovo corrispondente (DPA_CORR_GLOBALI):
- codice rubrica = codice rubrica del corrispondente che � stato storicizzato al punto 1)
- id_old = system_id del corrispondente storicizzato al punto 1)

2.1) insert del dettaglio del  nuovo corrispondente (DPA_DETT_GLOBALI) solo per UTENTI e UO

*/


DECLARE @ReturnValue INT
DECLARE @cod_rubrica VARCHAR(128)
DECLARE @id_reg INT
DECLARE @idAmm INT
DECLARE @new_var_cod_rubrica VARCHAR(128)
DECLARE @cha_dettaglio VARCHAR(1)
DECLARE @cha_tipo_urp VARCHAR(1)
DECLARE @v_id_docType INT

BEGIN

SELECT
@cod_rubrica = VAR_COD_RUBRICA,
@cha_tipo_urp = CHA_TIPO_URP,
@id_reg = ID_REGISTRO,
@idAmm = ID_AMM
FROM DPA_CORR_GLOBALI
WHERE system_id = @IDCorrGlobale

IF @@ROWCOUNT > 0  --1
BEGIN

SELECT @v_id_docType =  ID_DOCUMENTTYPE
FROM DPA_T_CANALE_CORR
WHERE ID_CORR_GLOBALE = @IDCorrGlobale

IF @@ROWCOUNT > 0
BEGIN
-- calcolo il nuovo codice rubrica
--SET @new_var_cod_rubrica = @var_cod_rubrica + ''_''+ CONVERT(varchar(32), @IDCorrGlobale)
SET @new_var_cod_rubrica = @cod_rubrica + ''_''+ CONVERT(varchar(32), @IDCorrGlobale )

SET @cha_dettaglio = ''0'' -- default

IF(@cha_tipo_urp=''U'' OR @cha_tipo_urp=''P'' )
SET @cha_dettaglio = ''1''

BEGIN


--VERIFICO se il corrisp � stato utilizzato come dest/mitt di protocolli
SELECT ID_PROFILE
FROM DPA_DOC_ARRIVO_PAR
WHERE ID_MITT_DEST =  @IDCorrGlobale

-- 1) non � stato mai utilizzato come corrisp in un protocollo
IF (@@ROWCOUNT = 0)
BEGIN
--non devo storicizzare, aggiorno solamente i dati
UPDATE 	DPA_CORR_GLOBALI
SET 	VAR_CODICE_AOO= @codice_aoo,
VAR_CODICE_AMM = @codice_amm,
VAR_EMAIL = @email,
VAR_DESC_CORR = @desc_corr,
VAR_NOME = @nome,
VAR_COGNOME= @cognome
WHERE 	SYSTEM_ID = @IDCorrGlobale

IF(@@ROWCOUNT > 0) -- SE UPDATE � andata a buon fine
BEGIN
begin
--per utenti e Uo aggiorno il dettaglio
IF(@cha_tipo_urp=''U'' OR @cha_tipo_urp=''P'' )

BEGIN

UPDATE DPA_DETT_GLOBALI
SET 	VAR_INDIRIZZO = @indirizzo,
VAR_CAP = @cap,
VAR_PROVINCIA = @provincia,
VAR_NAZIONE = @nazione,
VAR_COD_FISCALE = @cod_fiscale,
VAR_TELEFONO = @telefono,
VAR_TELEFONO2 = @telefono2,
VAR_NOTE= @note,
VAR_CITTA= @citta,
VAR_FAX = @fax
WHERE ID_CORR_GLOBALI = @IDCorrGlobale

IF(@@ROWCOUNT > 0)
SET @ReturnValue = 1
ELSE
SET @ReturnValue = 0


END

ELSE
SET @ReturnValue = 1 -- CASO RUOLI
end

IF (@ReturnValue = 1)

IF (@var_idDocType != @v_id_docType)

BEGIN


UPDATE DPA_T_CANALE_CORR
SET  ID_DOCUMENTTYPE =  @var_idDocType
WHERE ID_CORR_GLOBALE = @IDCorrGlobale

IF(@@ROWCOUNT > 0)
SET @ReturnValue = 1
ELSE
SET @ReturnValue = 0
END


END

ELSE
SET @ReturnValue = 0

END
ELSE

-- caso 2) Il corrisp � stato utilizzato come destinatario
BEGIN
--  INIZIO STORICIZZAZIONE DEL CORRISPONDENTE

UPDATE	DPA_CORR_GLOBALI
SET 	DTA_FINE = GETDATE(),  VAR_COD_RUBRICA =@new_var_cod_rubrica,  VAR_CODICE =@new_var_cod_rubrica
WHERE 	SYSTEM_ID = @IDCorrGlobale

-- se la storicizzazione � andata a buon fine,
--posso inserire il nuovo corrispondente
IF @@ROWCOUNT > 0

BEGIN
DECLARE @cha_tipo_corr VARCHAR(1)
IF (@inrubricacomune = ''1'')
SET @cha_tipo_corr = ''C''
ELSE
SET @cha_tipo_corr = ''S''

INSERT INTO DPA_CORR_GLOBALI (
NUM_LIVELLO,
CHA_TIPO_IE,
ID_REGISTRO,
ID_AMM,
VAR_DESC_CORR,
VAR_NOME,
VAR_COGNOME,
ID_OLD,
DTA_INIZIO,
ID_PARENT,
VAR_CODICE,
CHA_TIPO_CORR,
CHA_TIPO_URP,
CHA_PA,
VAR_CODICE_AOO,
VAR_COD_RUBRICA,
CHA_DETTAGLI,

VAR_EMAIL,
VAR_CODICE_AMM
)

VALUES (
''0'',
''E'',
@id_reg,
@idAmm,
@desc_corr,
@nome,
@cognome,
@IDCorrGlobale,
GETDATE(),
''0'',
@cod_rubrica,
''S'',
@cha_tipo_urp,
@cha_tipo_corr,
@codice_aoo,
@cod_rubrica,
@cha_dettaglio,
@email,
@codice_amm
)

--prendo la systemId appena inserita
SET @newid = @@identity

IF @@ROWCOUNT > 0 -- se l''inserimento del nuovo corrisp � andato a buon fine

IF(@cha_tipo_urp=''U'' OR @cha_tipo_urp=''P'' ) -- CASO UTENTE/UO: inserisco il dettaglio
BEGIN

INSERT INTO DPA_DETT_GLOBALI
(
ID_CORR_GLOBALI,
VAR_INDIRIZZO,
VAR_CAP,
VAR_PROVINCIA,
VAR_NAZIONE,
VAR_COD_FISCALE,
VAR_TELEFONO,
VAR_TELEFONO2,
VAR_NOTE,
VAR_CITTA,
VAR_FAX
)

VALUES

(
@newid,
@indirizzo,
@cap,
@provincia,
@nazione,
@cod_fiscale,
@telefono,
@telefono2,
@note,
@citta,
@fax
)

IF @@ROWCOUNT > 0
-- se la insert su dpa_dett_globali � andata a buon fine
SET @ReturnValue = 1 -- valore ritornato 1
ELSE
-- se la insert su dpa_dett_globali non � andata a buon fine
SET @ReturnValue = 0 -- valore ritornato 0
END

ELSE  -- CASO RUOLO: non inserisco il dettaglio
-- vuol dire che il corrispondente � un RUOLO (quindi non deve essere fatta la insert sulla dpa_dett_globali)
--valore ritornato 1 perch� significa che l''operazione di inserimento del nuovo ruolo � andato a buon fine
SET @ReturnValue = 1

IF (@ReturnValue = 1)

BEGIN

INSERT INTO DPA_T_CANALE_CORR
(
ID_CORR_GLOBALE,
ID_DOCUMENTTYPE,
CHA_PREFERITO
)

VALUES
(
@newid,
@var_idDocType,
''1''
)

IF @@ROWCOUNT > 0
-- se la insert su DPA_T_CANALE_CORR � andata a buon fine
SET @ReturnValue = 1 -- valore ritornato 1
ELSE
-- se la insert su DPA_T_CANALE_CORRnon � andata a buon fine
SET @ReturnValue = 0 -- valore ritornato 0
END
ELSE

SET @ReturnValue = 0 -- inserimento non andato a buon fine: ritorno 0 ed esco

-- FINE STORICIZZAZIONE

END

END



END

END
ELSE
SET @ReturnValue = 0

END



ELSE
SET @ReturnValue = 0 -- la storicizzazione del corrispondente � andata male:  ritorno 0 ed esco -- END 1

END

RETURN @ReturnValue

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[ins_occ]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

---ins_occ

CREATE procedure [db_user].[ins_occ]
(@id_reg int, @idamm int, @Prefix_cod_rub varchar (128),
@desc_corr varchar (128),
@cha_dettagli varchar (1), @RESULT INT OUT)

as

BEGIN
declare @sys_dpa_corr_globali int

set @sys_dpa_corr_globali = 0
if (@sys_dpa_corr_globali <> 0)
BEGIN
SET @RESULT = @sys_dpa_corr_globali

END

else
BEGIN

if(@id_reg=0)
set @id_reg=null

--inserisco il nuovo occ_
INSERT INTO
[db_user].DPA_CORR_GLOBALI (ID_REGISTRO,
ID_AMM,VAR_DESC_CORR,
ID_OLD,DTA_INIZIO,ID_PARENT
,CHA_TIPO_CORR,CHA_DETTAGLI)
VALUES (@id_reg,@idamm,@desc_corr,0,getdate(),0,''O'',0)

SET @RESULT = SCOPE_IDENTITY()

UPDATE [db_user].DPA_CORR_GLOBALI SET
VAR_COD_RUBRICA=@pREFIX_COD_RUB+convert(nvarchar(10),@RESULT) ,
VAR_CODICE=@pREFIX_COD_RUB+convert(nvarchar(10),@RESULT)
WHERE SYSTEM_ID=@RESULT

END


return @RESULT

END

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_CLEAN_DPA_T_CANALE_CORR]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[SP_CLEAN_DPA_T_CANALE_CORR]

AS

DECLARE @sysCorrente INT

DECLARE sysCursor CURSOR FOR
select system_id from DPA_CORR_GLOBALI
WHERE cha_tipo_ie = ''E'' AND CHA_TIPO_URP IN (''U'', ''P'', ''R'')
and system_id
not in (select id_corr_globale from dpa_t_canale_corr)
BEGIN
DELETE FROM dpa_t_canale_corr
WHERE id_corr_globale IN (
SELECT system_id
FROM dpa_corr_globali
WHERE cha_tipo_ie = ''I'')
OPEN  sysCursor
FETCH NEXT FROM sysCursor INTO @sysCorrente
WHILE @@FETCH_STATUS = 0

BEGIN

INSERT INTO DPA_T_CANALE_CORR
(
ID_CORR_GLOBALE
)
VALUES
(
@sysCorrente
)

FETCH NEXT FROM sysCursor INTO @sysCorrente
END


CLOSE sysCursor
DEALLOCATE sysCursor


END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_DELETE_CORR_ESTERNO]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[SP_DELETE_CORR_ESTERNO] @IDCorrGlobale INT, @liste INT  AS

/*
-------------------------------------------------------------------------------------------------------
SP per la Cancellazione corrispondente

Valori di ritorno gestiti:

0: CANCELLAZIONE EFFETTUATA - operazione andata a buon fine
1: DISABILITAZIONE EFFETTUATA - il corrispondente è presente nella DPA_DOC_ARRIVO_PAR, quindi non viene cancellato

2: CORRISPONDENTE NON RIMOSSO - il corrispondente è presente nella lista di distribuzione e non posso rimuoverlo

3: ERRORE: la DELETE sulla dpa_corr_globali NON è andata a buon fine
4: ERRORE: la DELETE sulla dpa_dett_globali NON è andata a buon fine
5: ERRORE: l'' UPDATE sulla dpa_corr_globali NON è andata a buon fine
6: ERRORE: la DELETE sulla dpa_liste_distr NON è andata a buon fine
-------------------------------------------------------------------------------------------------------

*/

DECLARE @countDoc int	-- variabile usata per contenere il numero di documenti che hanno IL CORRISPONDENTE come
DECLARE @ReturnValue int
DECLARE @cha_tipo_urp varchar(1)
DECLARE @var_inLista varchar(1) -- valore ''N'' (il corr non è presente in nessuna lista di sistribuzione), ''Y'' altrimenti
BEGIN

SET @cha_tipo_urp = (select cha_tipo_urp from dpa_corr_globali where system_id = @IDCorrGlobale)

SET @var_inLista = ''N'' -- di default si assume che il corr nn sia nella DPA_LISTE_DISTR

SELECT SYSTEM_ID  FROM DPA_LISTE_DISTR WHERE ID_DPA_CORR = @IDCorrGlobale

IF @@ROWCOUNT > 0
BEGIN
IF (@liste = 1)
--- CASO 1 - Le liste di distribuzione SONO abilitate: verifico se il corrispondente è in una lista di distibuzione, in caso affermativo non posso rimuoverlo
BEGIN
-- CASO 1.1 - Il corrispondente è predente in almeno una lista, quindi esco senza poterlo rimuoverere (VALORE RITORNATO = 2).

RETURN 2
END
ELSE
-- CASO 2 - Le liste di distribuzione NON SONO abilitate

BEGIN
SET @var_inLista = ''Y''
END

END



-- Se la procedura va avanti, cio'' significa che:
-- Le liste di distribuzione non sono abilitate (@liste = 0), oppure sono abilitate (@liste=1) ma il corrispondente che si tenta di rimuovere non è contenuto in una lista

SELECT ID_PROFILE  FROM DPA_DOC_ARRIVO_PAR WHERE ID_MITT_DEST =  @IDCorrGlobale

IF (@@ROWCOUNT = 0)
-- CASO 3 -  il corrispondente non è stato mai utilizzato come mitt/dest di protocolli
BEGIN

-- CAS0 3.1 - lo rimuovo dalla DPA_CORR_GLOBALI
DELETE FROM DPA_CORR_GLOBALI WHERE  SYSTEM_ID = @IDCorrGlobale

IF @@ROWCOUNT = 0
-- CAS0 3.1.1 - la rimozione da DPA_CORR_GLOBALI NON va a buon fine  (VALORE RITORNATO = 3).
BEGIN
SET @ReturnValue=3
END
ELSE
BEGIN
SET @ReturnValue=0

DELETE FROM DPA_T_CANALE_CORR WHERE ID_CORR_GLOBALE = @IDCorrGlobale

-- per i RUOLI non deve essere cancellata la DPA_DETT_GLOBALI poichè in fase di creazione di un ruolo
-- non viene fatta la insert in tale tabella
IF( @cha_tipo_urp != ''R'')

BEGIN

-- CAS0 3.1.2 - la rimozione da DPA_CORR_GLOBALI va a buon fine
DELETE FROM DPA_DETT_GLOBALI WHERE  ID_CORR_GLOBALI = @IDCorrGlobale

IF @@ROWCOUNT = 0
-- CAS0 3.1.2.1 - la rimozione da DPA_DETT_GLOBALI NON va a buon fine  (VALORE RITORNATO = 4).
BEGIN
SET @ReturnValue=4
END
ELSE
-- CAS0 3.1.2.2 - la rimozione da DPA_DETT_GLOBALI VAa buon fine  (VALORE RITORNATO = 0).
BEGIN
SET @ReturnValue=0  -- operazione andata a buon fine
END
END

IF (@ReturnValue=0 AND @liste = 0 AND @var_inLista = ''Y'')
BEGIN
--se:
-- 1) sono andate bene le DELETE precedenti
-- 2) sono disabilitate le liste di distribuzione
-- 3) il corrispondente è nella DPA_LISTE_DISTR

-- rimuovo il corrispondente dalla DPA_LISTE_DISTR
DELETE FROM DPA_LISTE_DISTR WHERE ID_DPA_CORR = @IDCorrGlobale

IF @@ROWCOUNT = 0
-- la rimozione da DPA_LISTE_DISTR NON va a buon fine  (VALORE RITORNATO = 6).
BEGIN
SET @ReturnValue=6
END

END
END

END

ELSE
-- CASO 4 -  il corrispondente è  stato utilizzato come mitt/dest di protocolli
BEGIN
-- 4.1) disabilitazione del corrispondente
UPDATE DPA_CORR_GLOBALI SET DTA_FINE = GETDATE() WHERE SYSTEM_ID = @IDCorrGlobale

IF @@ROWCOUNT = 0
-- CAS0 4.1.1- la disabilitazione NON va a buon fine  (VALORE RITORNATO = 5).
BEGIN
SET @ReturnValue=5
END

ELSE
-- CAS0 4.1.1- la disabilitazione VA a buon fine  (VALORE RITORNATO = 1).
BEGIN
SET @ReturnValue=1
END
END

END

RETURN @ReturnValue
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[getInConservazione]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [db_user].[getInConservazione]
(  
   @IDPROFILE int,
   @Idproject int,
   @typeID char,
   @idPeople int,
   @idGruppo int
)

RETURNS int
AS 
   
BEGIN

      DECLARE   @risultato   int 
      DECLARE   @res_appo    int 
      DECLARE   @idRuoloInUo int
	  
      SET @risultato=0

      BEGIN
		


            SELECT @idRuoloInUo = DPA_CORR_GLOBALI.SYSTEM_ID
            FROM DPA_CORR_GLOBALI
            WHERE DPA_CORR_GLOBALI.ID_GRUPPO = @idGruppo


            IF (@typeID = ''D'' AND @Idproject IS NULL)
               BEGIN

                  SELECT @risultato = count(DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID)
                  FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE
                  WHERE 
                     DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE = DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND 
                     DPA_ITEMS_CONSERVAZIONE.ID_PROFILE = @IDPROFILE AND 
                     DPA_ITEMS_CONSERVAZIONE.CHA_STATO = ''N'' AND 
                     DPA_AREA_CONSERVAZIONE.ID_PEOPLE = @idPeople AND 
                     DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = @idRuoloInUo AND 
                     DPA_ITEMS_CONSERVAZIONE.ID_PROJECT IS NULL

               END
            ELSE 
               BEGIN
                  IF (@typeID = ''D'' AND @Idproject IS NOT NULL)
                     BEGIN

                        SELECT @risultato = count(DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID)
                        FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE
                        WHERE 
                           DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE = DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND 
                           DPA_ITEMS_CONSERVAZIONE.ID_PROFILE = @IDPROFILE AND 
                           DPA_ITEMS_CONSERVAZIONE.CHA_STATO = ''N'' AND 
                           DPA_AREA_CONSERVAZIONE.ID_PEOPLE = @idPeople AND 
                           DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = @idRuoloInUo AND 
                           DPA_ITEMS_CONSERVAZIONE.ID_PROJECT = @Idproject

                     END
               END

            IF (@typeID = ''F'')
               BEGIN

                  SELECT @risultato = count(DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID)
                  FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE
                  WHERE 
                     DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE = DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND 
                     DPA_ITEMS_CONSERVAZIONE.ID_PROJECT = @Idproject AND 
                     DPA_ITEMS_CONSERVAZIONE.CHA_STATO = ''N'' AND 
                     DPA_AREA_CONSERVAZIONE.ID_PEOPLE = @idPeople AND 
                     DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = @idRuoloInUo

               END

            IF (@risultato > 0)
               SET @risultato = 1
            ELSE 
               SET @risultato = 0       
   END      

    RETURN @risultato
END


' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_INSERT_AREA_CONS]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'




-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [db_user].[SP_INSERT_AREA_CONS]  
	    @idAmm int,
        @idPeople int,
        @idProfile int,
        @idProject int,
        @codFasc varchar(64),
        @oggetto varchar(64),
        @tipoDoc char, 
        @idGruppo int,
        @idRegistro int,  
        @docNumber int,
        @userId varchar(32),
		@tipoOggetto char,
        @result int  OUT
AS  
BEGIN
       
	DECLARE @idRuoloInUo int 
	DECLARE @id_cons_1   int
	DECLARE @res         int


		
        	    SET @result = -1 
                SET @idRuoloInUo = 0  
                SET @id_cons_1 = 0                           
                SET @res = 0
           
                                            
           
                SELECT @idRuoloInUo = DPA_CORR_GLOBALI.SYSTEM_ID FROM DPA_CORR_GLOBALI              
                WHERE DPA_CORR_GLOBALI.ID_GRUPPO = @idGruppo 
  
               
 
                BEGIN
                        	SELECT DISTINCT @res = DPA_AREA_CONSERVAZIONE.SYSTEM_ID
                                FROM DPA_AREA_CONSERVAZIONE
                                WHERE 
                                DPA_AREA_CONSERVAZIONE.ID_PEOPLE = @idPeople AND 
                                DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = @idRuoloInUo AND 
                                DPA_AREA_CONSERVAZIONE.CHA_STATO = ''N'' 
                      
               END              
               IF (@res > 0)
		       
		BEGIN

	              INSERT INTO DPA_ITEMS_CONSERVAZIONE( 
                      ID_CONSERVAZIONE, 
                      ID_PROFILE, 
                      ID_PROJECT, 
                      CHA_TIPO_DOC, 
                      VAR_OGGETTO, 
                      ID_REGISTRO, 
                      DATA_INS, 
                      CHA_STATO, 
                      VAR_XML_METADATI, 
                      COD_FASC, 
                      DOCNUMBER,
					  CHA_TIPO_OGGETTO
                      )
                      VALUES
                      (
                      @res, 
                      @idProfile, 
                      @idProject, 
                      @tipoDoc, 
                      @oggetto, 
                      @idRegistro, 
                      getdate(), 
                      ''N'', 
                      NULL, 
                      @codFasc, 
                      @docNumber,
					  @tipoOggetto
                      )

                      SET @result = SCOPE_IDENTITY()  
		END
              ELSE
                BEGIN
                	INSERT INTO DPA_AREA_CONSERVAZIONE( 
                        ID_AMM, 
                        ID_PEOPLE, 
                        ID_RUOLO_IN_UO, 
                        CHA_STATO, 
                        DATA_APERTURA, 
                        USER_ID, 
                        ID_GRUPPO
                        )
                        VALUES
                        (
                        @idAmm, 
                        @idPeople, 
                        @idRuoloInUo, 
                        ''N'', 
                        getdate(), 
                        @userId, 
                        @idGruppo)

						SET @id_cons_1=SCOPE_IDENTITY()						

                        INSERT INTO DPA_ITEMS_CONSERVAZIONE(                           
                        ID_CONSERVAZIONE, 
                        ID_PROFILE, 
                        ID_PROJECT, 
                        CHA_TIPO_DOC, 
                        VAR_OGGETTO, 
                        ID_REGISTRO, 
                        DATA_INS, 
                        CHA_STATO, 
                        VAR_XML_METADATI, 
                        COD_FASC, 
                        DOCNUMBER,
						CHA_TIPO_OGGETTO
 			            )                                
                        VALUES
			            ( 
                        @id_cons_1, 
                        @idProfile, 
                        @idProject, 
                        @tipoDoc, 
                        @oggetto, 
                        @idRegistro, 
                        getdate(), 
                        ''N'', 
                        NULL, 
                        @codFasc, 
                        @docNumber,
						@tipoOggetto)
  
                        SET @result = SCOPE_IDENTITY()   
		END 
END






' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[corrcat]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

CREATE function [db_user].[corrcat] (@docId int, @dirProt varchar(1))
returns varchar(8000)
as
begin
declare @item varchar(200)
declare @outcome varchar(8000)
declare @dirCorr varchar(1)

set @outcome=''''


declare cur CURSOR LOCAL

for select distinct c.var_desc_corr, dap.cha_tipo_mitt_dest
from dpa_corr_globali c WITH (NOLOCK), dpa_doc_arrivo_par dap WITH (NOLOCK)
where dap.id_profile=@docId
and dap.id_mitt_dest=c.system_id
order by dap.cha_tipo_mitt_dest desc
open cur

fetch next from cur into @item,@dirCorr
while(@@fetch_status=0)
begin
if (@dirProt=''P'' and @dirCorr=''M'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (M); ''
end

if (@dirProt=''P'' and @dirCorr=''D'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (D); ''
end

if (@dirProt=''P'' and @dirCorr=''C'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (CC); ''
end

if (@dirProt=''A'' and @dirCorr=''M'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+''; ''
end

if (@dirProt=''A'' and @dirCorr=''I'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (MI); ''
end

if (@dirProt=''I'' and @dirCorr=''M'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (M); ''
end

if (@dirProt=''I'' and @dirCorr=''D'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (D); ''
end

if (@dirProt=''I'' and @dirCorr=''C'')
begin
if(@item is not null)
set @outcome=@outcome+db_user.parsenull(@item)+'' (CC); ''
end

fetch next from cur into @item,@dirCorr

end

close cur

deallocate cur

if (len(@outcome)>0)

set @outcome = substring(@outcome,1,(len(@outcome)-1))

return @outcome

end
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DESCUO]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE function [db_user].[DESCUO] (@idUo  int)
returns varchar(256)
as
begin
declare @outcome varchar(256)
set @outcome='' ''
if(@idUo is not null)
select @outcome= var_desc_corr  from dpa_corr_globali where system_id=@idUo
return @outcome
end
' 
END

GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[checkSecurityUO]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [db_user].[checkSecurityUO] 
(
	@thingParam INT,
 	@idUO INT
)  
RETURNS INT AS  
BEGIN 
	declare @cnt int
	declare @gruppoId INT
	declare @recordCount INT
	declare @retValue INT

	set @cnt = 0
	set @gruppoId = 0
	set @recordCount = 0
	set @retValue = 0

             declare cur CURSOR LOCAL 
	for select id_gruppo from dpa_corr_globali where id_uo = @idUo
   
             open cur
	fetch next from cur into @gruppoId
	
	while(@@fetch_status=0)
	
     		 SELECT @cnt = db_user.checkSecurityProprietario(thingParam,0,gruppoId) FROM dual
     		 set @recordCount = @cnt + @recordCount

    	fetch next from cur into @gruppoId
	close cur
	deallocate cur
   
 
             IF (@recordCount > 0)
       		set @retValue = 1
             ELSE set @retValue = 0

             RETURN @retValue
   
END' 
END

GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[checkGestioneArchivio]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

CREATE FUNCTION [db_user].[checkGestioneArchivio] 
(
	@idgroupParam INT
)
RETURNS  INT
AS  
BEGIN 

DECLARE @cnt INT
DECLARE @retValue INT

   select @cnt=COUNT(*)
   from dpa_corr_globali corr, dpa_tipo_f_ruolo tipof, dpa_funzioni f 
   where tipof.id_ruolo_in_uo = corr.system_id and f.id_tipo_funzione=tipof.ID_TIPO_FUNZ
   and corr.id_gruppo = @idgroupParam
   and f.COD_FUNZIONE=''GEST_ARCHIVIA''
   
   IF (@cnt > 0) 
	set @retValue = 1
   ELSE
        set @retValue = 0

   RETURN @retValue

END' 
END

GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_INSERT_ORDINAMENTO_ORG]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE  PROCEDURE [db_user].[SP_INSERT_ORDINAMENTO_ORG] AS

DECLARE @idParent int
DECLARE @idUO int
DECLARE @idRuolo int
DECLARE @contatoreUO int
DECLARE @contatoreRUOLO int

BEGIN	
	DECLARE cursor_IDParent CURSOR FOR
		select distinct id_parent 
		from dpa_corr_globali 
		where cha_tipo_urp = ''U'' and 
		cha_tipo_ie = ''I'' and 
		dta_fine is null and 
		id_parent not in (0)
		order by id_parent
	BEGIN
		OPEN cursor_IDParent
	
		FETCH NEXT FROM cursor_IDParent
		INTO @idParent
	
		WHILE @@FETCH_STATUS = 0
	
			BEGIN
				DECLARE cursor_UO CURSOR FOR
					select system_id 
					from dpa_corr_globali 
					where id_parent = @idParent and
					cha_tipo_urp = ''U'' and 
					cha_tipo_ie = ''I'' and 
					dta_fine is null

				BEGIN
					OPEN cursor_UO
					
					SET @contatoreUO = 0
		
					FETCH NEXT FROM cursor_UO
					INTO @idUO
				
					WHILE @@FETCH_STATUS = 0
				
						BEGIN
							SET @contatoreUO = @contatoreUO + 1				
							UPDATE DPA_CORR_GLOBALI SET ID_PESO_ORG = @contatoreUO WHERE SYSTEM_ID = @idUO	
							
							DECLARE cursor_RUOLI CURSOR FOR
								select system_id 
								from dpa_corr_globali 
								where id_uo = @idUO and
								cha_tipo_urp = ''R'' and 
								cha_tipo_ie = ''I'' and 
								dta_fine is null 
							
							BEGIN
								OPEN cursor_RUOLI
						
								SET @contatoreRUOLO = 0
					
								FETCH NEXT FROM cursor_RUOLI
								INTO @idRuolo
							
								WHILE @@FETCH_STATUS = 0
							
									BEGIN
										SET @contatoreRUOLO = @contatoreRUOLO + 1	
										UPDATE DPA_CORR_GLOBALI SET ID_PESO_ORG = @contatoreRUOLO WHERE SYSTEM_ID = @idRuolo
			
										FETCH NEXT FROM cursor_RUOLI
										INTO @idRuolo
									END
								
									CLOSE cursor_RUOLI
									DEALLOCATE cursor_RUOLI
			
								FETCH NEXT FROM cursor_UO
								INTO @idUO
							END
						END
		
						CLOSE cursor_UO
						DEALLOCATE cursor_UO
		
					FETCH NEXT FROM cursor_IDParent
					INTO @idParent
				END
			END
	
			CLOSE cursor_IDParent
			DEALLOCATE cursor_IDParent
	END
END




' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SPsetDataVista]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create  PROCEDURE [db_user].[SPsetDataVista]
@idPeople INT,
@idOggetto INT,
@idGruppo INT,
@tipoOggetto CHAR(1),
@idDelegato int,
@resultValue int out
AS
DECLARE @sysTrasmSingola INT
DECLARE @chaTipoTrasm CHAR(1)
DECLARE @chaTipoRagione CHAR(1)
DECLARE @chaTipoDest CHAR(1)

BEGIN
	SET @resultValue = 0

	DECLARE cursorTrasmSingolaDocumento CURSOR FOR
	SELECT B.system_id, b.cha_tipo_trasm, c.cha_tipo_ragione, b.cha_tipo_dest
	FROM dpa_trasmissione a, dpa_trasm_singola b,  DPA_RAGIONE_TRASM c
	WHERE a.dta_invio is not null and a.system_id = b.id_trasmissione and (b.id_corr_globale =
	(select system_id from dpa_corr_globali where id_gruppo = @idGruppo)
	OR b.id_corr_globale =
	(SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_people = @idPeople))
	AND a.ID_PROFILE = @idOggetto and
	b.ID_RAGIONE = c.SYSTEM_ID

	DECLARE  cursorTrasmSingolaFascicolo CURSOR FOR
	SELECT B.system_id, b.cha_tipo_trasm, c.cha_tipo_ragione, b.cha_tipo_dest
	FROM dpa_trasmissione a, dpa_trasm_singola b,  DPA_RAGIONE_TRASM c
	WHERE a.dta_invio is not null and a.system_id = b.id_trasmissione and (b.id_corr_globale =
	(select system_id from dpa_corr_globali where id_gruppo = @idGruppo)
	OR b.id_corr_globale =
	(SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_people = @idPeople))
	AND a.ID_PROJECT = @idOggetto and
	b.ID_RAGIONE = c.SYSTEM_ID

	IF(@tipoOggetto=''D'')
	BEGIN
		OPEN cursorTrasmSingolaDocumento
		FETCH NEXT FROM cursorTrasmSingolaDocumento
		INTO @sysTrasmSingola, @chaTipoTrasm, @chaTipoRagione, @chaTipoDest
		WHILE @@FETCH_STATUS = 0
	
		begin
			IF (@chaTipoRagione = ''N'' OR @chaTipoRagione = ''I'')
			BEGIN
				BEGIN
					UPDATE DPA_TRASM_UTENTE
					SET DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
					DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  GETDATE() ELSE DTA_VISTA END),
					DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
					WHERE
					DPA_TRASM_UTENTE.DTA_VISTA IS NULL
					AND id_trasm_singola = @sysTrasmSingola
					and DPA_TRASM_UTENTE.ID_PEOPLE = @idPeople

					update dpa_todolist
					set DTA_VISTA = getdate()
					where
					id_trasm_singola = @sysTrasmSingola and ID_PEOPLE_DEST = @idPeople
					and id_profile = @idOggetto

					IF (@@ERROR <> 0)
					BEGIN
						SET @resultValue=1
						return @resultValue
					END
					
					IF (@chaTipoTrasm = ''S'' AND @chaTipoDest = ''R'')
					BEGIN
						UPDATE DPA_TRASM_UTENTE SET
						DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
						DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
						WHERE
						DPA_TRASM_UTENTE.DTA_VISTA IS NULL
						AND id_trasm_singola = @sysTrasmSingola
						AND DPA_TRASM_UTENTE.ID_PEOPLE != @idPeople
					
						IF (@@ERROR <> 0)
						BEGIN
							SET @resultValue=1
							return @resultValue
						END
					END
				end
			END
		ELSE
			BEGIN
				UPDATE DPA_TRASM_UTENTE
				SET DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
				DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  GETDATE() ELSE DTA_VISTA END)
				WHERE
				DPA_TRASM_UTENTE.DTA_VISTA IS NULL
				AND id_trasm_singola = @sysTrasmSingola
				and DPA_TRASM_UTENTE.ID_PEOPLE = @idPeople

             	UPDATE     dpa_trasm_utente
             	SET        cha_in_todolist = ''0''
             	WHERE      id_trasm_singola = @sysTrasmSingola 
                    AND NOT  dpa_trasm_utente.dta_vista IS NULL
                    AND (cha_accettata = ''1'' OR cha_rifiutata = ''1'')
                    AND dpa_trasm_utente.id_people = @idPeople

				update dpa_todolist
				set DTA_VISTA = GETDATE()
				where
				id_trasm_singola = @sysTrasmSingola and ID_PEOPLE_DEST = @idPeople
				and id_profile = @idOggetto;
			
				IF (@@ERROR <> 0)
				BEGIN
					SET @resultValue=1
					return @resultValue
				END
			END

		FETCH NEXT FROM cursorTrasmSingolaDocumento
		INTO @sysTrasmSingola, @chaTipoTrasm, @chaTipoRagione, @chaTipoDest
		END
		CLOSE cursorTrasmSingolaDocumento
		DEALLOCATE cursorTrasmSingolaDocumento
	END

	IF(@tipoOggetto=''F'')
		begin
			OPEN cursorTrasmSingolaFascicolo
			FETCH NEXT FROM cursorTrasmSingolaFascicolo
			INTO @sysTrasmSingola, @chaTipoTrasm, @chaTipoRagione, @chaTipoDest
			WHILE @@FETCH_STATUS = 0
	
			BEGIN
	
			IF (@chaTipoRagione = ''N'' OR @chaTipoRagione = ''I'')
			BEGIN
				BEGIN
					UPDATE DPA_TRASM_UTENTE
					SET DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
					DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  GETDATE() ELSE DTA_VISTA END),
					DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
					WHERE
					DPA_TRASM_UTENTE.DTA_VISTA IS NULL
					AND id_trasm_singola = @sysTrasmSingola
					and DPA_TRASM_UTENTE.ID_PEOPLE =@idPeople
			
					update dpa_todolist
					set DTA_VISTA = getdate()
					where
					id_trasm_singola = @sysTrasmSingola and ID_PEOPLE_DEST = @idPeople
					and id_project = @idOggetto;
			
					IF (@@ERROR <> 0)
					BEGIN
						SET @resultValue=1
						return @resultValue
					END
				END
	
				IF (@chaTipoTrasm = ''S'' AND @chaTipoDest= ''R'')
				BEGIN
					UPDATE DPA_TRASM_UTENTE SET
					DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
					DPA_TRASM_UTENTE.CHA_IN_TODOLIST = ''0''
					WHERE
					DPA_TRASM_UTENTE.DTA_VISTA IS NULL
					AND id_trasm_singola = @sysTrasmSingola
					AND DPA_TRASM_UTENTE.ID_PEOPLE != @idPeople
				
					IF (@@ERROR <> 0)
					BEGIN
						SET @resultValue=1
						return @resultValue
					END
				END
			END
		ELSE
			BEGIN
				UPDATE DPA_TRASM_UTENTE
				SET DPA_TRASM_UTENTE.CHA_VISTA = ''1'',
				DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  GETDATE() ELSE DTA_VISTA END)
				WHERE
				DPA_TRASM_UTENTE.DTA_VISTA IS NULL
				AND id_trasm_singola = @sysTrasmSingola
				and DPA_TRASM_UTENTE.ID_PEOPLE = @idPeople

                UPDATE     dpa_trasm_utente
                SET        cha_in_todolist = ''0''
                WHERE      id_trasm_singola = @sysTrasmSingola
                            AND NOT  dpa_trasm_utente.dta_vista IS NULL
                            AND (cha_accettata = ''1'' OR cha_rifiutata = ''1'')
                            AND dpa_trasm_utente.id_people = @idPeople

				update dpa_todolist
				set DTA_VISTA = getdate()
				where
				id_trasm_singola = @sysTrasmSingola and ID_PEOPLE_DEST = @idPeople
				and id_project = @idOggetto
			
				IF (@@ERROR <> 0)
				BEGIN
					SET @resultValue=1
					return @resultValue
				END
			END
	
		FETCH NEXT FROM cursorTrasmSingolaFascicolo
		INTO @sysTrasmSingola, @chaTipoTrasm, @chaTipoRagione, @chaTipoDest
		END
		
		CLOSE cursorTrasmSingolaFascicolo
		DEALLOCATE cursorTrasmSingolaFascicolo
		END
	END
RETURN @resultValue
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Sp_Trasm_Rif_Torna_Mitt]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create  PROCEDURE [db_user].[Sp_Trasm_Rif_Torna_Mitt]
@IDPeopleMitt int,
@IDRuoloGlobMitt int,
@IDAmministrazioneMittente int,
@IDTrasmUtente int
AS

DECLARE @IDRagioneTrasm int
DECLARE @TipoOggetto varchar(1)
DECLARE @IDProfile int
DECLARE @IDProject int
DECLARE @IDPeopleDest int
DECLARE @IDCorrGlobaleDestinatario int
DECLARE @NomeCognomeDest varchar(128)
DECLARE @NoteRif varchar(250)
DECLARE @IDCorrGlobaleMittente int
DECLARE @CHAValida varchar(1)
declare @datenow varchar
DECLARE @Identity int
DECLARE @IdentityTrasm int

DECLARE @ReturnValue int

SET @IDRagioneTrasm =(SELECT 	SYSTEM_ID
FROM 	DPA_RAGIONE_TRASM
WHERE 	ID_AMM = @IDAmministrazioneMittente AND
VAR_DESC_RAGIONE = ''RIFIUTO'')

IF (NOT @IDRagioneTrasm IS NULL)
BEGIN

SET @TipoOggetto = (SELECT 	cha_tipo_oggetto
FROM  	DPA_TRASMISSIONE
WHERE   	system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = @IDTrasmUtente)))
IF (@TipoOggetto IS NULL)
BEGIN
SET @ReturnValue=2
END

ELSE
BEGIN

SET @IDProfile = (SELECT	id_profile
FROM		DPA_TRASMISSIONE
WHERE 	system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = @IDTrasmUtente)))

SET @IDProject = (SELECT	id_project
FROM		DPA_TRASMISSIONE
WHERE		system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = @IDTrasmUtente)))

SET @IDPeopleDest = (SELECT	id_people
FROM	DPA_TRASMISSIONE
WHERE	system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = @IDTrasmUtente)))
IF (@IDPeopleDest IS NULL)
BEGIN
SET @ReturnValue=5
END

ELSE
BEGIN

SET @IDCorrGlobaleMittente  = (SELECT	id_ruolo_in_uo
FROM	DPA_TRASMISSIONE
WHERE	system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = @IDTrasmUtente)))
IF (@IDCorrGlobaleMittente IS NULL)
BEGIN
SET @ReturnValue=6
END

ELSE
BEGIN

SET @NomeCognomeDest = (SELECT	var_desc_corr
FROM	DPA_CORR_GLOBALI
WHERE	ID_PEOPLE = @IDPeopleMitt)
IF (@NomeCognomeDest IS NULL)
BEGIN
SET @ReturnValue=6
END

set @datenow= convert(varchar,getdate(),103)
SET @NoteRif = (SELECT var_note_rif
FROM DPA_TRASM_UTENTE
WHERE system_id = @IDTrasmUtente)


INSERT INTO DPA_TRASMISSIONE
(
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
@IDRuoloGlobMitt,
@IDPeopleMitt,
@TipoOggetto,
@IDProfile,
@IDProject,
GETDATE(),
''Trasmissione rifiutata da ''+REPLACE(@NomeCognomeDest,'''','''''''')+'' in data ''+convert(varchar,getdate(),103)
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=7
END
ELSE
BEGIN
SET @Identity=scope_identity()
SET @IdentityTrasm  = @Identity

INSERT INTO DPA_TRASM_SINGOLA
(
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
CHA_TIPO_TRASM,
Var_note_sing
)
VALUES
(
@IDRagioneTrasm,
@Identity,
''R'',
@IDCorrGlobaleMittente,
''S'',
REPLACE(@NoteRif,'''','''''''')
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=8
END
ELSE
BEGIN

SET @Identity=scope_identity()

DECLARE cursor_IDUtenti

CURSOR FOR

SELECT 	P.SYSTEM_ID
FROM 	GROUPS G,
PEOPLEGROUPS PG,
PEOPLE P,
DPA_CORR_GLOBALI CG
WHERE 	PG.GROUPS_SYSTEM_ID=G.SYSTEM_ID AND
PG.PEOPLE_SYSTEM_ID=P.SYSTEM_ID AND
G.SYSTEM_ID = (SELECT A.ID_GRUPPO FROM DPA_CORR_GLOBALI A WHERE A.SYSTEM_ID = @IDCorrGlobaleMittente) AND
P.DISABLED NOT IN (''Y'') AND
P.SYSTEM_ID=CG.ID_PEOPLE AND CG.CHA_TIPO_URP != ''L''
AND CG.DTA_FINE IS NULL
AND PG.DTA_FINE IS NULL

OPEN cursor_IDUtenti

DECLARE @IDUtente int

FETCH NEXT FROM cursor_IDUtenti
INTO 	@IDUtente


WHILE @@FETCH_STATUS = 0
BEGIN

IF (@IDUtente = @IDPeopleDest)
BEGIN
SET @CHAValida = ''1''
END
ELSE
BEGIN
SET @CHAValida = ''0''
END

INSERT INTO DPA_TRASM_UTENTE
(
ID_TRASM_SINGOLA,
ID_PEOPLE,
CHA_VISTA,
CHA_ACCETTATA,
CHA_RIFIUTATA,
CHA_VALIDA,
var_note_rif,
dta_rifiutata
)
VALUES
(
@Identity,
@IDUtente,
''0'',
''0'',
''0'',
@CHAValida,
null,
null
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=9
END

FETCH NEXT FROM cursor_IDUtenti
INTO 	@IDUtente

END

CLOSE cursor_IDUtenti
DEALLOCATE cursor_IDUtenti

UPDATE DPA_TRASMISSIONE SET DTA_INVIO = GETDATE() WHERE SYSTEM_ID = @IdentityTrasm

END
END

END
END
END
END
ELSE

BEGIN
SET @ReturnValue=1
END

RETURN @ReturnValue
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[RDE_Registro_2]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW  [db_user].[RDE_Registro_2]
AS
SELECT
SYSTEM_ID AS IdRegistroRemoto,
VAR_DESC_REGISTRO AS Descrizione,
VAR_CODICE AS Codice
FROM
db_user.DPA_EL_REGISTRI
WHERE
(cha_rf IS NULL OR cha_rf = ''0'')
AND (cha_disabilitato IS NULL OR cha_disabilitato = ''0'')

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[RDE_Registro]') AND OBJECTPROPERTY(id, N'IsView') = 1)
EXEC dbo.sp_executesql @statement = N'
CREATE VIEW  [db_user].[RDE_Registro]
AS
SELECT 
	SYSTEM_ID AS IdRegistroRemoto, 
	VAR_DESC_REGISTRO AS Descrizione, 
	VAR_CODICE AS Codice
FROM
	db_user.DPA_EL_REGISTRI
WHERE
	(cha_rf IS NULL OR cha_rf = ''0'')
      	AND (cha_disabilitato IS NULL OR cha_disabilitato = ''0'')

' 
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[CREATE_NEW_NODO_TITOLARIO]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE  PROCEDURE  [db_user].[CREATE_NEW_NODO_TITOLARIO]
@idAmm INT, @livelloNodo INT,
@description VARCHAR(2000),
@codiceNodo VARCHAR(64),
@idRegistroNodo INT,
@idParent INT,
@varCodLiv1 VARCHAR(32),
@mesiConservazione INT,
@idTipoFascicolo INT,
@bloccaFascicolo VARCHAR(2),
@chaRW CHAR(1),
@sysIdTitolario INT,
@noteNodo VARCHAR(2000),
@idTitolario INT OUT

AS

DECLARE @secProj INT
DECLARE @secFasc INT
DECLARE @secRoot INT

DECLARE @varChiaveTit VARCHAR(256)
DECLARE @varChiaveFasc VARCHAR(256)
DECLARE @varChiaveRoot VARCHAR(256)
DECLARE @sysCurrReg INT

BEGIN

DECLARE currReg CURSOR FOR
select system_id
from DPA_EL_REGISTRI
WHERE ID_AMM = @idAmm and cha_rf = ''0''
BEGIN
SET @idTitolario=0

if(@idRegistroNodo IS NULL or @idRegistroNodo = '''')
SET @varChiaveTit= CONVERT(varchar(10), @idAmm) + ''_'' + @codiceNodo + ''_'' + CONVERT(varchar(64), @idParent ) + ''_0''
else
SET @varChiaveTit= @codiceNodo + ''_'' +    CONVERT(varchar(64), @idParent ) + ''_''  +  CONVERT(varchar(64),@idRegistroNodo)


-- INSERIMENTO RELATIVO AL NODO DI TITOLARIO

BEGIN

INSERT INTO PROJECT
(

DESCRIPTION,
ICONIZED,
CHA_TIPO_PROJ,
VAR_CODICE,
ID_AMM,
ID_REGISTRO,
NUM_LIVELLO,
CHA_TIPO_FASCICOLO,
ID_PARENT,
VAR_COD_LIV1,
DTA_APERTURA,
CHA_STATO,
ID_FASCICOLO,
CHA_RW,
NUM_MESI_CONSERVAZIONE,
VAR_CHIAVE_FASC,
ID_TIPO_FASC,
CHA_BLOCCA_FASC,
ID_TITOLARIO,
DTA_CREAZIONE,
VAR_NOTE
)
VALUES
(

@description,
''Y'',
''T'',
@codiceNodo,
@idAmm,
@idRegistroNodo,
@livelloNodo,
NULL,
@idParent,
@varCodLiv1,
GETDATE() ,
NULL,
NULL,
@chaRW,
@mesiConservazione,
@varChiaveTit,
@idTipoFascicolo,
@bloccaFascicolo,
@sysIdTitolario,
GETDATE(),
@noteNodo
)
-- Reperimento identity appena immessa
SET @secProj = scope_identity()
SET @idTitolario =  @secProj

IF (@@ROWCOUNT = 0)
BEGIN
SET @idTitolario=0
RETURN
END

END


-- INSERIMENTO RELATIVO AL FASCICOLO GENERALE ASSOCIATO AL NODO DI TITOLARIO
BEGIN

IF(@idRegistroNodo IS NULL or @idRegistroNodo = '''')
SET @varChiaveFasc= @codiceNodo + ''_'' +  Convert(varchar(64),@idTitolario ) + ''_0''
ELSE
SET @varChiaveFasc= @codiceNodo + ''_''+  Convert(varchar(64),@idTitolario ) + ''_''  +  CONVERT(varchar(64), @idRegistroNodo)


INSERT INTO PROJECT
(

DESCRIPTION,
ICONIZED,
CHA_TIPO_PROJ,
VAR_CODICE,
ID_AMM,
ID_REGISTRO,
NUM_LIVELLO,
CHA_TIPO_FASCICOLO,
ID_PARENT,
VAR_COD_LIV1,
DTA_APERTURA,
CHA_STATO,
ID_FASCICOLO,
CHA_RW,
NUM_MESI_CONSERVAZIONE,
VAR_CHIAVE_FASC,
ID_TIPO_FASC,
CHA_BLOCCA_FASC,
ID_TITOLARIO,
DTA_CREAZIONE,
VAR_NOTE
)
VALUES
(

@description,
''Y'',
''F'',
@codiceNodo,
@idAmm,
@idRegistroNodo,
NULL,
''G'',
@idTitolario,
NULL,
GETDATE(),
''A'',
NULL,
@chaRW,
@mesiConservazione,
@varChiaveFasc,
@idTipoFascicolo,
@bloccaFascicolo,
@sysIdTitolario,
GETDATE(),
@noteNodo
)

SET @secFasc = scope_identity()

IF (@@ROWCOUNT = 0)
BEGIN
SET @idTitolario=0
RETURN
END
END


BEGIN


if(@idRegistroNodo IS NULL or @idRegistroNodo = '''')
SET @varChiaveRoot= @codiceNodo + ''_'' + convert( varchar(64),@secFasc ) + ''_0''
else
SET @varChiaveRoot= @codiceNodo + ''_''  + convert( varchar(64),@secFasc) + ''_''  +  CONVERT(varchar(64), @idRegistroNodo)


INSERT INTO PROJECT
(

DESCRIPTION,
ICONIZED,
CHA_TIPO_PROJ,
VAR_CODICE,
ID_AMM,
ID_REGISTRO,
NUM_LIVELLO,
CHA_TIPO_FASCICOLO,
ID_PARENT,
VAR_COD_LIV1,
DTA_APERTURA,
CHA_STATO,
ID_FASCICOLO,
CHA_RW,
NUM_MESI_CONSERVAZIONE,
VAR_CHIAVE_FASC,
ID_TIPO_FASC,
CHA_BLOCCA_FASC,
ID_TITOLARIO,
DTA_CREAZIONE,
VAR_NOTE
)
VALUES
(

''Root Folder'',
''Y'',
''C'',
NULL,
@idAmm,
NULL,
NULL,
NULL,
@secFasc,
NULL,
GETDATE(),
NULL,
@secFasc,
@chaRW,
@mesiConservazione,
@varChiaveRoot,
@idTipoFascicolo,
@bloccaFascicolo,
@sysIdTitolario,
GETDATE(),
@noteNodo
)
SET @secRoot = scope_identity()

IF (@@ROWCOUNT = 0)
BEGIN
SET @idTitolario=0
RETURN
END
END

OPEN currReg
FETCH NEXT FROM currReg
INTO @sysCurrReg

-- SE IL NODO HA REGISTRO NULL ALLORA DEVONO ESSERE CREATI TANTI RECORD NELLA
-- DPA_REG_FASC QUANTI SONO I REGISTRI INTERNI ALL''AMMINISTRAZIONE
IF(@idRegistroNodo IS NULL or @idRegistroNodo = '''')
BEGIN

WHILE @@FETCH_STATUS = 0

BEGIN
INSERT INTO DPA_REG_FASC
(

id_Titolario,
num_rif,
id_registro
)
VALUES
(

@idTitolario,
1,
@sysCurrReg
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @idTitolario=0
RETURN
END

FETCH NEXT FROM currReg INTO @sysCurrReg
END


-- inoltre bisogna inserire un record nella dpa_reg_Fasc relativo al registro null
-- per tutte quelle amministrazioni che non hanno abilitata la funzione di fascicolazione
--multi registro
INSERT INTO dpa_reg_fasc
(
id_Titolario,
num_rif,
id_registro
)
VALUES
(
@idTitolario,
1,
NULL	-- SE IL NODO ? COMUNE A TUTTI p_idRegistro = NULL
)
END
ELSE -- il nodo creato ? associato a uno solo registro

BEGIN
INSERT INTO dpa_reg_fasc
(
id_Titolario,
num_rif,
id_registro
)
values
(
@idTitolario,
1,
@idRegistroNodo	-- REGISTRO SU CUI ? CRETO IL NODO
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @idTitolario=0
RETURN
END

END

END
CLOSE currReg
DEALLOCATE currReg
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SET_DATA_REG]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[SET_DATA_REG]

AS

declare @sysid int

BEGIN

DECLARE currReg CURSOR FOR
select  a.system_id
from dpa_el_registri a, dpa_reg_proto b where a.system_id=b.id_registro
and a.cha_automatico=''1'' and cha_stato=''A''
begin
SET @sysid=0

OPEN currReg
FETCH NEXT FROM currReg
INTO @sysid
WHILE @@FETCH_STATUS = 0
BEGIN
insert into dpa_registro_sto(dta_open,dta_close,num_rif,id_registro,id_people,id_ruolo_in_uo)
SELECT a.dta_open,getdate(),b.num_rif,a.system_id,1,1
from dpa_el_registri a, dpa_reg_proto b where a.system_id=b.id_registro
and a.system_id = @sysid

update dpa_el_registri set dta_open =getdate(),cha_stato =''A'',dta_close = null
WHERE SYSTEM_ID=@sysid

update dpa_reg_proto set num_rif=1 where  substring(convert(varchar,getdate(),103),1,5)=''01/01''

FETCH NEXT FROM currReg  INTO  @sysid
END


CLOSE currReg
DEALLOCATE currReg
END
END

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[GetCodReg]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE function [db_user].[GetCodReg](@idREG int)
returns varchar(16)
as
begin
declare @risultato varchar(16)

SELECT @risultato=VAR_CODICE FROM DPA_EL_REGISTRI WHERE SYSTEM_ID = @idREG

return @risultato
end
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[MIGRA_TEMPLATE_TRASM_SQL]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create  procedure [db_user].[MIGRA_TEMPLATE_TRASM_SQL]
as
set nocount on
declare @id_modello_trasm int
declare @counter int
set @counter = 0

declare @id_trasm int
declare @id_amm int
declare @nome varchar(255)
declare @cha_tipo_oggetto varchar(1)
declare @id_reg int
declare @var_note_generali varchar(255)
declare @id_people int
declare @id_ruolo_in_uo int

BEGIN TRANSACTION ROOT
PRINT ''-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER DOCUMENTI PROTOCOLLATI-- ''
declare c_modelli_trasm cursor local for
select
dt.system_id,der.id_amm,dtt.var_template,dt.cha_tipo_oggetto,
p.id_registro,dt.var_note_generali,dt.id_people,dt.id_ruolo_in_uo
from
db_user.dpa_templ_trasm as dtt,db_user.dpa_trasmissione as dt,
db_user.dpa_el_registri as der,db_user.profile as p
where
dtt.id_trasmissione = dt.system_id
and der.system_id = p.id_registro and dt.id_profile = p.system_id
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT

open c_modelli_trasm
fetch next from c_modelli_trasm into @id_trasm,@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,@id_ruolo_in_uo
while(@@fetch_status=0)
begin
set @counter = @counter + 1
print cast(@counter as varchar)+'' - Migrazione Template per Documento: ''+@nome
insert into [db_user].[dpa_modelli_trasm]
([id_amm], [nome], [cha_tipo_oggetto], [id_registro],[var_note_generali],[id_people], [single])
values (@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,0)
set @id_modello_trasm = (select scope_identity())
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
values (@id_modello_trasm,''M'',0,0,'''','''',''R'')
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
select @id_modello_trasm,''D'', dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,dts.var_note_sing, dts.cha_tipo_dest
from db_user.dpa_trasm_singola as dts where id_trasmissione = @id_trasm
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
UPDATE [db_user].[dpa_modelli_mitt_dest] SET cha_tipo_urp = ''P'' WHERE ID_MODELLO = @id_modello_trasm
AND CHA_TIPO_URP = ''U'' AND CHA_TIPO_MITT_DEST=''D''
fetch next from c_modelli_trasm into @id_trasm,@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,@id_ruolo_in_uo
end
SET @id_modello_trasm = 0
SET @id_trasm = 0
SET @id_amm = 0
SET @nome = ''''
SET @cha_tipo_oggetto = ''''
SET @id_reg = 0
SET @var_note_generali = ''''
SET @id_people = 0
SET @id_ruolo_in_uo = 0
deallocate c_modelli_trasm
PRINT ''-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER FASCICOLI ASSOCIATI AL REGISTRO -- ''
declare c_modelli_trasm cursor local for
select
dt.system_id,P.id_amm,dtt.var_template,dt.cha_tipo_oggetto,
p.id_registro,dt.var_note_generali,dt.id_people,dt.id_ruolo_in_uo
from
db_user.dpa_templ_trasm as dtt,db_user.dpa_trasmissione as dt, db_user.PROJECT as p
where
dtt.id_trasmissione = dt.system_id  and
dt.id_project = p.system_id
AND P.CHA_TIPO_PROJ = ''F'' AND P.CHA_TIPO_FASCICOLO = ''P''
AND P.ID_REGISTRO IS NOT NULL
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT

open c_modelli_trasm
fetch next from c_modelli_trasm into @id_trasm,@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,@id_ruolo_in_uo
while(@@fetch_status=0)
begin
set @counter = @counter + 1
print cast(@counter as varchar)+'' - Migrazione Template Per Fascicolo: ''+@nome
insert into [db_user].[dpa_modelli_trasm]
([id_amm], [nome], [cha_tipo_oggetto], [id_registro],[var_note_generali],[id_people], [single])
values (@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,0)
set @id_modello_trasm = (select scope_identity())
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
values (@id_modello_trasm,''M'',0,0,'''','''',''R'')
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
select @id_modello_trasm,''D'', dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,dts.var_note_sing, dts.cha_tipo_dest
from db_user.dpa_trasm_singola as dts where id_trasmissione = @id_trasm
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
UPDATE [db_user].[dpa_modelli_mitt_dest] SET cha_tipo_urp = ''P'' WHERE ID_MODELLO = @id_modello_trasm
AND CHA_TIPO_URP = ''U'' AND CHA_TIPO_MITT_DEST=''D''
fetch next from c_modelli_trasm into @id_trasm,@id_amm,@nome,@cha_tipo_oggetto,@id_reg,
@var_note_generali,@id_people,@id_ruolo_in_uo
end
SET @id_modello_trasm = 0
SET @id_trasm = 0
SET @id_amm = 0
SET @nome = ''''
SET @cha_tipo_oggetto = ''''
SET @id_reg = 0
SET @var_note_generali = ''''
SET @id_people = 0
SET @id_ruolo_in_uo = 0
deallocate c_modelli_trasm

PRINT ''-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER DOCUMENTI GRIGI-- ''
declare c_modelli_trasm cursor local for
select
dt.system_id,dtt.var_template,dt.cha_tipo_oggetto,dt.var_note_generali,
dt.id_people,dt.id_ruolo_in_uo
from dpa_trasmissione dt,profile p, dpa_templ_trasm dtt
where p.system_id = dt.id_profile and p.cha_tipo_proto = ''G'' and dtt.id_trasmissione = dt.system_id
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT

open c_modelli_trasm
fetch next from c_modelli_trasm into @id_trasm,@nome,@cha_tipo_oggetto,@var_note_generali,@id_people,@id_ruolo_in_uo
while(@@fetch_status=0)
begin
set @counter = @counter + 1
print cast(@counter as varchar)+'' - Migrazione Template Documento Grigio: ''+@nome
select  top 1 @id_reg = der.system_id, @id_amm = der.id_amm
from dpa_l_ruolo_reg as dlrr,dpa_el_registri as der
where dlrr.id_Ruolo_in_uo = @id_ruolo_in_uo and dlrr.id_registro = der.system_id
insert into [db_user].[dpa_modelli_trasm]
([id_amm], [nome], [cha_tipo_oggetto], [id_registro],[var_note_generali],[id_people], [single])
values (@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,0)
set @id_modello_trasm = (select scope_identity())
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
values (@id_modello_trasm,''M'',0,0,'''','''',''R'')
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
select @id_modello_trasm,''D'', dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,dts.var_note_sing, dts.cha_tipo_dest
from db_user.dpa_trasm_singola as dts where id_trasmissione = @id_trasm
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
UPDATE [db_user].[dpa_modelli_mitt_dest] SET cha_tipo_urp = ''P'' WHERE ID_MODELLO = @id_modello_trasm
AND CHA_TIPO_URP = ''U'' AND CHA_TIPO_MITT_DEST=''D''
fetch next from c_modelli_trasm into @id_trasm,@nome,@cha_tipo_oggetto,@var_note_generali,@id_people,@id_ruolo_in_uo
end
SET @id_modello_trasm = 0
SET @id_trasm = 0
SET @id_amm = 0
SET @nome = ''''
SET @cha_tipo_oggetto = ''''
SET @id_reg = 0
SET @var_note_generali = ''''
SET @id_people = 0
SET @id_ruolo_in_uo = 0
deallocate c_modelli_trasm

PRINT ''-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER FASCICOLI IN AMMINISTRAZIONE -- ''
declare c_modelli_trasm cursor local for
select dt.system_id,P.id_amm,dtt.var_template,dt.cha_tipo_oggetto,dt.var_note_generali,dt.id_people,dt.id_ruolo_in_uo
from
db_user.dpa_templ_trasm as dtt,db_user.dpa_trasmissione as dt, db_user.PROJECT as p
where dtt.id_trasmissione = dt.system_id  and dt.id_project = p.system_id
AND P.CHA_TIPO_PROJ = ''F'' AND P.CHA_TIPO_FASCICOLO = ''P'' AND P.ID_REGISTRO IS NULL
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT

open c_modelli_trasm
fetch next from c_modelli_trasm into @id_trasm,@id_amm,@nome,@cha_tipo_oggetto,@var_note_generali,@id_people,@id_ruolo_in_uo
while(@@fetch_status=0)
begin
set @counter = @counter + 1
print cast(@counter as varchar)+'' - Migrazione Template Fascicolo: ''+@nome
select top 1 @id_reg = der.system_id
from dpa_l_ruolo_reg as dlrr,dpa_el_registri as der
where dlrr.id_Ruolo_in_uo = @id_ruolo_in_uo and dlrr.id_registro = der.system_id
insert into [db_user].[dpa_modelli_trasm]
([id_amm], [nome], [cha_tipo_oggetto], [id_registro],[var_note_generali],[id_people], [single])
values (@id_amm,@nome,@cha_tipo_oggetto,@id_reg,@var_note_generali,@id_people,0)
set @id_modello_trasm = (select scope_identity())
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
values (@id_modello_trasm,''M'',0,0,'''','''',''R'')
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT
insert into [db_user].[dpa_modelli_mitt_dest]
([id_modello],[cha_tipo_mitt_dest],[id_corr_globali],[id_ragione],[cha_tipo_trasm],[var_note_sing],[cha_tipo_urp])
select @id_modello_trasm,''D'', dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,dts.var_note_sing, dts.cha_tipo_dest
from db_user.dpa_trasm_singola as dts where id_trasmissione = @id_trasm
if @@error <> 0 GOTO ROLLBACK_TRANSACTION_ROOT

UPDATE [db_user].[dpa_modelli_mitt_dest] SET cha_tipo_urp = ''P'' WHERE ID_MODELLO = @id_modello_trasm
AND CHA_TIPO_URP = ''U'' AND CHA_TIPO_MITT_DEST=''D''
fetch next from c_modelli_trasm into @id_trasm,@id_amm,@nome,@cha_tipo_oggetto,@var_note_generali,@id_people,@id_ruolo_in_uo
end

SET @id_modello_trasm = 0
SET @id_trasm = 0
SET @id_amm = 0
SET @nome = ''''
SET @cha_tipo_oggetto = ''''
SET @id_reg = 0
SET @var_note_generali = ''''
SET @id_people = 0
SET @id_ruolo_in_uo = 0
deallocate c_modelli_trasm

set nocount off
COMMIT TRANSACTION ROOT
PRINT''-- COMMIT DELLA TRANSAZIONE ESEGUITO CORRETTAMENTE -- ''
return 0

ROLLBACK_TRANSACTION_ROOT:
BEGIN
rollback transaction
PRINT ''--ROLLBACK TRANSAZIONE ESEGUITO CORRETTAMENTE -- ''
return -1
END

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[ADD_REGISTRO_IN_DPA_REG_FASC]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[ADD_REGISTRO_IN_DPA_REG_FASC]
@newIdRegistro INT,
@id_amm INT,
@result INT OUT

AS

declare @syscurrTit int

BEGIN

DECLARE currTit CURSOR FOR
SELECT system_id
FROM project
WHERE ID_AMM = @id_amm
AND CHA_TIPO_PROJ= ''T'' AND ID_REGISTRO IS NULL

begin
-- SE IL NODO HA REGISTRO NULL ALLORA DEVONO ESSERE CREATI TANTI RECORD NELLA
-- DPA_REG_FASC QUANTI SONO I REGISTRI INTERNI ALL''AMMINISTRAZIONE
SET @result=0


OPEN currTit
FETCH NEXT FROM currTit
INTO @syscurrTit

WHILE @@FETCH_STATUS = 0

BEGIN
INSERT INTO DPA_REG_FASC
(

id_Titolario,
num_rif,
id_registro
)
VALUES
(

@syscurrTit,
1,
@newIdRegistro
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @result=1
RETURN
END

FETCH NEXT FROM currTit  INTO  @syscurrTit
END



CLOSE currTit
DEALLOCATE currTit
END
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_setNumFasc]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create procedure [db_user].[dpa_setNumFasc] AS
/*
questa procedura azzera il numero dei fasc, sotto i nodi di titolario elencati nell dpa_reg_fasc che hanno
il campo cha_automatico=''1''. questo campo si rende necessario per gestire eventuali numerazioni  fasc sotto nodi
che non devono essere re.inizializzate ad inizio anno. per compatiilit� con gli altri clienti il valore di default del cmap o� ''0''. a cura del PM p
porlo a ''1'' sotto i nodi interessati dall''azzeramento.
*/
begin

update db_user.dpa_reg_fasc set num_rif=1 where cha_automatico=''1'' and convert(varchar,getdate(),3)=''01/01'';--to_char(getdate,''dd/mm'')=''01/01''
commit transaction
exception --when others then null;
end
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[U_TASTO_SET_GIA_VISTE]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[U_TASTO_SET_GIA_VISTE]
AS
DECLARE @ID_TIPO_FUNZIONE int
DECLARE curr CURSOR FOR
select system_id from dpa_tipo_funzione
BEGIN
OPEN curr
FETCH NEXT FROM curr INTO @ID_TIPO_FUNZIONE
WHILE @@FETCH_STATUS = 0
BEGIN
INSERT INTO DPA_FUNZIONI
(ID_AMM,COD_FUNZIONE,VAR_DESC_FUNZIONE,ID_PARENT,CHA_TIPO_FUNZ,ID_PESO,CHA_FLAG_PARENT,ID_TIPO_FUNZIONE)
VALUES
(NULL,''DO_TRASM_SET_VISTE'',''DO_TRASM_SET_VISTE'',NULL,NULL,NULL,NULL,@ID_TIPO_FUNZIONE)
FETCH NEXT FROM curr INTO @ID_TIPO_FUNZIONE
END
CLOSE curr
DEALLOCATE curr
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[GetSeRimuovibile]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'


CREATE function [db_user].[GetSeRimuovibile](@idProfile INT,@idTipoAtto INT,@id_people_connesso INT,@id_people INT,@id_ruolo_creatore INT,@Cfg_Enable_canc_doc_trasm INT)
returns INT
as
begin
declare @risultato INT
declare @idPeople INT

--se rimovibile @risultato=0 è +
SET @risultato = 0
SET @idPeople =0

--Documento protocollato --> non si può cestinare
SELECT @risultato = COUNT(NUM_PROTO) FROM PROFILE WHERE SYSTEM_ID = @idProfile
 
if(@risultato = 0)
begin

	IF (@idPeople=@id_people_connesso AND @Cfg_Enable_canc_doc_trasm=0)
	BEGIN 
	--Controllo se è stato trasmesso
	      select @risultato = count(trasm.system_id)
		  from dpa_trasmissione trasm, dpa_trasm_singola sing, dpa_trasm_utente ut, profile p
		  where trasm.system_id = sing.id_trasmissione and sing.system_id = ut.id_trasm_singola
		  and trasm.id_profile=p.SYSTEM_ID
		  and p.CHA_DA_PROTO <> 0 and p.NUM_PROTO is null
		  and trasm.id_profile = @idProfile
		
		if(@risultato>0)
        begin    
            SET @risultato = 1
            return @risultato    
        end

	END

	IF (cast(@idPeople as nvarchar)<>cast(@id_people_connesso as nvarchar))
	BEGIN
	--controllo se è stato trasmesso per interop
	      select @risultato = count(trasm.system_id)
		  from dpa_trasmissione trasm, dpa_trasm_singola sing, dpa_trasm_utente ut, dpa_ragione_trasm rag, profile p
		  where trasm.system_id = sing.id_trasmissione and sing.system_id = ut.id_trasm_singola and sing.id_ragione = rag.system_id
		  and trasm.id_profile=p.SYSTEM_ID
		  and p.CHA_DA_PROTO <> 0 and p.NUM_PROTO is null
		  and trasm.id_profile = @idProfile and rag.cha_tipo_ragione =''I'' and upper (var_desc_ragione) = upper(''INTEROPERABILITA'')
		-- metto a 0 xche si puo rimuovere solo se trasm interop
			 -- si puo rimuovere solo se trasm interop
           if(@risultato=0)
           begin
                set @risultato = 1
                return @risultato
		   end
             
           
		-- controllo di prau -- se il creatore è prau posso rimuovere
		SELECT @risultato = COUNT(*) FROM DPA_TIPO_F_RUOLO WHERE id_Ruolo_in_uo= @id_ruolo_creatore
				AND ID_TIPO_FUNZ IN
				(SELECT SYSTEM_ID FROM DPA_TIPO_FUNZIONE WHERE UPPER(VAR_COD_TIPO)=''PRAU'')
		if (@risultato > 0) 
		begin
			set @risultato = 1
			return @risultato
		end
	END


	--Verifica se il documento è repertoriato
	 select @risultato = count(profile.docnumber)
		  from profile, dpa_associazione_templates, dpa_oggetti_custom
		  where
		  profile.docnumber = dpa_associazione_templates.doc_number
		  and
		  dpa_associazione_templates.id_oggetto = dpa_oggetti_custom.system_id
		  and
		  profile.system_id = @idProfile
		  and
		  dpa_associazione_templates.id_template = @idTipoAtto
		  and
		  dpa_oggetti_custom.repertorio = 1
		  and
		  dpa_associazione_templates.valore_oggetto_db is not null
	if (@risultato > 0)
	begin 
		set @risultato = 1 
		return @risultato
	end
end

else set @risultato = 1
return @risultato
end

' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_ins_tx_new_ut_ruolo]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[dpa_ins_tx_new_ut_ruolo]
@idpeople int,
@idcorrglob int,
@returnvalue int out
AS

declare @id_trasmutente int
declare @tmpvar int
declare @sysidtx int
declare @idpeoplemitt int
declare @idruolomitt int
declare @idTrasm int
declare @ID int
declare @sysidtxut int
declare @dtainvio datetime
declare @idpeopletx int
declare @ruolo_in_uo int
declare @idragione int
declare @notegen varchar (250)
declare @note_sing varchar (250)
declare @scadenza datetime
declare @idprofile int
declare @idproject int
declare @idreg int
declare @cha_tipodest varchar(2)
declare @idtscorrglob int


BEGIN
set @returnvalue = 0

DECLARE trasm CURSOR LOCAL FOR
SELECT DISTINCT b.system_id AS ID,A.system_id as idTrasm,
a.id_people as idpeopletx,a.id_ruolo_in_uo as ruolo_in_uo,a.dta_invio as dtainvio
,a.var_note_generali as note_gen,b.id_ragione as idragione,a.id_project as idproj
,a.id_profile as idprof,b.var_note_sing as note_sing ,b.dta_scadenza as scadenza
,b.cha_tipo_dest as cha_tipodest, b.id_corr_globale as idtscorrglob
FROM
dpa_trasmissione a,dpa_trasm_singola b,dpa_trasm_utente c,dpa_ragione_trasm d
WHERE
a.system_id = b.id_trasmissione AND b.system_id = c.id_trasm_singola
AND a.dta_invio IS NOT NULL AND b.id_corr_globale = @idcorrglob
AND (a.cha_tipo_oggetto = ''D'' OR a.cha_tipo_oggetto = ''F'')
AND b.id_ragione = d.system_id
AND c.id_people NOT IN (@idpeople) and c.cha_in_todolist=''1''

OPEN trasm
FETCH next from trasm into @ID,@idTrasm,@idpeopletx,@ruolo_in_uo,@dtainvio,@notegen,@idragione,@idproject,@idprofile,@note_sing,@scadenza,@cha_tipodest,@idtscorrglob
while(@@fetch_status=0)
BEGIN
begin

select @id_trasmutente = system_id
FROM db_user.dpa_trasm_utente
WHERE id_trasm_singola = @ID
AND id_people = @idpeople;
if @@error <> 0 set @returnvalue = null
end
begin
DELETE FROM db_user.dpa_trasm_utente WHERE
id_trasm_singola = @ID AND id_people = @idpeople;
if @@error <> 0 set @returnvalue = -1
end
begin

if(@id_trasmutente=null)
begin
DELETE FROM dpa_todolist WHERE id_trasm_utente = @id_trasmutente;
if @@error <> 0 set @returnvalue = -2
end
end
begin

INSERT INTO dpa_trasm_utente (id_people, id_trasm_singola, cha_vista,
cha_accettata, cha_rifiutata, cha_valida,cha_in_todolist)
VALUES (@idpeople, @ID, ''0'',''0'', ''0'', ''1'',''1'')
select @sysidtxut = @@identity
if @@error <> 0 set @returnvalue = -3
end
begin

set @idreg=null;
if(@idprofile is not null)
begin
set @idreg =  convert(int,db_user.vardescribe (@idprofile, ''PROF_IDREG''))
end
INSERT INTO dpa_todolist(id_trasmissione, id_trasm_singola, id_trasm_utente,
dta_invio, id_people_mitt, id_ruolo_mitt,
id_people_dest, id_ragione_trasm, var_note_gen,
var_note_sing, dta_scadenza, id_profile, id_project,
id_ruolo_dest, id_registro, cha_tipo_trasm)
values
(@idTrasm, @ID,@sysidtxut,@dtainvio,@idpeopletx, @ruolo_in_uo,
@idpeople,@idragione, @notegen,
@note_sing, @scadenza, @idprofile, @idproject,
convert(int,db_user.vardescribe (@idtscorrglob,''ID_GRUPPO'')),@idreg,@cha_tipodest)
if @@error <> 0 set @returnvalue = -4
end

FETCH next from trasm into @ID,@idTrasm,@idpeopletx,@ruolo_in_uo,@dtainvio,@notegen,@idragione,@idproject,@idprofile,@note_sing,@scadenza,@cha_tipodest,@idtscorrglob

END
close trasm
deallocate trasm

set @returnvalue = 1


return @returnvalue
END


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_ANNUALE_DOC_TRASM_INTEROP]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[REPORT_ANNUALE_DOC_TRASM_INTEROP]
--- parametri di input
@anno int,
@id_registro int,
@mese int
AS

---------------------------- tabella temporanea dati
CREATE TABLE [db_user].[#DOC_TRASM_AOO]
(

[VAR_COD_AMM] [varchar] (255),
[VAR_COD_AOO] [varchar] (255),
[GENNAIO] int,
[FEBBRAIO] int,
[MARZO] int,
[APRILE] int,
[MAGGIO] int,
[GIUGNO] int,
[LUGLIO] int,
[AGOSTO] int,
[SETTEMBRE] int,
[OTTOBRE] int,
[NOVEMBRE] int,
[DICEMBRE] int,
[TOT_M_SPED] int,
[TOT_SPED]int,

) ON [PRIMARY]

-- dichiarazioni variabili locali contatori
declare @contamese int
declare @totmon int
declare @totdoc int
---------------------
--dichiarazioni e setting variabili locali mensili
declare @GENNAIO INT
SET @GENNAIO = 0
declare @FEBBRAIO INT
SET @FEBBRAIO = 0
declare @MARZO INT
SET @MARZO = 0
declare @APRILE INT
SET @APRILE = 0
declare @MAGGIO INT
SET @MAGGIO = 0
declare @GIUGNO INT
SET @GIUGNO = 0
declare @LUGLIO INT
SET @LUGLIO = 0
declare @AGOSTO INT
SET @AGOSTO = 0
declare @SETTEMBRE INT
SET @SETTEMBRE = 0
declare @OTTOBRE INT
SET @OTTOBRE = 0
declare @NOVEMBRE INT
SET @NOVEMBRE = 0
declare @DICEMBRE INT
SET @DICEMBRE = 0
--set variabili locali------------
set @contamese = 1
set @totmon  = 0
set @totdoc = 0
------------------------------------
-- variabili del cursore
DECLARE @var_amm VARCHAR (255)
DECLARE @var_aoo VARCHAR (255)
DECLARE @doc_spediti int
-- cursore elenco amministrazioni, registri , e doc spediti per oguna di essa
DECLARE c_ElencoAmm CURSOR LOCAL FOR
-- recupero delle aministrazioni e registri a cui ho spedito e conto i doc spediti dalla singola AMM (input :@id_registro,@anno)
select distinct count(*) as doc_spediti, var_codice_amm,var_codice_aoo
from profile as p,dpa_stato_invio as si where cha_tipo_proto = ''P''
and id_registro = @id_registro and p.system_id = si.id_profile and year(dta_spedizione) = @anno
group by var_codice_amm, var_codice_aoo
--apro il cursore
OPEN c_ElencoAmm
--1 fetch del cursore
FETCH next from c_ElencoAmm into  @doc_spediti,@var_amm, @var_aoo

while(@@fetch_status=0)

BEGIN -----  (ciclo 1 ) per tutte le amministrazioni
---(ciclo2 )- x ogni mese)
while (@mese >= @contamese)
begin
if (@contamese = 1)
begin
select @GENNAIO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @GENNAIO
end
if (@contamese = 2)
begin
select @FEBBRAIO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @FEBBRAIO
end
if (@contamese = 3)
begin
select @MARZO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @MARZO
end
if (@contamese = 4)
begin
select @APRILE = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @APRILE
end
if (@contamese = 5)
begin
select @MAGGIO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @MAGGIO
end
if (@contamese = 6)
begin
select @GIUGNO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @GIUGNO
end
if (@contamese = 7)
begin
select @LUGLIO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @LUGLIO
end
if (@contamese = 8)
begin
select @AGOSTO = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @AGOSTO
end
if (@contamese = 9)
begin
select @SETTEMBRE = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @SETTEMBRE
end
if (@contamese = 10)
begin
select @OTTOBRE = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @OTTOBRE
end
if (@contamese =11)
begin
select @NOVEMBRE = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @NOVEMBRE
end
if (@contamese = 12)
begin
select @DICEMBRE = count(var_codice_amm) from profile as p,dpa_stato_invio as si
where cha_tipo_proto = ''P'' and id_registro = @id_registro
and p.system_id = si.id_profile and month(dta_spedizione) = @contamese
and year(dta_spedizione) = @anno and var_codice_amm = @var_amm and var_codice_aoo = @var_aoo
--aggiorno conteggio
set @totmon = @totmon + @DICEMBRE
end
set @contamese = @contamese + 1
end ---(ciclo2 )
-- fine scansione mesi--> inserimento nella tabella temporanea
insert into #DOC_TRASM_AOO
(VAR_COD_AMM,VAR_COD_AOO,GENNAIO,FEBBRAIO,MARZO,APRILE,MAGGIO,GIUGNO,LUGLIO,AGOSTO,SETTEMBRE,OTTOBRE,NOVEMBRE,DICEMBRE,TOT_M_SPED,TOT_SPED)
VALUES
(@var_amm, @var_aoo, @GENNAIO, @FEBBRAIO, @MARZO, @APRILE, @MAGGIO, @GIUGNO, @LUGLIO, @AGOSTO, @SETTEMBRE, @OTTOBRE, @NOVEMBRE, @DICEMBRE, @totmon,0)
--reset variabili contatore mensili
set @totdoc = @totdoc + @totmon
set @contamese = 1
set @totmon = 0

FETCH next from c_ElencoAmm into @doc_spediti, @var_amm, @var_aoo

END ---- end (ciclo 1 )
/*Inseriamo il valore relativi all''anno*/
insert into #DOC_TRASM_AOO
(VAR_COD_AMM, VAR_COD_AOO, GENNAIO, FEBBRAIO, MARZO, APRILE, MAGGIO, GIUGNO, LUGLIO, AGOSTO, SETTEMBRE, OTTOBRE, NOVEMBRE, DICEMBRE, TOT_M_SPED, TOT_SPED)
VALUES
(0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0,0 ,0 ,0 ,0 ,0, 0 ,@totdoc)

DEALLOCATE c_ElencoAmm

select * from #DOC_TRASM_AOO


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[SP_INSERT_DPA_SUPPORTO]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [db_user].[SP_INSERT_DPA_SUPPORTO]
	@copia             int,
	@collFisica        varchar(250),
	@dataUltimaVer     datetime,
	@dataEliminazione  datetime,
	@esitoUltimaVer    int,
	@numeroVer         int,
	@dataProxVer       datetime,
	@dataAppoMarca     datetime,
	@dataScadMarca     datetime,
	@marca             varchar(3000),
	@idCons            int,
	@tipoSupp          int,
	@stato             char,
	@note              varchar(500),
	@query             varchar,
	@idSupp            int,
	@result            int  OUTPUT


as
 
BEGIN

	declare @numSuppProd int
	declare @numSuppTotali int

	BEGIN
		SET @numSuppProd=0
		SET @numSuppTotali=0
	        SET @result=NULL
		

                IF(@query=''I'') 
                BEGIN

			INSERT INTO DPA_SUPPORTO (
			COPIA,
			DATA_PRODUZIONE,
			VAR_COLLOCAZIONE_FISICA,
			DATA_ULTIMA_VERIFICA,
			DATA_ELIMINAZIONE,
			ESITO_ULTIMA_VERIFICA,
			VERIFICHE_EFFETTUATE,
			DATA_PROX_VERIFICA,
			DATA_APPO_MARCA,
			DATA_SCADENZA_MARCA,
			VAR_MARCA_TEMPORALE,
			ID_CONSERVAZIONE,
			ID_TIPO_SUPPORTO,
			CHA_STATO,
			VAR_NOTE
			)
			VALUES
			(
			@copia,
			getdate(),
			@collFisica,
			@dataUltimaVer,
			@dataEliminazione,
			@esitoUltimaVer,
			@numeroVer,
			@dataProxVer,
			@dataAppoMarca,
			@dataScadMarca,
			@marca,
			@idCons,
			@tipoSupp,
			@stato,
			@note
                        )

			SELECT @numSuppProd=COUNT(*) FROM DPA_SUPPORTO WHERE (CHA_STATO=''P'' OR CHA_STATO=''E'' OR CHA_STATO=''V'') AND ID_CONSERVAZIONE=@idCons

			SELECT @numSuppTotali=COUNT(*) FROM DPA_SUPPORTO WHERE ID_CONSERVAZIONE=@idCons

			IF(@numSuppProd=@numSuppTotali) 
                        BEGIN

				UPDATE DPA_AREA_CONSERVAZIONE SET CHA_STATO=''C'' WHERE SYSTEM_ID=@idCons

				UPDATE DPA_ITEMS_CONSERVAZIONE SET CHA_STATO=''C'' WHERE ID_CONSERVAZIONE=@idCons
	
				SET @result=1
                        END
                        ELSE
			BEGIN
				SET @result=0
                       	END
		END

		ELSE
		BEGIN

			UPDATE DPA_SUPPORTO SET DATA_PRODUZIONE=getdate(), VAR_COLLOCAZIONE_FISICA=@collFisica,
			DATA_PROX_VERIFICA=@dataProxVer, CHA_STATO= @stato, VAR_NOTE=@note, DATA_ULTIMA_VERIFICA=getdate(), VERIFICHE_EFFETTUATE=@numeroVer, ESITO_ULTIMA_VERIFICA=@esitoUltimaVer 
			WHERE SYSTEM_ID=@idSupp

      			SELECT @numSuppProd=COUNT(*)  FROM DPA_SUPPORTO WHERE (CHA_STATO=''P'' OR CHA_STATO=''E'' OR CHA_STATO=''V'') AND 
                        ID_CONSERVAZIONE=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=@idSupp)

			SELECT @numSuppTotali=COUNT(*) FROM DPA_SUPPORTO WHERE ID_CONSERVAZIONE=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=@idSupp)

                        IF(@numSuppProd=@numSuppTotali) 
			BEGIN

				UPDATE DPA_AREA_CONSERVAZIONE SET CHA_STATO=''C'' WHERE SYSTEM_ID=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=@idSupp)

				UPDATE DPA_ITEMS_CONSERVAZIONE SET CHA_STATO=''C'' WHERE ID_CONSERVAZIONE=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=@idSupp)

				SET @result=1
			END
			ELSE
			BEGIN
				SET @result=0
			END


		END 

	END 

END



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[dpa_upd_todolist_doc_cestino]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
CREATE PROCEDURE [db_user].[dpa_upd_todolist_doc_cestino]
@idProfile int,
@returnvalue int out
AS

declare @id_trasmutente int
declare @idTrasm int
declare @idpeopletx int

BEGIN
set @returnvalue = 0

DECLARE trasm CURSOR LOCAL FOR
select
id_trasmissione,id_people_dest,id_trasm_utente
from dpa_todolist where id_profile=@idProfile;

OPEN trasm
FETCH next from trasm into @idTrasm,@idpeopletx,@id_trasmutente
while(@@fetch_status=0)
BEGIN

UPDATE dpa_trasm_utente
SET  CHA_IN_TODOLIST = ''0'',
CHA_VISTA  = (CASE WHEN DTA_VISTA IS NULL THEN 1 ELSE 0 END)
WHERE SYSTEM_ID = @id_trasmutente


if @@error <> 0 set @returnvalue = -1

FETCH next from trasm into @idTrasm,@idpeopletx,@id_trasmutente

END    -- GENERALE
-- fine codice ciclo cursore
close trasm
deallocate trasm
set @returnvalue = 1


return @returnvalue
END
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[getPeopleName]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
create function [db_user].[getPeopleName] (@peopleId int)
returns varchar(256)
as
begin

declare @fullName varchar(256)

select @fullName = full_name
from people
where system_id = @peopleId;

return @fullName

end

' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_ANNUALE_REG]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'




CREATE PROCEDURE [db_user].[REPORT_ANNUALE_REG]
/*PARAMETRI DI INPUT**************************************************************************************************************/
@mese int,
@anno int,
@id_registro int,
@id_amm int,
@VAR_SEDE varchar (255) =''''
AS

--verifica valore parametro @var_sede
if (@var_sede ='''')
begin
set @var_sede = null
end

/*****DICHIARAZIONE DELLE VARIABILI**********************************************************************************************/
/******************************************************************/
/**********************Dati Riepilogativi dell''anno*********************/
/******************************************************************/
declare @totAnnDoc float
declare @totAnnProt float
declare @percAnnProt float
declare @totAnnProtA float
declare @percAnnProtA float
declare @totAnnProtP float
declare @percAnnProtP float
declare @totAnnProtI float
declare @percAnnProtI float
declare @totAnnDocGrigi float
declare @percAnnDocGrigi float
declare @totAnnDocClass float
declare @percAnnDocClass float
declare @totAnnDocProf float
declare @totAnnProtClass float
declare	@percAnnProtClass float
declare @totAnnProtAClass float
declare @percAnnProtAClass float
declare @totAnnProtPClass float
declare @percAnnProtPClass float
declare @totAnnProtIClass float
declare @percAnnProtIClass float
declare @totAnnProtAnnul float
declare @percAnnProtAnnul float
/******************************************************************/
/**************Dati Riepilogativi del Mese*****************************/
/******************************************************************/
/*Dati Generali*/
declare @totMonDoc float
declare @totMonProt float
declare @totMonProtA float
declare @totMonProtP float
declare @totMonProtI float
declare @totMonProtAnnul float
declare @totMonDocGrigi float
declare @totMonDocClass float
declare @totMonClassProtAnnul float
declare @totMonClassGrigi float
/*docs senza docs acq*/
declare @totMonDocProf float
declare @totMonProtClass float
declare @totMonProtAClass float
declare @totMonProtPClass float
declare @totMonProtIClass float

/*Percentuali*/
declare @percMonProt float
declare @percMonProtA float
declare @percMonProtP float
declare @percMonProtI float
declare @percMonProtAnnul float
declare @percMonDocGrigi float
declare @percMonDocClass float
declare @percMonProtClass float
declare @percMonProtAClass float
declare @percMonProtPClass float
declare @percMonProtIClass float
/*Dichiarazione delle variabili per i profili (Immagini) *************************************************************************************************/
/*Mensili*/
declare @totMonProf float
declare @totMonProfProt float
declare @totMonProfProtA float
declare @totMonProfProtP float
declare @totMonProfProtI float
declare @totMonProfGrigi float
declare @totMonProfProtAnnul float
/*Annuali*/
declare	@totAnnProf float
declare	@totAnnProfProt float
declare	@totAnnProfProtA float
declare	@totAnnProfProtP float
declare	@totAnnProfProtI float
declare	@totAnnProfGrigi float
declare @totAnnProfProtAnnull float
/*Percentuali*/
declare	@PercAnnProfProt float
declare	@PercAnnProfProtA float
declare	@PercAnnProfProtP float
declare	@PercAnnProfProtI float
declare @PercAnnProfProtAnnull float
declare	@PercAnnProfGrigi float

declare @TotAnnDocGrigiClass float
declare @percAnnDocGrigiClass float

declare @TotAnnProtAnnulClass float
declare @percAnnProtannulClass float

/*Impostiamo i valori di default*/
/*Mensili*/
set @totMonProf  = 0
set @totMonProfProt  = 0
set @totMonProfProtA  = 0
set @totMonProfProtP  = 0
set @totMonProfProtI  = 0
set @totMonProfGrigi  = 0
/*Annuali*/
set @totAnnProf  = 0
set @totAnnProfProt  = 0
set @totAnnProfProtA  = 0
set @totAnnProfProtP = 0
set @totAnnProfProtI = 0
set @totAnnProfGrigi = 0
set @totAnnProfProtAnnull = 0
/*Percentuali*/
set @PercAnnProfProt = 0
set @PercAnnProfProtA = 0
set @PercAnnProfProtP = 0
set @PercAnnProfProtI = 0
set @PercAnnProfGrigi = 0
set @PercAnnProfProtAnnull = 0
/**************************************************************************************************************************************************/


DECLARE @MESE_VC VARCHAR (255)

set @percMonProt = 0
set @percMonProtA = 0
set @percMonProtP = 0
set @percMonProtI = 0
set @percMonProtAnnul = 0
set @percMonDocGrigi = 0
set @percMonDocClass = 0
set @percMonProtClass = 0
set @percMonProtAClass = 0
set @percMonProtPClass = 0
set @percMonProtIClass = 0
/******************************************************************/
set @totAnnDoc = 0
set @totAnnProt = 0
set @totAnnProtA = 0
set @totAnnProtP = 0
set @totAnnProtI = 0
set @totAnnDocGrigi = 0
set @totAnnDocClass = 0
set @totAnnDocProf = 0
set @totAnnProtClass = 0
set @totAnnProtAClass = 0
set @totAnnProtPClass = 0
set @totAnnProtIClass = 0
set @totAnnProtAnnul = 0
set @percAnnProt = 0
set @percAnnProtA = 0
set @percAnnProtP = 0
set @percAnnProtI = 0
set @percAnnDocGrigi = 0
set @percAnnDocClass = 0
set @percAnnProtClass = 0
set @percAnnProtAClass = 0
set @percAnnProtPClass = 0
set @percAnnProtIClass = 0
set @percAnnProtAnnul = 0

set @totMonProfProt  = 0
set @totMonProfProtA  = 0
set @totMonProfProtP  = 0
set @totMonProfProtI  = 0
set @totMonProfGrigi  = 0

set @TotAnnDocGrigiClass = 0
set @percAnnDocGrigiClass = 0
set @TotAnnProtAnnulClass = 0
set @percAnnProtannulClass = 0


/* Creo una tabella temporanea */
CREATE TABLE [db_user].[#CC_REPORT_ANNUALE_BY_REG]
(
[THING] [varchar] (50),
[TOT_DOC] [varchar] (250),
[GRIGI] [varchar] (250),
[PERC_GRIGI] [varchar] (250),
[PROT] [varchar] (250),
[PERC_PROT] [varchar] (250),
[ANNULL] [varchar] (250),
[PERC_ANNULL] [varchar] (250),
[ARRIVO] [varchar] (250),
[PERC_ARRIVO] [varchar] (250),
[PARTENZA] [varchar] (250),
[PERC_PARTENZA] [varchar] (250),
[INTERNI] [varchar] (250),
[PERC_INTERNI] [varchar] (250),

) ON [PRIMARY]

/*cicliamo dall''inizio dell''anno fino al mese di interesse*/
declare @i int
set @i = 0
while @i < @mese
begin
/*Incrementiamo il contatore*/
set @i = @i +1
/*Query che recupera i dati del singolo mese*/
/*Totale dati del mese*/
/*Non filtriamo sul registro, questa query deve essere ripetuta per tutti i mesi di interesse per ogni registro*/
if(@var_sede <>'''' and @var_sede is not null)
begin
select @totMonProtA = totMonProtA,
@totMonProtP = totMonProtP,
@totMonProtI = totMonProtI,
@totMonProtAnnul = totMonProtAnnul,
@totMonDocGrigi = totMonDocGrigi,
@totMonProfProtA  = totMonProfProtA,
@totMonProfProtP  = totMonProfProtP,
@totMonProfProtI  = totMonProfProtI,
@totMonProfProtAnnul = totMonProfProtAnnul,
@totMonProfGrigi  = totMonProfGrigi,
@totMonProtAClass = totMonProtAClass,
@totMonProtPClass = totMonProtPClass,
@totMonProtIClass = totMonProtIClass,
@totMonClassProtAnnul = totMonClassProtAnnul,
@totMonClassGrigi = totMonClassGrigi
from
(select count(system_id) as totMonProtA from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''A'' AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totMonProtA,
(select count(system_id) as totMonProtP from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''P'' AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totMonProtP,
(select count(system_id) as totMonProtI from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''I'' AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totMonProtI,
(select count(system_id) as totMonProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and profile.var_sede = @var_sede and dta_annulla is not null) as totMonProtAnnul,
(select count(profile.system_id) as totMonDocGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and profile.cha_tipo_proto = ''G'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno and profile.var_sede = @var_sede) as totMonDocGrigi,
(select count(p.system_id) as totMonProfProtA from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''A'' AND p.var_sede = @var_sede and dta_annulla is null) as totMonProfProtA,
(select count(p.system_id) as totMonProfProtP from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''P'' AND p.var_sede = @var_sede and dta_annulla is null) as totMonProfProtP,
(select count(p.system_id) as totMonProfProtI from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''I'' AND p.var_sede = @var_sede and dta_annulla is null) as totMonProfProtI,
(select count(p.system_id) as totMonProfProtAnnul from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND p.var_sede = @var_sede  and dta_annulla is not null) as totMonProfProtAnnul,
(select count(profile.system_id) as totMonProfGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and cha_img = ''0'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno and cha_tipo_proto = ''G'' AND profile.var_sede = @var_sede) as totMonProfGrigi,
(select count(system_id) As totMonProtAClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''A'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and profile.var_sede = @var_sede and dta_annulla is null) as totProtAClass,
(select count(system_id) As totMonProtPClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''P'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totProtPClass,
(select count(system_id) As totMonProtIClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''I'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totProtIClass,
(select count(system_id) As totMonClassProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is not null) as totMonClassProtAnnul,
(select count(profile.system_id) As totMonClassGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and num_proto is null AND cha_tipo_proto = ''G'' AND MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno AND profile.var_sede = @var_sede) as totMonClassGrigi
end
else
begin
select @totMonProtA = totMonProtA,
@totMonProtP = totMonProtP,
@totMonProtI = totMonProtI,
@totMonProtAnnul = totMonProtAnnul,
@totMonDocGrigi = totMonDocGrigi,
@totMonProfProtA  = totMonProfProtA,
@totMonProfProtP  = totMonProfProtP,
@totMonProfProtI  = totMonProfProtI,
@totMonProfProtAnnul = totMonProfProtAnnul,
@totMonProfGrigi  = totMonProfGrigi,
@totMonProtAClass = totMonProtAClass,
@totMonProtPClass = totMonProtPClass,
@totMonProtIClass = totMonProtIClass,
@totMonClassProtAnnul = totMonClassProtAnnul,
@totMonClassGrigi = totMonClassGrigi
from
(select count(system_id) as totMonProtA from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''A'' AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totMonProtA,
(select count(system_id) as totMonProtP from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''P'' AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totMonProtP,
(select count(system_id) as totMonProtI from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''I'' AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totMonProtI,
(select count(system_id) as totMonProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and dta_annulla is not null) as totMonProtAnnul,
(select count(profile.system_id) as totMonDocGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and profile.cha_tipo_proto = ''G'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno) as totMonDocGrigi,
(select count(p.system_id) as totMonProfProtA from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''A'' AND dta_annulla is null) as totMonProfProtA,
(select count(p.system_id) as totMonProfProtP from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''P'' AND dta_annulla is null) as totMonProfProtP,
(select count(p.system_id) as totMonProfProtI from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''I'' AND dta_annulla is null) as totMonProfProtI,
(select count(p.system_id) as totMonProfProtAnnul from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is not null) as totMonProfProtAnnul,
(select count(profile.system_id) as totMonProfGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and cha_img = ''0'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno and cha_tipo_proto = ''G'') as totMonProfGrigi,
(select count(system_id) As totMonProtAClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''A'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and dta_annulla is null) as totProtAClass,
(select count(system_id) As totMonProtPClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''P'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totProtPClass,
(select count(system_id) As totMonProtIClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''I'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totProtIClass,
(select count(system_id) As totMonClassProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is not null) as totMonClassProtAnnul,
(select count(profile.system_id) As totMonClassGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and num_proto is null AND cha_tipo_proto = ''G'' AND MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno) as totMonClassGrigi
end

/*Calcoliamo i valori annuali a partire dai dati del mese***************************************/
/*Documenti protocollati annullati e grigi*/
set @totMonProt = @totMonProtA + @totMonProtP + @totMonProtI + @totMonProtAnnul
set @totMonDoc = @totMonProt + @totMonDocGrigi
set @totAnnDoc = @totAnnDoc + @totMonDoc
set @totAnnProt = @totAnnProt + @totMonProt
set @totAnnProtA = @totAnnProtA + @totMonProtA
set @totAnnProtP = @totAnnProtP + @totMonProtP
set @totAnnProtI = @totAnnProtI + @totMonProtI
set @totAnnDocGrigi = @totAnnDocGrigi + @totMonDocGrigi
set @totAnnProtAnnul = @totAnnProtAnnul + @totMonProtAnnul

/*Documenti classificati protocollati annullati e grigi*/
set @totMonDocClass = @totMonClassGrigi + @totMonClassProtAnnul + @totMonProtAClass + @totMonProtPClass + @totMonProtIClass
set @totAnnDocClass = @totAnnDocClass + @totMonDocClass
set @totMonProtClass = @totMonClassProtAnnul + @totMonProtAClass + @totMonProtPClass + @totMonProtIClass
set @totAnnProtClass = @totAnnProtClass + @totMonProtClass
set @totAnnProtAClass = @totAnnProtAClass + @totMonProtAClass
set @totAnnProtPClass = @totAnnProtPClass + @totMonProtPClass
set @totAnnProtIClass = @totAnnProtIClass + @totMonProtIClass
set @totAnnProtAnnulClass = @totAnnProtAnnulClass + @totMonClassProtAnnul
set @TotAnnDocGrigiClass = @TotAnnDocGrigiClass + @totMonClassGrigi

/*Documenti senza immagine protocollati annullati e grigi*/
set @totMonProf = @totMonProfProtAnnul + @totMonProfGrigi + @totMonProfProtA + @totMonProfProtP + @totMonProfProtI
set @totAnnProf = @totAnnProf + @totMonProf
set @totMonProfProt =  @totMonProfProtAnnul + @totMonProfProtA + @totMonProfProtP + @totMonProfProtI
set @totAnnProfProt  = @totAnnProfProt + @totMonProfProt
set @totAnnProfProtA  = @totAnnProfProtA + @totMonProfProtA
set @totAnnProfProtP = @totAnnProfProtP + @totMonProfProtP
set @totAnnProfProtI = @totAnnProfProtI + @totMonProfProtI
set @totAnnProfGrigi = @totAnnProfGrigi + @totMonProfGrigi
set @totAnnProfProtAnnull = @totAnnProfProtAnnull + @totMonProfProtAnnul

/*****Percentuali************************************************************************/
/*Percentuale dei protoclli annullati classificati*/
if(@TotAnnProtAnnulClass <> 0 and @totAnnProtClass <> 0)
begin
set @percAnnProtannulClass = ROUND(((@TotAnnProtAnnulClass / @totAnnProtClass) * 100),2)
end
/*Percentuale annuale dei documenti grigi classificati*/
if(@totAnnDocClass <> 0 and @TotAnnDocGrigiClass <> 0)
begin
set @percAnnDocGrigiClass = ROUND(((@TotAnnDocGrigiClass / @totAnnDocClass) * 100),2)
end
/*Percentuale dei profili annullati*/
if((@TotAnnProfProt <> 0) AND (@totAnnProfProtAnnull <> 0))
begin
set @PercAnnProfProtAnnull = ROUND(((@totAnnProfProtAnnull / @TotAnnProfProt) * 100),2)
end
if(@totAnnProt <> 0)
begin

/*Percentuale di documenti protocollati*/
if(@totAnnProt <> 0 and @totAnnDoc <> 0)
set @percAnnProt = ROUND(((@totAnnProt / @totAnnDoc) * 100),2)
if(@totAnnProtA <> 0 and @totAnnProt <> 0)
begin
/*Percentuale di protocolli in arrivo*/
set @percAnnProtA = ROUND(((@totAnnProtA / @totAnnProt) * 100),2)
end

if(@totAnnProtP <> 0  and @totAnnProt <> 0)
begin
/*Percentuale di protocolli in partenza*/
set @percAnnProtP = ROUND(((@totAnnProtP / @totAnnProt) * 100),2)
end

if(@totAnnProtI <> 0  and @totAnnProt <> 0)
begin
/*Percentuale di protocolli interni*/
set @percAnnProtI = ROUND(((@totAnnProtI / @totAnnProt) * 100),2)
end

if(@totAnnProtAnnul <> 0  and @totAnnProt <> 0)
begin
/*Percentuale di protocolli annullati*/
set @percAnnProtAnnul = ROUND(((@totAnnProtAnnul / @totAnnProt) * 100),2)
end
end

if(@totAnnDoc <> 0)
begin
if(@totAnnDocGrigi <> 0 and @totAnnDoc <> 0)
begin
/*Percentuale di doc grigi*/
set @percAnnDocGrigi = ROUND(((@totAnnDocGrigi / @totAnnDoc ) * 100),2)
end
if(@totAnnDocClass <> 0 and @totAnnDoc <> 0)
begin
/*Percentuale di doc classificati*/
set @percAnnDocClass = ROUND(((@totAnnDocClass / @totAnnDoc) * 100),2)
end
end

if(@totAnnDocClass <> 0)
begin
if(@totAnnProtClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati*/
set @percAnnProtClass = ROUND(((@totAnnProtClass / @totAnnDocClass)*100),2)
if(@totAnnProtAClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati in arrivo*/
set @percAnnProtAClass = ROUND(((@totAnnProtAClass / @totAnnProtClass) * 100),2)
end
if(@totAnnProtPClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati in partenza*/
set @percAnnProtPClass = ROUND(((@totAnnProtPClass / @totAnnProtClass) * 100),2)
end
if(@totAnnProtIClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati interni*/
set @percAnnProtIClass = ROUND(((@totAnnProtIClass / @totAnnProtClass) * 100),2)
end
end
end

/*Calcoliamo le percentuali mensili**************************************************************************************/
if(@totMonDoc <> 0)
begin
if(@totMonProt <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli*/
set @percMonProt = ROUND(((@totMonProt / @totMonDoc) * 100),2)
if(@totMonProtA <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli ARRIVO*/
set @percMonProtA = ROUND(((@totMonProtA / @totMonProt) * 100),2)
end
if(@totMonProtP <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli PARTENZA*/
set @percMonProtP = ROUND(((@totMonProtP / @totMonProt) * 100),2)
end
if(@totMonProtI <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli INTERNI*/
set @percMonProtI = ROUND(((@totMonProtI / @totMonProt) * 100),2)
end
if(@totMonProtAnnul <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli Annullati*/
set @percMonProtAnnul = ROUND(((@totMonProtAnnul / @totMonProt) * 100),2)
end
end

if(@totMonDocGrigi <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di Doc Grigi*/
set @percMonDocGrigi = ROUND(((@totMonDocGrigi / @totMonDoc) * 100),2)
end
if(@totMonDocClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di Doc Class*/
set @percMonDocClass = ROUND(((@totMonDocClass / @totMonDoc) * 100),2)
end
if(@totMonProtClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Class*/
set @percMonProtClass = ROUND(((@totMonProtClass / @totMonDoc) * 100),2)
end
if(@totMonProtAClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Arrivo Class*/
set @percMonProtAClass = ROUND(((@totMonProtAClass / @totMonDoc) * 100),2)
end
if(@totMonProtPClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Partenza Class*/
set @percMonProtPClass = ROUND(((@totMonProtPClass / @totMonDoc) * 100),2)
end
if(@totMonProtIClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Interni Class*/
set @percMonProtIClass = ROUND(((@totMonProtIClass / @totMonDoc) * 100),2)
end

end
/*******************************************************************************************************************/
/*Calcoliamo le percentuali  dei profili ( Immagini)  */
if(@totAnnProf<>0)
begin
if(@totAnnProfGrigi<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili grigi*/
set @PercAnnProfGrigi = ROUND(((@totAnnProfGrigi / @totAnnProf) * 100),2)
end

if(@totAnnProfProt<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati*/
set @PercAnnProfProt = ROUND(((@totAnnProfProt / @totAnnProf) * 100),2)
end

if(@totAnnProfProtA<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati ARRIVO*/
set @PercAnnProfProtA = ROUND(((@totAnnProfProtA / @totAnnProfProt) * 100),2)
end

if(@totAnnProfProtP<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati PARTENZA*/
set @PercAnnProfProtP = ROUND(((@totAnnProfProtP / @totAnnProfProt) * 100),2)
end

if(@totAnnProfProtI<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati PARTENZA*/
set @PercAnnProfProtI = ROUND(((@totAnnProfProtI / @totAnnProfProt) * 100),2)
end
end
/*******************************************************************************************************************/

Select @MESE_VC =
CASE @i
WHEN 1 THEN ''Gennaio''
WHEN 2 THEN ''Febbraio''
WHEN 3 THEN ''Marzo''
WHEN 4 THEN ''Aprile''
WHEN 5 THEN ''Maggio''
WHEN 6 THEN ''Giugno''
WHEN 7 THEN ''Luglio''
WHEN 8 THEN ''Agosto''
WHEN 9 THEN ''Settembre''
WHEN 10 THEN ''Ottobre''
WHEN 11 THEN ''Novembre''
WHEN 12 THEN ''Dicembre''
end

/*inseriamo i dati mensili in una tabella*/
/*(ANNO,MESE,TOT_DOC,TOT_PROT,TOT_PROT_A,TOT_PROT_P,TOT_PROT_I,TOT_CLASS,TOT_PROF,TOT_CLASS_PROT,TOT_CLASS_PROT_A,TOT_CLASS_PROT_P,TOT_CLASS_PROT_I,TOT_DOC_GRIGI,TOT_PROT_ANNUL)*/
insert into #CC_REPORT_ANNUALE_BY_REG
(THING, TOT_DOC, GRIGI,PERC_GRIGI, PROT,PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(@MESE_VC, @totMonDoc, @totMonDocGrigi, convert(varchar,@percMonDocGrigi), @totMonProt, convert(varchar,@percMonProt), @totMonProtAnnul, convert(varchar,@percMonProtAnnul), @totMonProtA, convert(varchar,@percMonProtA), @totMonProtP, convert(varchar,@percMonProtP), @totMonProtI, convert(varchar,@percMonProtI))


/*RESET DELLE VARIABILI*/
set @totMonDoc = 0
set @totMonProt = 0
set @totMonProtA = 0
set @totMonProtP = 0
set @totMonProtI = 0
set @totMonDocGrigi = 0
/*RESET DELLE PERCENTUALI MENSILI*/
set @percMonProt = 0
set @percMonProtA = 0
set @percMonProtP = 0
set @percMonProtI = 0
set @percMonProtAnnul = 0
set @percMonDocGrigi = 0
set @percMonDocClass = 0
set @percMonProtClass = 0
set @percMonProtAClass = 0
set @percMonProtPClass = 0
set @percMonProtIClass = 0
/**********************************/
end

/*Inseriamo nella tabella i valori reltivi all''anno*/
/*Aggiungiamo al totale dei documenti annuale il totale dei documenti grigi dell''anno */
set @totAnnDoc = @totAnnDoc
insert into #CC_REPORT_ANNUALE_BY_REG
(THING, TOT_DOC, GRIGI,PERC_GRIGI, PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(@anno, @totAnnDoc, @totAnnDocGrigi, convert(varchar,@percAnnDocGrigi), @totAnnProt, convert(varchar,@percAnnProt), @totAnnProtAnnul, convert(varchar,@percAnnProtAnnul), @totAnnProtA, convert(varchar,@percAnnProtA), @totAnnProtP, convert(varchar,@percAnnProtP), @totAnnProtI, convert(varchar,@percAnnProtI))


/*Inseriamo nella tabella i valori reltivi alla classificazione*/
insert into #CC_REPORT_ANNUALE_BY_REG
(THING, TOT_DOC, GRIGI, PERC_GRIGI, PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Classificati'', @totAnnDocClass, @TotAnnDocGrigiClass, @percAnnDocGrigiClass, @totAnnProtClass, convert(varchar,@percAnnProtClass), @TotAnnProtAnnulClass, @percAnnProtannulClass, @totAnnProtAClass, convert(varchar,@percAnnProtAClass), @totAnnProtPClass, convert(varchar,@percAnnProtPClass), @totAnnProtIClass, convert(varchar,@percAnnProtIClass))


/*Inseriamo nella tabella i valori reltivi alle Immagini - Doc. Fisici Acquisiti -*/
insert into #CC_REPORT_ANNUALE_BY_REG
(THING, TOT_DOC, GRIGI, PERC_GRIGI, PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Senza Img.'', @totAnnProf, @totAnnProfGrigi, convert(varchar,@PercAnnProfGrigi), @totAnnProfProt, convert(varchar,@PercAnnProfProt), @totAnnProfProtAnnull, @PercAnnProfProtAnnull, @totAnnProfProtA, convert(varchar,@PercAnnProfProtA), @totAnnProfProtP, convert(varchar,@PercAnnProfProtP), @totMonProfProtI, convert(varchar,@PercAnnProfProtI))

/*RESET DELLE PERCENTUALI ANNUALI*/
set @percAnnProt = 0
set @percAnnProtA = 0
set @percAnnProtP = 0
set @percAnnProtI = 0
set @percAnnProtAnnul = 0
set @percAnnDocGrigi = 0
set @percAnnDocClass = 0
set @percAnnProtClass = 0
set @percAnnProtAClass = 0
set @percAnnProtPClass = 0
set @percAnnProtIClass = 0
set @PercAnnProfGrigi = 0
set @PercAnnProfProt = 0
set @PercAnnProfProtA = 0
set @PercAnnProfProtP = 0
set @PercAnnProfProtI = 0
/************************************/
/*Recuperiamo i valori dalla tabella temporanea*/
select * from #CC_REPORT_ANNUALE_BY_REG


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_MENSILE_REG]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE PROCEDURE [db_user].[REPORT_MENSILE_REG]
/*PARAMETRI DI INPUT**************************************************************************************************************/
@mese int,
@anno int,
@id_registro int,
@id_amm int,
@VAR_SEDE varchar (255) =''''
AS

--verifica valore parametro @var_sede
if (@var_sede ='''')
begin
set @var_sede = null
end

/*****DICHIARAZIONE DELLE VARIABILI**********************************************************************************************/
/******************************************************************/
/**********************Dati Riepilogativi dell''anno*********************/
/******************************************************************/
declare @totAnnDoc float
declare @totAnnProt float
declare @percAnnProt float
declare @totAnnProtA float
declare @percAnnProtA float
declare @totAnnProtP float
declare @percAnnProtP float
declare @totAnnProtI float
declare @percAnnProtI float
declare @totAnnDocGrigi float
declare @percAnnDocGrigi float
declare @totAnnDocClass float
declare @percAnnDocClass float
declare @totAnnDocProf float
declare @totAnnProtClass float
declare	@percAnnProtClass float
declare @totAnnProtAClass float
declare @percAnnProtAClass float
declare @totAnnProtPClass float
declare @percAnnProtPClass float
declare @totAnnProtIClass float
declare @percAnnProtIClass float
declare @totAnnProtAnnul float
declare @percAnnProtAnnul float
/******************************************************************/
/**************Dati Riepilogativi del Mese*****************************/
/******************************************************************/
/*Dati Generali*/
declare @totMonDoc float
declare @totMonProt float
declare @totMonProtA float
declare @totMonProtP float
declare @totMonProtI float
declare @totMonProtAnnul float
declare @totMonDocGrigi float
declare @totMonDocClass float
declare @totMonClassProtAnnul float
/*docs senza docs acq*/
declare @totMonDocProf float
declare @totMonProtClass float
declare @totMonProtAClass float
declare @totMonProtPClass float
declare @totMonProtIClass float
/*Percentuali*/
declare @percMonProt float
declare @percMonProtA float
declare @percMonProtP float
declare @percMonProtI float
declare @percMonProtAnnul float
declare @percMonDocGrigi float
declare @percMonDocClass float
declare @percMonProtClass float
declare @percMonProtAClass float
declare @percMonProtPClass float
declare @percMonProtIClass float
/*Dichiarazione delle variabili per i profili (Immagini) *************************************************************************************************/
/*Mensili*/
declare @totMonProf float
declare @totMonProfProt float
declare @totMonProfProtA float
declare @totMonProfProtP float
declare @totMonProfProtI float
declare @totMonProfGrigi float
declare @totMonProfProtAnnul float
declare @totMonClassGrigi float
/*Annuali*/
declare	@totAnnProf float
declare	@totAnnProfProt float
declare	@totAnnProfProtA float
declare	@totAnnProfProtP float
declare	@totAnnProfProtI float
declare	@totAnnProfGrigi float
declare @totAnnProfProtAnnull float
/*Percentuali*/
declare	@PercAnnProfProt float
declare	@PercAnnProfProtA float
declare	@PercAnnProfProtP float
declare	@PercAnnProfProtI float
declare @PercAnnProfProtAnnull float
declare	@PercAnnProfGrigi float

declare @TotAnnDocGrigiClass float
declare @percAnnDocGrigiClass float

declare @TotAnnProtAnnulClass float
declare @percAnnProtannulClass float

/*Impostiamo i valori di default*/
/*Mensili*/
set @totMonProf  = 0
set @totMonProfProt  = 0
set @totMonProfProtA  = 0
set @totMonProfProtP  = 0
set @totMonProfProtI  = 0
set @totMonProfGrigi  = 0
set @totMonProfProtAnnul = 0
set @totMonClassGrigi = 0
/*Annuali*/
set @totAnnProf  = 0
set @totAnnProfProt  = 0
set @totAnnProfProtA  = 0
set @totAnnProfProtP = 0
set @totAnnProfProtI = 0
set @totAnnProfGrigi = 0

set @totAnnProfProtAnnull = 0
set @totMonClassProtAnnul = 0
/*Percentuali*/
set @PercAnnProfProt = 0
set @PercAnnProfProtA = 0
set @PercAnnProfProtP = 0
set @PercAnnProfProtI = 0
set @PercAnnProfGrigi = 0
set @PercAnnProfProtAnnull = 0
/**************************************************************************************************************************************************/


DECLARE @MESE_VC VARCHAR (255)

set @percMonProt = 0
set @percMonProtA = 0
set @percMonProtP = 0
set @percMonProtI = 0
set @percMonProtAnnul = 0
set @percMonDocGrigi = 0
set @percMonDocClass = 0
set @percMonProtClass = 0
set @percMonProtAClass = 0
set @percMonProtPClass = 0
set @percMonProtIClass = 0
/******************************************************************/
set @totAnnDoc = 0
set @totAnnProt = 0
set @totAnnProtA = 0
set @totAnnProtP = 0
set @totAnnProtI = 0
set @totAnnDocGrigi = 0
set @totAnnDocClass = 0
set @totAnnDocProf = 0
set @totAnnProtClass = 0
set @totAnnProtAClass = 0
set @totAnnProtPClass = 0
set @totAnnProtIClass = 0
set @totAnnProtAnnul = 0
set @percAnnProt = 0
set @percAnnProtA = 0
set @percAnnProtP = 0
set @percAnnProtI = 0
set @percAnnDocGrigi = 0
set @percAnnDocClass = 0
set @percAnnProtClass = 0
set @percAnnProtAClass = 0
set @percAnnProtPClass = 0
set @percAnnProtIClass = 0
set @percAnnProtAnnul = 0

set @totMonProfProt  = 0
set @totMonProfProtA  = 0
set @totMonProfProtP  = 0
set @totMonProfProtI  = 0
set @totMonProfGrigi  = 0

set @TotAnnDocGrigiClass = 0
set @percAnnDocGrigiClass = 0
set @TotAnnProtAnnulClass = 0
set @percAnnProtannulClass = 0


/* Creo una tabella temporanea */
CREATE TABLE [db_user].[#CC_REPORT_MENSILE_BY_REG]
(
[THING] [varchar] (50),
[TOT_DOC] [varchar] (250),
[GRIGI] [varchar] (250),
[PERC_GRIGI] [varchar] (250),
[PROT] [varchar] (250),
[PERC_PROT] [varchar] (250),
[ANNULL] [varchar] (250),
[PERC_ANNULL] [varchar] (250),
[ARRIVO] [varchar] (250),
[PERC_ARRIVO] [varchar] (250),
[PARTENZA] [varchar] (250),
[PERC_PARTENZA] [varchar] (250),
[INTERNI] [varchar] (250),
[PERC_INTERNI] [varchar] (250),

) ON [PRIMARY]

/*cicliamo dall''inizio dell''anno fino al mese di interesse*/
declare @i int
set @i = @mese
--while @i < @mese
--begin
/*Incrementiamo il contatore*/
--set @i = @i +1
/*Query che recupera i dati del singolo mese*/
/*Totale dati del mese*/
/*Non filtriamo sul registro, questa query deve essere ripetuta per tutti i mesi di interesse per ogni registro*/
if(@var_sede <>'''' and @var_sede is not null)
begin
select @totMonProtA = totMonProtA,
@totMonProtP = totMonProtP,
@totMonProtI = totMonProtI,
@totMonProtAnnul = totMonProtAnnul,
@totMonDocGrigi = totMonDocGrigi,
@totMonProfProtA  = totMonProfProtA,
@totMonProfProtP  = totMonProfProtP,
@totMonProfProtI  = totMonProfProtI,
@totMonProfProtAnnul = totMonProfProtAnnul,
@totMonProfGrigi  = totMonProfGrigi,
@totMonProtAClass = totMonProtAClass,
@totMonProtPClass = totMonProtPClass,
@totMonProtIClass = totMonProtIClass,
@totMonClassProtAnnul = totMonClassProtAnnul,
@totMonClassGrigi = totMonClassGrigi
from
(select count(system_id) as totMonProtA from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''A'' AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totMonProtA,
(select count(system_id) as totMonProtP from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''P'' AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totMonProtP,
(select count(system_id) as totMonProtI from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''I'' AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totMonProtI,
(select count(system_id) as totMonProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and profile.var_sede = @var_sede and dta_annulla is not null) as totMonProtAnnul,
(select count(profile.system_id) as totMonDocGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and profile.cha_tipo_proto = ''G'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno and profile.var_sede = @var_sede) as totMonDocGrigi,
(select count(p.system_id) as totMonProfProtA from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''A'' AND p.var_sede = @var_sede and dta_annulla is null) as totMonProfProtA,
(select count(p.system_id) as totMonProfProtP from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''P'' AND p.var_sede = @var_sede and dta_annulla is null) as totMonProfProtP,
(select count(p.system_id) as totMonProfProtI from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''I'' AND p.var_sede = @var_sede and dta_annulla is null) as totMonProfProtI,
(select count(p.system_id) as totMonProfProtAnnul from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND p.var_sede = @var_sede  and dta_annulla is not null) as totMonProfProtAnnul,
(select count(profile.system_id) as totMonProfGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and cha_img = ''0'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno and cha_tipo_proto = ''G'' AND profile.var_sede = @var_sede) as totMonProfGrigi,
(select count(system_id) As totMonProtAClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''A'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and profile.var_sede = @var_sede and dta_annulla is null) as totProtAClass,
(select count(system_id) As totMonProtPClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''P'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totProtPClass,
(select count(system_id) As totMonProtIClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''I'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is null) as totProtIClass,
(select count(system_id) As totMonClassProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND profile.var_sede = @var_sede and dta_annulla is not null) as totMonClassProtAnnul,
(select count(profile.system_id) As totMonClassGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and num_proto is null AND cha_tipo_proto = ''G'' AND MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno AND profile.var_sede = @var_sede) as totMonClassGrigi
end
else
begin
select @totMonProtA = totMonProtA,
@totMonProtP = totMonProtP,
@totMonProtI = totMonProtI,
@totMonProtAnnul = totMonProtAnnul,
@totMonDocGrigi = totMonDocGrigi,
@totMonProfProtA  = totMonProfProtA,
@totMonProfProtP  = totMonProfProtP,
@totMonProfProtI  = totMonProfProtI,
@totMonProfProtAnnul = totMonProfProtAnnul,
@totMonProfGrigi  = totMonProfGrigi,
@totMonProtAClass = totMonProtAClass,
@totMonProtPClass = totMonProtPClass,
@totMonProtIClass = totMonProtIClass,
@totMonClassProtAnnul = totMonClassProtAnnul,
@totMonClassGrigi = totMonClassGrigi
from
(select count(system_id) as totMonProtA from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''A'' AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totMonProtA,
(select count(system_id) as totMonProtP from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''P'' AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totMonProtP,
(select count(system_id) as totMonProtI from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND cha_tipo_proto = ''I'' AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totMonProtI,
(select count(system_id) as totMonProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and dta_annulla is not null) as totMonProtAnnul,
(select count(profile.system_id) as totMonDocGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and profile.cha_tipo_proto = ''G'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno) as totMonDocGrigi,
(select count(p.system_id) as totMonProfProtA from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''A'' AND dta_annulla is null) as totMonProfProtA,
(select count(p.system_id) as totMonProfProtP from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''P'' AND dta_annulla is null) as totMonProfProtP,
(select count(p.system_id) as totMonProfProtI from profile as p where cha_da_proto = ''0'' and  cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and cha_tipo_proto = ''I'' AND dta_annulla is null) as totMonProfProtI,
(select count(p.system_id) as totMonProfProtAnnul from profile as p where cha_da_proto = ''0'' and cha_img = ''0'' and id_registro = @id_registro AND  MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is not null) as totMonProfProtAnnul,
(select count(profile.system_id) as totMonProfGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and cha_img = ''0'' and MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno and cha_tipo_proto = ''G'') as totMonProfGrigi,
(select count(system_id) As totMonProtAClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''A'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno and dta_annulla is null) as totProtAClass,
(select count(system_id) As totMonProtPClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''P'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totProtPClass,
(select count(system_id) As totMonProtIClass from profile where cha_da_proto = ''0'' and  id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND cha_tipo_proto = ''I'' AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is null) as totProtIClass,
(select count(system_id) As totMonClassProtAnnul from profile where cha_da_proto = ''0'' and id_registro = @id_registro AND cha_fascicolato = ''1'' AND num_proto is not null AND MONTH(DTA_PROTO) = @i AND NUM_ANNO_PROTO = @anno AND dta_annulla is not null) as totMonClassProtAnnul,
(select count(profile.system_id) As totMonClassGrigi from profile,people where profile.author = people.system_id and people.id_amm = @id_amm and num_proto is null AND cha_tipo_proto = ''G'' AND MONTH(CREATION_DATE) = @i AND YEAR(CREATION_DATE) = @anno) as totMonClassGrigi
end

/*Calcoliamo i valori annuali a partire dai dati del mese***************************************/
/*Documenti protocollati annullati e grigi*/
set @totMonProt = @totMonProtA + @totMonProtP + @totMonProtI + @totMonProtAnnul
set @totMonDoc = @totMonProt + @totMonDocGrigi
set @totAnnDoc = @totAnnDoc + @totMonDoc
set @totAnnProt = @totAnnProt + @totMonProt
set @totAnnProtA = @totAnnProtA + @totMonProtA
set @totAnnProtP = @totAnnProtP + @totMonProtP
set @totAnnProtI = @totAnnProtI + @totMonProtI
set @totAnnDocGrigi = @totAnnDocGrigi + @totMonDocGrigi
set @totAnnProtAnnul = @totAnnProtAnnul + @totMonProtAnnul

/*Documenti classificati protocollati annullati e grigi*/
set @totMonDocClass = @totMonClassGrigi + @totMonClassProtAnnul + @totMonProtAClass + @totMonProtPClass + @totMonProtIClass
set @totAnnDocClass = @totAnnDocClass + @totMonDocClass
set @totMonProtClass = @totMonClassProtAnnul + @totMonProtAClass + @totMonProtPClass + @totMonProtIClass
set @totAnnProtClass = @totAnnProtClass + @totMonProtClass
set @totAnnProtAClass = @totAnnProtAClass + @totMonProtAClass
set @totAnnProtPClass = @totAnnProtPClass + @totMonProtPClass
set @totAnnProtIClass = @totAnnProtIClass + @totMonProtIClass
set @totAnnProtAnnulClass = @totAnnProtAnnulClass + @totMonClassProtAnnul
set @TotAnnDocGrigiClass = @TotAnnDocGrigiClass + @totMonClassGrigi

/*Documenti senza immagine protocollati annullati e grigi*/
set @totMonProf = @totMonProfProtAnnul + @totMonProfGrigi + @totMonProfProtA + @totMonProfProtP + @totMonProfProtI
set @totAnnProf = @totAnnProf + @totMonProf
set @totMonProfProt =  @totMonProfProtAnnul + @totMonProfProtA + @totMonProfProtP + @totMonProfProtI
set @totAnnProfProt  = @totAnnProfProt + @totMonProfProt
set @totAnnProfProtA  = @totAnnProfProtA + @totMonProfProtA
set @totAnnProfProtP = @totAnnProfProtP + @totMonProfProtP
set @totAnnProfProtI = @totAnnProfProtI + @totMonProfProtI
set @totAnnProfGrigi = @totAnnProfGrigi + @totMonProfGrigi
set @totAnnProfProtAnnull = @totAnnProfProtAnnull + @totMonProfProtAnnul

/*****Percentuali************************************************************************/
/*Percentuale dei protoclli annullati classificati*/
if(@TotAnnProtAnnulClass <> 0 and @totAnnProtClass <> 0)
begin
set @percAnnProtannulClass = ROUND(((@TotAnnProtAnnulClass / @totAnnProtClass) * 100),2)
end
/*Percentuale annuale dei documenti grigi classificati*/
if(@totAnnDocClass <> 0 and @TotAnnDocGrigiClass <> 0)
begin
set @percAnnDocGrigiClass = ROUND(((@TotAnnDocGrigiClass / @totAnnDocClass) * 100),2)
end
/*Percentuale dei profili annullati*/
if((@TotAnnProfProt <> 0) AND (@totAnnProfProtAnnull <> 0))
begin
set @PercAnnProfProtAnnull = ROUND(((@totAnnProfProtAnnull / @TotAnnProfProt) * 100),2)
end
if(@totAnnProt <> 0)
begin

/*Percentuale di documenti protocollati*/
if(@totAnnProt <> 0 and @totAnnDoc <> 0)
set @percAnnProt = ROUND(((@totAnnProt / @totAnnDoc) * 100),2)
if(@totAnnProtA <> 0 and @totAnnProt <> 0)
begin
/*Percentuale di protocolli in arrivo*/
set @percAnnProtA = ROUND(((@totAnnProtA / @totAnnProt) * 100),2)
end

if(@totAnnProtP <> 0  and @totAnnProt <> 0)
begin
/*Percentuale di protocolli in partenza*/
set @percAnnProtP = ROUND(((@totAnnProtP / @totAnnProt) * 100),2)
end

if(@totAnnProtI <> 0  and @totAnnProt <> 0)
begin
/*Percentuale di protocolli interni*/
set @percAnnProtI = ROUND(((@totAnnProtI / @totAnnProt) * 100),2)
end

if(@totAnnProtAnnul <> 0  and @totAnnProt <> 0)
begin
/*Percentuale di protocolli annullati*/
set @percAnnProtAnnul = ROUND(((@totAnnProtAnnul / @totAnnProt) * 100),2)
end
end

if(@totAnnDoc <> 0)
begin
if(@totAnnDocGrigi <> 0 and @totAnnDoc <> 0)
begin
/*Percentuale di doc grigi*/
set @percAnnDocGrigi = ROUND(((@totAnnDocGrigi / @totAnnDoc ) * 100),2)
end
if(@totAnnDocClass <> 0 and @totAnnDoc <> 0)
begin
/*Percentuale di doc classificati*/
set @percAnnDocClass = ROUND(((@totAnnDocClass / @totAnnDoc) * 100),2)
end
end

if(@totAnnDocClass <> 0)
begin
if(@totAnnProtClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati*/
set @percAnnProtClass = ROUND(((@totAnnProtClass / @totAnnDocClass)*100),2)
if(@totAnnProtAClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati in arrivo*/
set @percAnnProtAClass = ROUND(((@totAnnProtAClass / @totAnnProtClass) * 100),2)
end
if(@totAnnProtPClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati in partenza*/
set @percAnnProtPClass = ROUND(((@totAnnProtPClass / @totAnnProtClass) * 100),2)
end
if(@totAnnProtIClass <> 0 and @totAnnDocClass <> 0)
begin
/*Percentuale di doc classificati e protocollati interni*/
set @percAnnProtIClass = ROUND(((@totAnnProtIClass / @totAnnProtClass) * 100),2)
end
end
end

/*Calcoliamo le percentuali mensili**************************************************************************************/
if(@totMonDoc <> 0)
begin
if(@totMonProt <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli*/
set @percMonProt = ROUND(((@totMonProt / @totMonDoc) * 100),2)
if(@totMonProtA <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli ARRIVO*/
set @percMonProtA = ROUND(((@totMonProtA / @totMonProt) * 100),2)
end
if(@totMonProtP <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli PARTENZA*/
set @percMonProtP = ROUND(((@totMonProtP / @totMonProt) * 100),2)
end
if(@totMonProtI <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli INTERNI*/
set @percMonProtI = ROUND(((@totMonProtI / @totMonProt) * 100),2)
end
if(@totMonProtAnnul <> 0 and @totMonProt <> 0)
begin
/*Percentuale mensile di protocolli Annullati*/
set @percMonProtAnnul = ROUND(((@totMonProtAnnul / @totMonProt) * 100),2)
end
end

if(@totMonDocGrigi <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di Doc Grigi*/
set @percMonDocGrigi = ROUND(((@totMonDocGrigi / @totMonDoc) * 100),2)
end
if(@totMonDocClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di Doc Class*/
set @percMonDocClass = ROUND(((@totMonDocClass / @totMonDoc) * 100),2)
end
if(@totMonProtClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Class*/
set @percMonProtClass = ROUND(((@totMonProtClass / @totMonDoc) * 100),2)
end
if(@totMonProtAClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Arrivo Class*/
set @percMonProtAClass = ROUND(((@totMonProtAClass / @totMonDoc) * 100),2)
end
if(@totMonProtPClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Partenza Class*/
set @percMonProtPClass = ROUND(((@totMonProtPClass / @totMonDoc) * 100),2)
end
if(@totMonProtIClass <> 0 and @totMonDoc <> 0)
begin
/*Percentuale mensile di protocolli Interni Class*/
set @percMonProtIClass = ROUND(((@totMonProtIClass / @totMonDoc) * 100),2)
end

end
/*******************************************************************************************************************/
/*Calcoliamo le percentuali  dei profili ( Immagini)  */
if(@totAnnProf<>0)
begin
if(@totAnnProfGrigi<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili grigi*/
set @PercAnnProfGrigi = ROUND(((@totAnnProfGrigi / @totAnnProf) * 100),2)
end

if(@totAnnProfProt<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati*/
set @PercAnnProfProt = ROUND(((@totAnnProfProt / @totAnnProf) * 100),2)
end

if(@totAnnProfProtA<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati ARRIVO*/
set @PercAnnProfProtA = ROUND(((@totAnnProfProtA / @totAnnProfProt) * 100),2)
end

if(@totAnnProfProtP<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati PARTENZA*/
set @PercAnnProfProtP = ROUND(((@totAnnProfProtP / @totAnnProfProt) * 100),2)
end

if(@totAnnProfProtI<>0 and @totAnnProf <> 0)
begin
/*Percentuale  annuale di profili protocollati PARTENZA*/
set @PercAnnProfProtI = ROUND(((@totAnnProfProtI / @totAnnProfProt) * 100),2)
end
end
/*******************************************************************************************************************/

Select @MESE_VC =
CASE @i
WHEN 1 THEN ''Gennaio''
WHEN 2 THEN ''Febbraio''
WHEN 3 THEN ''Marzo''
WHEN 4 THEN ''Aprile''
WHEN 5 THEN ''Maggio''
WHEN 6 THEN ''Giugno''
WHEN 7 THEN ''Luglio''
WHEN 8 THEN ''Agosto''
WHEN 9 THEN ''Settembre''
WHEN 10 THEN ''Ottobre''
WHEN 11 THEN ''Novembre''
WHEN 12 THEN ''Dicembre''
end

/*inseriamo i dati mensili in una tabella*/
/*(ANNO,MESE,TOT_DOC,TOT_PROT,TOT_PROT_A,TOT_PROT_P,TOT_PROT_I,TOT_CLASS,TOT_PROF,TOT_CLASS_PROT,TOT_CLASS_PROT_A,TOT_CLASS_PROT_P,TOT_CLASS_PROT_I,TOT_DOC_GRIGI,TOT_PROT_ANNUL)*/
insert into #CC_REPORT_MENSILE_BY_REG
(THING, TOT_DOC, GRIGI,PERC_GRIGI, PROT,PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(@MESE_VC, @totMonDoc, @totMonDocGrigi, convert(varchar,@percMonDocGrigi), @totMonProt, convert(varchar,@percMonProt), @totMonProtAnnul, convert(varchar,@percMonProtAnnul), @totMonProtA, convert(varchar,@percMonProtA), @totMonProtP, convert(varchar,@percMonProtP), @totMonProtI, convert(varchar,@percMonProtI))

/*Inseriamo nella tabella i valori reltivi all''anno*/
/*Aggiungiamo al totale dei documenti annuale il totale dei documenti grigi dell''anno */
set @totAnnDoc = @totAnnDoc
insert into #CC_REPORT_MENSILE_BY_REG
(THING, TOT_DOC, GRIGI,PERC_GRIGI, PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(@anno, @totAnnDoc, @totAnnDocGrigi, convert(varchar,@percAnnDocGrigi), @totAnnProt, convert(varchar,@percAnnProt), @totAnnProtAnnul, convert(varchar,@percAnnProtAnnul), @totAnnProtA, convert(varchar,@percAnnProtA), @totAnnProtP, convert(varchar,@percAnnProtP), @totAnnProtI, convert(varchar,@percAnnProtI))


/*Inseriamo nella tabella i valori reltivi alla classificazione*/
insert into #CC_REPORT_MENSILE_BY_REG
(THING, TOT_DOC, GRIGI, PERC_GRIGI, PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Classificati'', @totAnnDocClass, @TotAnnDocGrigiClass, @percAnnDocGrigiClass, @totAnnProtClass, convert(varchar,@percAnnProtClass), @TotAnnProtAnnulClass, @percAnnProtannulClass, @totAnnProtAClass, convert(varchar,@percAnnProtAClass), @totAnnProtPClass, convert(varchar,@percAnnProtPClass), @totAnnProtIClass, convert(varchar,@percAnnProtIClass))


/*Inseriamo nella tabella i valori reltivi alle Immagini - Doc. Fisici Acquisiti -*/
insert into #CC_REPORT_MENSILE_BY_REG
(THING, TOT_DOC, GRIGI, PERC_GRIGI, PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Senza Img.'', @totAnnProf, @totAnnProfGrigi, convert(varchar,@PercAnnProfGrigi), @totAnnProfProt, convert(varchar,@PercAnnProfProt), @totAnnProfProtAnnull, @PercAnnProfProtAnnull, @totAnnProfProtA, convert(varchar,@PercAnnProfProtA), @totAnnProfProtP, convert(varchar,@PercAnnProfProtP), @totMonProfProtI, convert(varchar,@PercAnnProfProtI))

/*Recuperiamo i valori dalla tabella temporanea*/
select * from #CC_REPORT_MENSILE_BY_REG


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_ANNUALE_DOC_X_SEDE]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE PROCEDURE [db_user].[REPORT_ANNUALE_DOC_X_SEDE]
--parametri di input
@anno int,
@id_registro int,
@id_amm int

AS

--tabella temporanea
CREATE TABLE [db_user].[#REPORT_ANNUALE_X_SEDE]
(
[ANNO] [varchar] (50),
[SEDE] [varchar] (250),
[TOT_DOC] [varchar] (250),
[GRIGI] [varchar] (250),
[PERC_GRIGI] [varchar] (250),
[PROT] [varchar] (250),
[PERC_PROT] [varchar] (250),
[ANNULL] [varchar] (250),
[PERC_ANNULL] [varchar] (250),
[ARRIVO] [varchar] (250),
[PERC_ARRIVO] [varchar] (250),
[PARTENZA] [varchar] (250),
[PERC_PARTENZA] [varchar] (250),
[INTERNI] [varchar] (250),
[PERC_INTERNI] [varchar] (250),

) ON [PRIMARY]

-- variabili locali
DECLARE @totDoc FLOAT
DECLARE @totGrigi FLOAT
DECLARE @totProt FLOAT
DECLARE @totProtA FLOAT
DECLARE @totProtP FLOAT
DECLARE @totProtI FLOAT
DECLARE @totProtClear FLOAT

DECLARE @totClass FLOAT
DECLARE @totClassGrigi FLOAT
DECLARE @totClassProt float
DECLARE @totClassProtA float
DECLARE @totClassProtP float
DECLARE @totClassProtI float
DECLARE @totClassProtClear float

DECLARE @totProf FLOAT
DECLARE @totProfGrigi FLOAT
DECLARE @totProfProt FLOAT
DECLARE @totProfProtA FLOAT
DECLARE @totProfProtP FLOAT
DECLARE @totProfProtI FLOAT
DECLARE @totProfProtClear FLOAT

DECLARE @PercGrigi float
DECLARE @PercProt float
DECLARE @PercProtA float
DECLARE @PercProtP float
DECLARE @PercProtI float
DECLARE @PercProtClear float

DECLARE @PercClass float
DECLARE @PercClassGrigi float
DECLARE @PercClassProt float
DECLARE @PercClassProtA float
DECLARE @PercClassProtP float
DECLARE @PercClassProtI float
DECLARE @PercClassProtClear float

DECLARE @PercProf FLOAT
DECLARE @PercProfGrigi FLOAT
DECLARE @PercProfProt FLOAT
DECLARE @PercProfProtA FLOAT
DECLARE @PercProfProtP FLOAT
DECLARE @PercProfProtI FLOAT
DECLARE @PercProfProtClear FLOAT

-- VARIABILE DEL CURSORE
DECLARE @VAR_SEDE VARCHAR (255)



--CURSORE SEDI DISPONIBILI
DECLARE C_VAR_SEDE CURSOR LOCAL FOR

-- selezione di tutte le sedi disponibili
SELECT DISTINCT (VAR_SEDE) FROM PROFILE WHERE VAR_SEDE IS NOT NULL AND VAR_SEDE <> ''''

OPEN C_VAR_SEDE

FETCH next from C_VAR_SEDE into @VAR_SEDE
while(@@fetch_status=0) --( 1 CICLO ) -- PER OGNI SEDE DISPONIBILE
BEGIN
--SETTING DELLE VARIABILI
SET @totDoc = 0
SET @totGrigi = 0
SET @totProt = 0
SET @totProtA = 0
SET @totProtP = 0
SET @totProtI = 0
SET @totProtClear = 0

set @PercGrigi = 0
set @PercProt = 0
set @PercProtA = 0
set @PercProtP = 0
set @PercProtI = 0
set @PercProtClear = 0

set @totClass = 0
set @totClassGrigi = 0
set @totClassProt = 0
set @totClassProtA = 0
set @totClassProtP = 0
set @totClassProtI = 0
set @totClassProtClear = 0

set @PercClass = 0
set @PercClassGrigi = 0
set @PercClassProt = 0
set @PercClassProtA = 0
set @PercClassProtP = 0
set @PercClassProtI = 0
set @PercClassProtClear = 0

set @totProf = 0
set @totProfGrigi = 0
set @totProfProt = 0
set @totProfProtA = 0
set @totProfProtP = 0
set @totProfProtI = 0
set @totProfProtClear = 0

set @PercProf = 0
set @PercProfGrigi = 0
set @PercProfProt = 0
set @PercProfProtA = 0
set @PercProfProtP = 0
set @PercProfProtI = 0
set @PercProfProtClear = 0
--END SETTING


-- conto i doc grigi della sede passata dal cursore (flitro @var_sede ,@anno, @id_registro)
select @totGrigi = count(profile.system_id) from profile,people
where profile.author = people.system_id and people.id_amm = @id_amm and num_proto is null AND cha_tipo_proto = ''G''
AND YEAR(CREATION_DATE) = @anno and (profile.var_sede = @VAR_SEDE);

--  conto i doc protocollati (Annullati) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro)
select @totProtClear = count(system_id) from profile where cha_da_proto = ''0'' and  id_registro = @id_registro
AND  dta_annulla is not null AND num_proto is not null AND NUM_ANNO_PROTO = @anno AND ( profile.var_sede = @VAR_SEDE);

-- conto i doc Protocollati (Arrivo) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro,tipo)
select @totProtA = count(system_id) from profile where profile.cha_da_proto = ''0'' and profile.id_registro = @id_registro AND dta_annulla is null
AND profile.cha_tipo_proto = ''A'' AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede  = @VAR_SEDE);

-- conto i doc Protocollati (Partenza) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro,tipo)
select @totProtP = count(system_id) from profile where profile.cha_da_proto = ''0'' and profile.id_registro = @id_registro AND dta_annulla is null
AND profile.cha_tipo_proto = ''P'' AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede  = @VAR_SEDE);

-- conto i doc Protocollati (Interni) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro,tipo)
select @totProtI = count(system_id) from profile where profile.cha_da_proto = ''0'' and profile.id_registro = @id_registro AND dta_annulla is null
AND profile.cha_tipo_proto = ''I'' AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede  = @VAR_SEDE);

set @totProt = @totProtA + @totProtP + @totProtI + @totProtClear
set @totDoc = @totGrigi + @totProt;

----CALCOLO PERCENTUALI  --
if ((@totDoc <> 0) and (@totGrigi <> 0 )) -- % doc grigi
begin
set @PercGrigi = ROUND(((@totGrigi / @totDoc) * 100),2)
end
if ((@totDoc <> 0) and (@totProt <> 0 )) -- % doc protocollati
begin
set @PercProt = ROUND(((@totProt / @totDoc) * 100),2)
end
if ((@totProtClear <> 0) and (@totProt <> 0 )) -- % doc protocollati Annullati
begin
set @PercProtClear = ROUND(((@totProtClear / @totProt) * 100),2)
end
if ((@totProtA <> 0) and (@totProt <> 0 )) -- % doc protocollati Arrivo
begin
set @PercProtA = ROUND(((@totProtA / @totProt) * 100),2)
end
if ((@totProtP <> 0) and (@totProt <> 0 )) -- % doc protocollati Partenza
begin
set @PercProtP = ROUND(((@totProtP / @totProt) * 100),2)
end
if ((@totProtI <> 0) and (@totProt <> 0 )) -- % doc protocollati Interni
begin
set @PercProtI = ROUND(((@totProtI / @totProt) * 100),2)
end
--Inserisco nella tabella temporanea i risultati di protocollo prodotti
insert into #REPORT_ANNUALE_X_SEDE
(ANNO, SEDE, TOT_DOC,GRIGI, PERC_GRIGI,PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Creati'', @VAR_SEDE, @totDoc, @totGrigi, @PercGrigi, @totProt, @PercProt,@totProtClear, @PercProtClear, @totProtA, @PercProtA, @totProtP, @PercProtP, @totProtI, @PercProtI )

-- conto il totale dei documenti classificati (flitro @var_sede ,@anno,@id_registro,tipo)
-- conto i doc grigi classificati
select @totClassGrigi = count(profile.system_id) from profile,people
where profile.author = people.system_id and people.id_amm = @id_amm
AND profile.cha_fascicolato = ''1'' and profile.num_proto is null AND profile.cha_tipo_proto = ''G''
AND YEAR(CREATION_DATE) = @anno AND (profile.var_sede = @VAR_SEDE)

--conto i doc classificati e protocollati A
select @totClassProtA = count(system_id) from profile where profile.cha_da_proto = ''0''
and  profile.id_registro = @id_registro AND profile.cha_fascicolato = ''1''
AND profile.num_proto is not null AND profile.cha_tipo_proto = ''A'' AND  profile.dta_annulla is null
AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede = @VAR_SEDE)

--conto i doc classificati e protocollati P
select @totClassProtP = count(profile.system_id) from profile where profile.cha_da_proto = ''0''
and  profile.id_registro = @id_registro AND profile.cha_fascicolato = ''1''
AND profile.num_proto is not null AND profile.cha_tipo_proto = ''P'' AND  profile.dta_annulla is null
AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede = @VAR_SEDE)

--conto i doc classificati e protocollati I
select @totClassProtI = count(profile.system_id) from profile where profile.cha_da_proto = ''0''
and  profile.id_registro = @id_registro AND profile.cha_fascicolato = ''1''
AND profile.num_proto is not null AND profile.cha_tipo_proto = ''I'' AND  profile.dta_annulla is null
AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede = @VAR_SEDE)

--conto i doc classificati e annullati
select @totClassProtClear = count (profile.system_id) from profile where profile.cha_da_proto = ''0''
and  profile.id_registro = @id_registro AND profile.cha_fascicolato = ''1''
AND  profile.dta_annulla is not null AND profile.num_proto is not null
AND profile.NUM_ANNO_PROTO = @anno AND (profile.var_sede = @VAR_SEDE)

set @totClassProt = @totClassProtA + @totClassProtP + @totClassProtI + @totClassProtClear
Set @totClass = @totClassGrigi + @totClassProt


----CALCOLO PERCENTUALI  --
if ((@totDoc <> 0) and (@totClass <> 0 )) -- % doc classificati
begin
set @PercClass = ROUND(((@totClass / @totDoc) * 100),2)
end
if ((@totClassGrigi <> 0) and (@totClass <> 0 )) -- % doc grigi e classificati
begin
set @PercClassGrigi = ROUND(((@totClassGrigi / @totClass) * 100),2)
end
if ((@totClassProt <> 0) and (@totClass <> 0 )) -- % doc protocollati e classificati
begin
set @PercClassProt = ROUND(((@totClassProt / @totClass) * 100),2)
end
if ((@totClassProtClear <> 0) and (@totClassProt <> 0 )) -- % doc protocollati classificati ed annullati
begin
set @PercClassProtClear  = ROUND(((@totClassProtClear / @totClassProt) * 100),2)
end
if ((@totClassProtA <> 0) and (@totClassProt <> 0 )) -- % doc protocollati Arrivo classificiati
begin
set @PercClassProtA = ROUND(((@totClassProtA / @totClassProt) * 100),2)
end
if ((@totClassProtP <> 0) and (@totClassProt <> 0 )) -- % doc protocollati Partenza e classificati
begin
set @PercClassProtP = ROUND(((@totClassProtP / @totClassProt) * 100),2)
end
if ((@totClassProtI <> 0) and (@totClassProt <> 0 )) -- % doc protocollati Partenza e classificati
begin
set @PercClassProtI = ROUND(((@totClassProtI / @totClassProt) * 100),2)
end
--Inserisco nella tabella temporanea i risultati di classifica prodotti
insert into #REPORT_ANNUALE_X_SEDE
(ANNO, SEDE, TOT_DOC,GRIGI, PERC_GRIGI,PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Classificati'', @VAR_SEDE, @TotClass, @totClassGrigi, @PercClassGrigi, @totClassProt, @PercClassProt,@totClassProtClear, @PercClassProtClear, @totClassProtA, @PercClassProtA, @totClassProtP, @PercClassProtP, @totClassProtI, @PercClassProtI )

select @totProfGrigi = count(profile.system_id) from profile,people
where profile.author = people.system_id and people.id_amm = @id_amm
and profile.cha_img = ''0'' and YEAR(CREATION_DATE) = @anno and profile.cha_tipo_proto = ''G'' AND profile.var_sede = @VAR_SEDE

-- conto i doc protocollati  A senza doc acquisiti
select @totProfProtA = count(p.system_id) from profile p
where p.cha_da_proto = ''0'' and p.cha_img = ''0'' and p.id_registro = @id_registro AND p.NUM_ANNO_PROTO = @anno AND p.dta_annulla is null
and p.cha_tipo_proto = ''A'' AND p.var_sede = @VAR_SEDE

-- conto i doc protocollati P senza doc acquisiti
select @totProfProtP = count(p.system_id) from profile p
where p.cha_da_proto = ''0'' and p.cha_img = ''0'' and p.id_registro = @id_registro AND p.NUM_ANNO_PROTO = @anno AND p.dta_annulla is null
and p.cha_tipo_proto = ''P'' AND p.var_sede = @VAR_SEDE

-- conto i doc protocollati  I senza doc acquisiti
select @totProfProtI = count(p.system_id) from profile p
where p.cha_da_proto = ''0'' and p.cha_img = ''0'' and p.id_registro = @id_registro AND p.NUM_ANNO_PROTO = @anno AND p.dta_annulla is null
and p.cha_tipo_proto = ''I'' AND p.var_sede = @VAR_SEDE

-- conto i doc protocollati  Annullati senza doc acquisiti
select @totProfProtClear = count(profile.system_id) from profile where profile.cha_da_proto = ''0'' and  profile.id_registro = @id_registro
AND profile.dta_annulla is not null AND profile.num_proto is not null and profile.cha_img = ''0'' and profile.NUM_ANNO_PROTO = @anno AND profile.var_sede = @VAR_SEDE

set @totProfProt = @totProfProtA + @totProfProtP + @totProfProtI + @totProfProtClear
set @totProf = @totProfGrigi + @totProfProt

-- calcolo percentuali --
if ((@totDoc <> 0) and (@totProf <> 0 )) -- %  profili
begin
set @PercProf = ROUND(((@totProf / @totDoc) * 100),2)
end
if ((@totProfGrigi <> 0) and (@totProf <> 0 )) -- % profili doc grigi
begin
set @PercProfGrigi = ROUND(((@totProfGrigi / @totProf) * 100),2)
end
if ((@totProfProt <> 0) and (@totProf <> 0 )) -- % profili protocollati
begin
set @PercProfProt = ROUND(((@totProfProt / @totProf) * 100),2)
end
if ((@totProfProtClear <> 0) and (@totProfProt <> 0 )) -- % profili protocollati ed annullati
begin
set @PercProfProtClear  = ROUND(((@totProfProtClear / @totProfProt) * 100),2)
end
if ((@totProfProtA <> 0) and (@totProfProt <> 0 )) -- % profili protocollati A
begin
set @PercProfProtA = ROUND(((@totProfProtA / @totProfProt) * 100),2)
end
if ((@totProfProtP <> 0) and (@totProfProt <> 0 )) -- % profili protocollati P
begin
set @PercProfProtP = ROUND(((@totProfProtP / @totProfProt) * 100),2)
end
if ((@totProfProtI <> 0) and (@totProfProt <> 0 )) -- % profili protocollati I
begin
set @PercProfProtI = ROUND(((@totProfProtI / @totProfProt) * 100),2)
end
--Inserisco nella tabella temporanea i risultati di profilazione prodotti
insert into #REPORT_ANNUALE_X_SEDE
(ANNO, SEDE, TOT_DOC,GRIGI, PERC_GRIGI,PROT, PERC_PROT, ANNULL, PERC_ANNULL, ARRIVO, PERC_ARRIVO, PARTENZA, PERC_PARTENZA, INTERNI, PERC_INTERNI)
values
(''Senza Img.'', @VAR_SEDE, @totProf, @totProfGrigi, @PercProfGrigi, @totProfProt, @PercProfProt,@totProfProtClear, @PercProfProtClear, @totProfProtA, @PercProfProtA, @totProfProtP, @PercProfProtP, @totProfProtI, @PercProfProtI )
-- RESET DELLE VARIABILI

FETCH next from C_VAR_SEDE into @VAR_SEDE

END    --( END 1 CICLO ) --


deallocate C_VAR_SEDE
-- return dei risultati
SELECT * FROM #REPORT_ANNUALE_X_SEDE



' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Report_Annuale_FASC_VT]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create procedure [db_user].[Report_Annuale_FASC_VT]
/***************DICHIARAZIONE PARAMETRI***********************/
@ID_AMM int,
@ID_REGISTRO int,
@ANNO int,
@MESE int

AS
/******************************************************************/
/***************DICHIARAZIONE VARIABILI***********************/
-- variabili ausiliarie per il cursore che recupera le voci di titolario
DECLARE @SYSTEM_ID_VT INT
DECLARE @DESCRIPTION_VT VARCHAR (255)
DECLARE @VAR_CODICE_VT VARCHAR (255)
DECLARE @M_FASC_CREATI int
DECLARE @FASC_CHIUSI int
DECLARE @FASC_CREATI int
DECLARE @M_FASC_CHIUSI int
DECLARE @i int
DECLARE @MESE_VC VARCHAR (255)
DECLARE @GENNAIO varchar (255)
set @GENNAIO = ''-''
DECLARE @FEBBRAIO varchar (255)
set @FEBBRAIO = ''-''
DECLARE @MARZO varchar (255)
set @MARZO = ''-''
DECLARE @APRILE varchar (255)
set @APRILE = ''-''
DECLARE @MAGGIO varchar (255)
set @MAGGIO =''-''
DECLARE @GIUGNO varchar (255)
set @GIUGNO = ''-''
DECLARE @LUGLIO varchar (255)
set @LUGLIO = ''-''
DECLARE @AGOSTO varchar (255)
set @AGOSTO = ''-''
DECLARE @SETTEMBRE varchar (255)
set @SETTEMBRE =''-''
DECLARE @OTTOBRE varchar (255)
set @OTTOBRE = ''-''
DECLARE @NOVEMBRE varchar (255)
set @NOVEMBRE =''-''
DECLARE @DICEMBRE varchar (255)
set @DICEMBRE = ''-''
DECLARE @VT_FASC_CREATI int
DECLARE @VT_FASC_CHIUSI int
SET @i = 1
-- variabili ausiliarie per il cursore che recupera la lista dei fascicoli
DECLARE @SYSTEM_ID_FASC INT
/*******************************************************************/

--TABELLA TEMPORANEA ALLOCAZIONE RISULTATI
/*Tot. Colonne: 18*/
CREATE TABLE [db_user].[#TEMP_REPORT_ANNUALE_FASC_VT]
(
[FASC_CREATI] [varchar] (255),
[FASC_CHIUSI] [varchar] (255),
[VAR_COD] [varchar] (255),
[VAR_DESCR] [varchar] (255),
[GENNAIO] [varchar] (255),
[FEBBRAIO] [varchar] (255),
[MARZO] [varchar] (255),
[APRILE] [varchar] (255),
[MAGGIO] [varchar] (255),
[GIUGNO] [varchar] (255),
[LUGLIO] [varchar] (255),
[AGOSTO] [varchar] (255),
[SETTEMBRE] [varchar] (255),
[OTTOBRE] [varchar] (255),
[NOVEMBRE] [varchar] (255),
[DICEMBRE] [varchar] (255),
[VT_FAC_CREATI] [varchar] (255)
) ON [PRIMARY]

/*******************************RECUPERO DEI DATI GENERALI************************************************************************************
FASC_CREATI:  Tutti i fascicoli con:
- anno di creazione pari all''anno di interesse,
- id_registro pari a qullo selezionato
- id_amm pari a quello selezionato

FASC_GEN_CREATI: Tutti i fascicoli generali:
- id_registro pari a null
- id_amm pari a quello selezionato

FASC_CHIUSI: Tutti i fascicoli chiusi:
- id_registro pari a qullo selezionato
- id_amm pari a quello selezionato
- anno della dati di chiusura pari a quello selezionato
*/
/*QUERY PER IL RECUPERO DEI DATI GENERALI*/
select @FASC_CREATI = FASC_CREATI, @FASC_CHIUSI = FASC_CHIUSI
from
(select count(distinct(system_id)) as FASC_CREATI from project where cha_tipo_proj = ''F'' and year(dta_creazione) = @anno and  (id_registro = @ID_REGISTRO or id_registro is null) and id_amm = @ID_AMM and cha_stato = ''A'') as A_Fasc_creati,
(select count(distinct(system_id)) as FASC_CHIUSI from project where cha_tipo_proj = ''F'' and (id_registro = @ID_REGISTRO or id_registro = null) and id_amm = @ID_AMM and year(dta_chiusura)=@anno and cha_stato = ''C'') as A_Fasc_chiusi

/*****************************************************************************************************************************************************/

/*1 QUERY- Recupera l''elenco delle voci di titolario  (input : @id_amm) */
/*-- contiene tutte le voci di titolario (TIPO "T")*/
DECLARE c_VociTit CURSOR LOCAL
FOR

select system_id,description,var_codice
from project
where var_codice is not null
and
id_amm =@ID_AMM and cha_tipo_proj = ''T''
AND id_titolario = (select system_id from project where cha_stato= ''A'' and var_codice = ''T'')
and (id_registro = @id_registro OR id_registro is null)
order by VAR_COD_LIV1


/*Apertura del cursore*/
OPEN c_VociTit
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT

while(@@fetch_status=0)
BEGIN
/*2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)*/
while @i <= @mese
begin
select @M_FASC_CREATI = M_FASC_CREATI ,@M_FASC_CHIUSI = M_FASC_CHIUSI, @VT_FASC_CREATI = VT_FASC_CREATI, @VT_FASC_CHIUSI = VT_FASC_CHIUSI
from
(select count(distinct(system_id)) as VT_FASC_CREATI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and (id_registro = @id_registro or id_registro is null) and year(dta_creazione) = @anno and cha_stato = ''A'') as totPerCRVT,
(select count(distinct(system_id)) as VT_FASC_CHIUSI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and (id_registro = @id_registro or id_registro is null) and year(dta_chiusura) = @anno and cha_stato = ''C'') as totPerChVT,
(select count(distinct(system_id)) as M_FASC_CREATI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and month(dta_creazione) = @i  and (id_registro = @id_registro or id_registro is null) and year(dta_creazione) = @anno and cha_stato = ''A'') as m_fasc_creati,
(select count(distinct(system_id)) as M_FASC_CHIUSI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and month(dta_chiusura) = @i  and (id_registro = @id_registro or id_registro is null) and year(dta_chiusura) = @anno and cha_stato = ''C'') as m_fasc_chiusi


if ((@VT_FASC_CREATI = 0) AND (@VT_FASC_CHIUSI = 0))
begin
set @MESE_VC = ''-''
end
else
begin
set @MESE_VC = convert(varchar,@VT_FASC_CREATI)+''/''+convert(varchar,@VT_FASC_CHIUSI)
end
if(@i = 1)
begin
/*Gennaio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @gennaio = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @gennaio = ''-''
end
end
if(@i = 2)
begin
/*Febbraio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @febbraio = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @febbraio = ''-''
end

end
if(@i = 3)
begin
/*Marzo*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @marzo = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @marzo = ''-''
end

end
if(@i = 4)
begin
/*Aprile*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @aprile = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @aprile = ''-''
end
end
if(@i = 5)
begin
/*MAggio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @maggio = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @maggio = ''-''
end
end
if(@i = 6)
begin
/*Giugno*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @giugno = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @giugno = ''-''
end
end
if(@i = 7)
begin
/*Luglio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @luglio = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @luglio = ''-''
end
end
if(@i = 8)
begin
/*Agosto*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @agosto = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @agosto = ''-''
end
end
if(@i = 9)
begin
/*Settembre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @settembre = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @settembre = ''-''
end
end
if(@i = 10)
begin
/*Ottobre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @ottobre = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @ottobre = ''-''
end
end
if(@i = 11)
begin
/*Novembre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @novembre = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @novembre = ''-''
end
end
if(@i = 12)
begin
/*Dicembre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @dicembre = convert(varchar,@M_FASC_CREATI)+''/''+convert(varchar,@M_FASC_CHIUSI)
end
else
begin
set @dicembre = ''-''
end
end

set @i = @i +1

end

insert into #TEMP_REPORT_ANNUALE_FASC_VT
(FASC_CREATI,FASC_CHIUSI,VAR_COD,VAR_DESCR,GENNAIO,FEBBRAIO,MARZO,APRILE,MAGGIO,GIUGNO,LUGLIO,AGOSTO,SETTEMBRE,OTTOBRE,NOVEMBRE,DICEMBRE,VT_FAC_CREATI)
VALUES
(@FASC_CREATI,@FASC_CHIUSI,@VAR_CODICE_VT,@DESCRIPTION_VT,@gennaio,@febbraio,@marzo,@aprile,@maggio,@giugno,@luglio,@agosto,@settembre,@ottobre,@novembre,@dicembre,@MESE_VC)

/*Aggiorniamo il cursore delle voci di Titolario*/
SET @i = 1
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT
END

SELECT * FROM #TEMP_REPORT_ANNUALE_FASC_VT
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Report_Tempo_Medio_Lav]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE  procedure [db_user].[Report_Tempo_Medio_Lav]


--PARAMETRI DI INPUT
@ID_AMM int,
@ID_REGISTRO int,
@ANNO int

as

--DICHIARAZIONI VARIABILI
declare @CodClass varchar (255)
declare @DescClass varchar (255)
declare @ContaFasc INT
declare @valore float
declare @tempoMedio float

--SETTAGGIO INIZIALE VARIABILI
set @ContaFasc = 0
set @tempoMedio = 0
set @valore = 0




--TABELLA TEMPORANEA ALLOCAZIONE RISULTATI
CREATE TABLE [db_user].[#TEMP_REPORT_LAVORAZIONE_FASCICOLI]
(
[COD_CLASS] [varchar] (255),
[DESC_CLASS] [varchar] (255),
[T_MEDIO_LAV] [INT]

) ON [PRIMARY]

-- variabili ausiliarie per il cursore che recupera le voci di titolario
DECLARE @SYSTEM_ID_VT INT
DECLARE @DESCRIPTION_VT VARCHAR (255)
DECLARE @VAR_CODICE_VT VARCHAR (255)

--variabili ausuliarie per il cursore dei fascicoli
DECLARE @DTA_CREAZIONE DATETIME
DECLARE @DTA_CHIUSURA DATETIME
DECLARE @INTERVALLO INT
set @intervallo = 0

--1 QUERY- elenco voci di titolario  -- (input : @id_amm)
DECLARE c_VociTit CURSOR LOCAL FOR -- contiene tutte le voci di titolario (TIPO "T")
select system_id,description,var_codice from project where var_codice is not null and
id_amm =@ID_AMM and cha_tipo_proj = ''T'' and (id_registro = @id_registro OR id_registro is null)
order by VAR_COD_LIV1
OPEN c_VociTit
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT
while(@@fetch_status=0)
BEGIN
--------2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)
DECLARE c_Fascicoli CURSOR LOCAL FOR -- contiene tutti i fascicoli (TIPO "F")
select project.dta_creazione, project.dta_chiusura
from project
where cha_tipo_proj = ''F'' and id_amm = @ID_AMM
and id_parent = @SYSTEM_ID_VT
OPEN c_Fascicoli
FETCH next from c_Fascicoli into @DTA_CREAZIONE,@DTA_CHIUSURA
while(@@fetch_status=0)
BEGIN
-----------------conto le differenze parziali di tutti i fascicoli contenuti nella voce di titolario selezionata
IF ((@DTA_CREAZIONE IS NOT NULL) AND (@DTA_CHIUSURA IS NOT NULL))
BEGIN
set @contaFasc = @contaFasc + 1
set @intervallo = @intervallo + DATEDIFF(DAY,@DTA_CREAZIONE,@DTA_CHIUSURA)
end
----------------- end
FETCH next from c_Fascicoli into @DTA_CREAZIONE,@DTA_CHIUSURA
END
--(FINE 2 ciclo)
DEALLOCATE c_Fascicoli
--converto i valori trovati e calcolo il tempo di lavorazione medio di tutti i fascicoli della voce di titolario prescelta
if ((@intervallo <> 0) and (@contaFasc <> 0))
begin
set @tempoMedio = @intervallo / @contaFasc
end
-- INSERISCO I VALORI TROVATI NELLA TABELLA TEMPORANEA
INSERT INTO #TEMP_REPORT_LAVORAZIONE_FASCICOLI (COD_CLASS,DESC_CLASS,T_MEDIO_LAV)
VALUES (@VAR_CODICE_VT,@DESCRIPTION_VT,@tempoMedio)
-- reset delle variabili di conteggio
set @contaFasc = 0
set @intervallo = 0
set @tempoMedio = 0

FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT
END
-- (FINE 1 ciclo)
DEALLOCATE c_VociTit

-- restituzione informazioni richieste
select * from #TEMP_REPORT_LAVORAZIONE_FASCICOLI


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Report_Tempo_Medio_Lav_Compact]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE  procedure [db_user].[Report_Tempo_Medio_Lav_Compact]


--PARAMETRI DI INPUT
@ID_AMM int,
@ID_REGISTRO int,
@ANNO int

as

--DICHIARAZIONI VARIABILI
declare @CodClass varchar (255)
declare @DescClass varchar (255)
declare @ContaFasc INT
declare @valore float
declare @tempoMedio float

declare @NUM_LIVELLO1 VARCHAR(255)
declare @VAR_CODICE_LIVELLO1 VARCHAR(255)
declare @DESCRIPTION__LIVELLO1 VARCHAR(255)
declare @TOT_VT int
declare @CONTATORE int

--SETTAGGIO INIZIALE VARIABILI
set @ContaFasc = 0
set @tempoMedio = 0
set @valore = 0
set @CONTATORE = 0
set @TOT_VT = 0



--TABELLA TEMPORANEA ALLOCAZIONE RISULTATI
CREATE TABLE [db_user].[#TEMP_REPORT_LAVORAZIONE_FASCICOLI]
(
[COD_CLASS] [varchar] (255),
[DESC_CLASS] [varchar] (255),
[T_MEDIO_LAV] [INT]

) ON [PRIMARY]

-- variabili ausiliarie per il cursore che recupera le voci di titolario
DECLARE @SYSTEM_ID_VT INT
DECLARE @DESCRIPTION_VT VARCHAR (255)
DECLARE @VAR_CODICE_VT VARCHAR (255)

--variabili ausuliarie per il cursore dei fascicoli
DECLARE @DTA_CREAZIONE DATETIME
DECLARE @DTA_CHIUSURA DATETIME
DECLARE @INTERVALLO INT
set @intervallo = 0

--1° QUERY- elenco voci di titolario  -- (input : @id_amm)
DECLARE c_VociTit CURSOR LOCAL FOR -- contiene tutte le voci di titolario (TIPO "T")
select system_id,description,var_codice,num_livello from project where var_codice is not null and
id_amm =@ID_AMM and cha_tipo_proj = ''T'' and (id_registro = @id_registro OR id_registro is null)
order by var_cod_liv1
OPEN c_VociTit
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT,@NUM_LIVELLO1
while(@@fetch_status=0)
BEGIN
--------2° QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)
if(@NUM_LIVELLO1 = 1)
Begin
set @VAR_CODICE_LIVELLO1 = @VAR_CODICE_VT
set @DESCRIPTION__LIVELLO1 = @DESCRIPTION_VT
set @CONTATORE = 0
end
set @CONTATORE = @CONTATORE +1;

DECLARE c_Fascicoli CURSOR LOCAL FOR -- contiene tutti i fascicoli (TIPO "F")
select project.dta_creazione, project.dta_chiusura
from project
where cha_tipo_proj = ''F'' and id_amm = @ID_AMM
and id_parent = @SYSTEM_ID_VT
OPEN c_Fascicoli
FETCH next from c_Fascicoli into @DTA_CREAZIONE,@DTA_CHIUSURA
while(@@fetch_status=0)
BEGIN
-----------------conto le differenze parziali di tutti i fascicoli contenuti nella voce di titolario selezionata
IF ((@DTA_CREAZIONE IS NOT NULL) AND (@DTA_CHIUSURA IS NOT NULL))
BEGIN
set @contaFasc = @contaFasc + 1
set @intervallo = @intervallo + DATEDIFF(DAY,@DTA_CREAZIONE,@DTA_CHIUSURA)
end
----------------- end
FETCH next from c_Fascicoli into @DTA_CREAZIONE,@DTA_CHIUSURA
END
--(FINE 2 ciclo)
DEALLOCATE c_Fascicoli
--converto i valori trovati e calcolo il tempo di lavorazione medio di tutti i fascicoli della voce di titolario prescelta
if ((@intervallo <> 0) and (@contaFasc <> 0))
begin
set @tempoMedio = @intervallo / @contaFasc
set @TOT_VT = @TOT_VT + @tempoMedio
if(@tempoMedio < 0)
begin
set @tempoMedio = 0
end
end
-- INSERISCO I VALORI TROVATI NELLA TABELLA TEMPORANEA
if(@NUM_LIVELLO1 = 1)
begin
set @TOT_VT = @TOT_VT / @CONTATORE
INSERT INTO #TEMP_REPORT_LAVORAZIONE_FASCICOLI (COD_CLASS,DESC_CLASS,T_MEDIO_LAV)
VALUES (@VAR_CODICE_VT,@DESCRIPTION_VT,@TOT_VT)
end
-- reset delle variabili di conteggio
set @contaFasc = 0
set @intervallo = 0
set @tempoMedio = 0
set @TOT_VT = 0

FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT,@NUM_LIVELLO1
END
-- (FINE 1 ciclo)
DEALLOCATE c_VociTit

-- restituzione informazioni richieste
select * from [db_user].[#TEMP_REPORT_LAVORAZIONE_FASCICOLI]


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_ANNUALE_FASCICOLI]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'



CREATE   PROCEDURE [db_user].[REPORT_ANNUALE_FASCICOLI]
--(INPUT: filtri AOO e anno)
@ID_AMM int,
@ID_REGISTRO int,
@ANNO int,
@MESE INT

as

-- variabili globali
declare @totFasc float
declare @totFascA float
declare @totFascC float
declare @MESE_VC varchar (255)

--variabili mensili
declare @contaMese int
declare @totFascM float
declare @totFascMA float
declare @totFascMC float
declare @totPercFascA float
declare @totPercFascC float

--settaggio variabili
set @totFasc = 0
set @totFascA = 0
set @totFascC = 0
set @contaMese = 1
set @totFascM  = 0
set @totFascMA = 0
set @totFascMC = 0


set @totPercFascA = 0
set @totPercFascC =0


/* Creo una tabella temporanea */
CREATE TABLE [db_user].[#REPORT_ANNUALE_FASCICOLI]
(
[TOTFASC] [float],
[TOTFASCA] [int],
[TOTFASCC] [int],
[MESE] [varchar] (255),
[TOTFASCM] [int],
[TOTFASCMA] [int],
[TOTFASCMC] [int],
[TOTPERCFASCA] [float],
[TOTPERCFASCC] [float]
)
ON [PRIMARY]
--conta valori globali
-- CONTA FASCICOLI totali nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFasc = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F''
and id_amm = @id_amm
and year (dta_creazione) = @anno
and (id_registro = @id_registro or id_registro is null))


-- CONTA FASCICOLI CREATI NELL''ANNO  nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascA = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F''
and  year (dta_creazione) = @anno
and cha_stato = ''A''
and id_amm = @id_amm
and (id_registro = @id_registro or id_registro is null))


-- CONTA FASCICOLI CHIUSI NELL''ANNO nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascC = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F'' and cha_stato = ''C''
and  (year(dta_CHIUSURA)=@anno)
and id_amm = @id_amm
and (id_registro = @id_registro or id_registro is null))
--fine conta


--ciclo scansione mensile
while @mese  >= @contaMese
begin
--conto  i fascicoli creati (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascMA = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F'' and cha_stato = ''A''
and  month(dta_creazione) = @contaMese and year(dta_creazione)=@anno
and id_amm = @id_amm and (id_registro = @id_registro or id_registro is null))
--conto  i fascicoli chiusi (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascMC = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F'' and cha_stato = ''C''
and  month(dta_CHIUSURA) = @contaMese and year(dta_chiusura)=@anno
and id_amm = @id_amm and (id_registro = @id_registro or id_registro is null))
set @totFascM = @totFascMA + @totFascMC
--calcolo percentuali
if(@totFascM <> 0)
begin
if(@totFascMA <> 0)
begin
set @TotPercFascA = ROUND(((@totFascMA / @totFascM) * 100),2)
end
if(@totFascMC <> 0)
begin
set @TotPercFascC = ROUND(((@totFascMC / @totFascM) * 100),2)
end
end
-- parsing valore mese

Select @MESE_VC =
CASE @contaMese
WHEN 1 THEN ''Gennaio''
WHEN 2 THEN ''Febbraio''
WHEN 3 THEN ''Marzo''
WHEN 4 THEN ''Aprile''
WHEN 5 THEN ''Maggio''
WHEN 6 THEN ''Giugno''
WHEN 7 THEN ''Luglio''
WHEN 8 THEN ''Agosto''
WHEN 9 THEN ''Settembre''
WHEN 10 THEN ''Ottobre''
WHEN 11 THEN ''Novembre''
WHEN 12 THEN ''Dicembre''
end
--
-- inserimento dati nella tabella temporanea
INSERT INTO [db_user].[#REPORT_ANNUALE_FASCICOLI](TOTFASC,TOTFASCA,TOTFASCC,MESE,TOTFASCM,TOTFASCMA,TOTFASCMC,TOTPERCFASCA,TOTPERCFASCC)
VALUES (@totFasc,@totFascA,@totFascC,@MESE_VC,@totFascM, @totFascMA, @totFascMC, @totPercFascA, @totPercFascC)

--reset dei contatori
set @contaMese = @contaMese + 1
set @totFascM  = 0
set @totFascMA = 0
set @totFascMC = 0
set @totPercFascA = 0
set @totPercFascC =0

end

--fine ciclo

SELECT * FROM #REPORT_ANNUALE_FASCICOLI


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[REPORT_MENSILE_FASCICOLI]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'


CREATE  PROCEDURE [db_user].[REPORT_MENSILE_FASCICOLI]
--(INPUT: filtri AOO e anno)
@ID_AMM int,
@ID_REGISTRO int,
@ANNO int,
@MESE INT

as

-- variabili globali
declare @totFasc float
declare @totFascA float
declare @totFascC float
declare @MESE_VC varchar (255)

--variabili mensili
declare @contaMese int
declare @totFascM float
declare @totFascMA float
declare @totFascMC float
declare @totPercFascA float
declare @totPercFascC float

--settaggio variabili
set @totFasc = 0
set @totFascA = 0
set @totFascC = 0
set @contaMese = 1
set @totFascM  = 0
set @totFascMA = 0
set @totFascMC = 0


set @totPercFascA = 0
set @totPercFascC =0


/* Creo una tabella temporanea */
CREATE TABLE [db_user].[#REPORT_MENSILE_FASCICOLI]
(
[TOTFASC] [float],
[TOTFASCA] [int],
[TOTFASCC] [int],
[MESE] [varchar] (255),
[TOTFASCM] [int],
[TOTFASCMA] [int],
[TOTFASCMC] [int],
[TOTPERCFASCA] [float],
[TOTPERCFASCC] [float]
)
ON [PRIMARY]
--conta valori globali
-- CONTA FASCICOLI totali nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFasc = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F''
and id_amm = @id_amm
and year (dta_creazione) = @anno
and (id_registro = @id_registro or id_registro is null))


-- CONTA FASCICOLI CREATI NELL''ANNO  nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascA = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F''
and  year (dta_creazione) = @anno
and cha_stato = ''A''
and id_amm = @id_amm
and (id_registro = @id_registro or id_registro is null))


-- CONTA FASCICOLI CHIUSI NELL''ANNO nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascC = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F'' and cha_stato = ''C''
and  (year(dta_CHIUSURA)=@anno)
and id_amm = @id_amm
and (id_registro = @id_registro or id_registro is null))
--fine conta


--ciclo scansione mensile
--while @mese  >= @contaMese
--begin
set @contaMese = @MESE
--conto  i fascicoli creati (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascMA = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F'' and cha_stato = ''A''
and  month(dta_creazione) = @contaMese and year(dta_creazione)=@anno
and id_amm = @id_amm and (id_registro = @id_registro or id_registro is null))
--conto  i fascicoli chiusi (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
set @totFascMC = (select COUNT (DISTINCT (SYSTEM_ID)) from project
where cha_tipo_proj = ''F'' and cha_stato = ''C''
and  month(dta_CHIUSURA) = @contaMese and year(dta_chiusura)=@anno
and id_amm = @id_amm and (id_registro = @id_registro or id_registro is null))
set @totFascM = @totFascMA + @totFascMC
--calcolo percentuali
if(@totFascM <> 0)
begin
if(@totFascMA <> 0)
begin
set @TotPercFascA = ROUND(((@totFascMA / @totFascM) * 100),2)
end
if(@totFascMC <> 0)
begin
set @TotPercFascC = ROUND(((@totFascMC / @totFascM) * 100),2)
end
end
-- parsing valore mese

Select @MESE_VC =
CASE @contaMese
WHEN 1 THEN ''Gennaio''
WHEN 2 THEN ''Febbraio''
WHEN 3 THEN ''Marzo''
WHEN 4 THEN ''Aprile''
WHEN 5 THEN ''Maggio''
WHEN 6 THEN ''Giugno''
WHEN 7 THEN ''Luglio''
WHEN 8 THEN ''Agosto''
WHEN 9 THEN ''Settembre''
WHEN 10 THEN ''Ottobre''
WHEN 11 THEN ''Novembre''
WHEN 12 THEN ''Dicembre''
end
-- inserimento dati nella tabella temporanea
INSERT INTO [db_user].[#REPORT_MENSILE_FASCICOLI](TOTFASC,TOTFASCA,TOTFASCC,MESE,TOTFASCM,TOTFASCMA,TOTFASCMC,TOTPERCFASCA,TOTPERCFASCC)
VALUES (@totFasc,@totFascA,@totFascC,@MESE_VC,@totFascM, @totFascMA, @totFascMC, @totPercFascA, @totPercFascC)

SELECT * FROM [db_user].[#REPORT_MENSILE_FASCICOLI]


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[U_IdRegistro]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'--  FINE ELIMINA_TRASMISSIONI_IN_TODOLIST
--  PROCEDURE_U_ID_REGISTRO
CREATE  PROCEDURE [db_user].[U_IdRegistro] AS
DECLARE @id_parent varchar(32)
DECLARE @system_id varchar(32)
DECLARE @idRegistro int
DECLARE curr CURSOR FOR
select distinct id_parent from project where (cha_tipo_proj = ''F'' and cha_tipo_fascicolo = ''P'') order by id_parent
OPEN curr
FETCH NEXT FROM curr INTO @id_parent
WHILE @@FETCH_STATUS = 0
BEGIN
SET @system_id = @id_parent
SET @idRegistro = (select id_registro from project where system_id = @system_id)
UPDATE project set id_registro = @idRegistro where (cha_tipo_proj = ''F'' and cha_tipo_fascicolo = ''P'') and id_parent =@id_parent
FETCH NEXT FROM curr INTO @id_parent
END
CLOSE curr
DEALLOCATE curr
-- ''Procedura terminata con successo''


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[update_liv1]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'


-- LA PROCEDURA update_liv1 prende in input un parametro:
-- @id_amm di tipo intero : sytem_id dell''amministazione di interesse
CREATE PROCEDURE [db_user].[update_liv1] @id_amm int as
DECLARE @system_id varchar(32)
DECLARE curr CURSOR FOR
SELECT system_id from db_user.project where num_livello = 1 and id_amm=@id_amm and cha_tipo_proj= ''T''  ORDER BY system_id
declare @cont int
OPEN curr
SET @cont = 0
FETCH NEXT FROM curr INTO @system_id
WHILE @@FETCH_STATUS = 0
BEGIN
set @cont = @cont + 1
IF @cont <= 9
update db_user.project set var_cod_liv1 = ''000'' + CONVERT(varchar(32), @cont) where num_livello = 1 and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id=@system_id
IF @cont > 9 AND @cont <= 99
update db_user.project set var_cod_liv1 = ''00'' + CONVERT(varchar(32), @cont) where num_livello = 1 and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id=@system_id
IF @cont > 99 and @cont <= 999
update db_user.project set var_cod_liv1 = ''0'' + CONVERT(varchar(32), @cont) where num_livello = 1 and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id=@system_id
IF @cont > 999
update db_user.project set var_cod_liv1 = CONVERT(varchar(32), @cont) where num_livello = 1 and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id=@system_id

FETCH NEXT FROM curr INTO @system_id
END
CLOSE curr
DEALLOCATE curr


' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[Report_Annuale_FASC_VT_compatta]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create procedure [db_user].[Report_Annuale_FASC_VT_compatta]
/***************DICHIARAZIONE PARAMETRI***********************/
@ID_AMM int,
@ID_REGISTRO int,
@ANNO int,
@MESE int

AS
/******************************************************************/
/***************DICHIARAZIONE VARIABILI***********************/
-- variabili ausiliarie per il cursore che recupera le voci di titolario
DECLARE @SYSTEM_ID_VT INT
DECLARE @DESCRIPTION_VT VARCHAR (255)
DECLARE @VAR_CODICE_VT VARCHAR (255)
DECLARE @M_FASC_CREATI int
DECLARE @FASC_CHIUSI int
DECLARE @FASC_CREATI int
DECLARE @M_FASC_CHIUSI int
DECLARE @i int
DECLARE @MESE_VC int
DECLARE @MESE_VC_C int

set @MESE_VC = 0
set @MESE_VC_C = 0

DECLARE @GENNAIO int
DECLARE @FEBBRAIO int
DECLARE @MARZO int
DECLARE @APRILE int
DECLARE @MAGGIO int
DECLARE @GIUGNO int
DECLARE @LUGLIO int
DECLARE @AGOSTO int
DECLARE @SETTEMBRE int
DECLARE @OTTOBRE int
DECLARE @NOVEMBRE int
DECLARE @DICEMBRE int

set @GENNAIO = 0
set @FEBBRAIO = 0
set @MARZO = 0
set @APRILE = 0
set @MAGGIO = 0
set @GIUGNO = 0
set @LUGLIO = 0
set @AGOSTO = 0
set @SETTEMBRE = 0
set @OTTOBRE = 0
set @NOVEMBRE = 0
set @DICEMBRE = 0

DECLARE @VT_FASC_CREATI int
DECLARE @VT_FASC_CHIUSI int
SET @i = 1
DECLARE @NUM_LIVELLO1 VARCHAR (255)
DECLARE @VAR_CODICE_LIVELLO1 VARCHAR (255)
DECLARE @DESCRIPTION__LIVELLO1 VARCHAR (255)
-- variabili ausiliarie per il cursore che recupera la lista dei fascicoli
DECLARE @SYSTEM_ID_FASC INT
-- dichiarazione delle variabili per il tot mensile di fasc. chiusi
DECLARE @GENNAIO_C int
DECLARE @FEBBRAIO_C int
DECLARE @MARZO_C int
DECLARE @APRILE_C int
DECLARE @MAGGIO_C int
DECLARE @GIUGNO_C int
DECLARE @LUGLIO_C int
DECLARE @AGOSTO_C int
DECLARE @SETTEMBRE_C int
DECLARE @OTTOBRE_C int
DECLARE @NOVEMBRE_C int
DECLARE @DICEMBRE_C int

set @GENNAIO_C = 0
set @FEBBRAIO_C = 0
set @MARZO_C = 0
set @APRILE_C = 0
set @MAGGIO_C = 0
set @GIUGNO_C = 0
set @LUGLIO_C = 0
set @AGOSTO_C = 0
set @SETTEMBRE_C = 0
set @OTTOBRE_C = 0
set @NOVEMBRE_C = 0
set @DICEMBRE_C = 0

--dichiarazione delle variabili ausiliare per il totale della singola voce di titolario
DECLARE @TOT_GENNAIO VARCHAR (255)
DECLARE @TOT_FEBBRAIO VARCHAR (255)
DECLARE @TOT_MARZO VARCHAR (255)
DECLARE @TOT_APRILE VARCHAR (255)
DECLARE @TOT_MAGGIO VARCHAR (255)
DECLARE @TOT_GIUGNO VARCHAR (255)
DECLARE @TOT_LUGLIO VARCHAR (255)
DECLARE @TOT_AGOSTO VARCHAR (255)
DECLARE @TOT_SETTEMBRE VARCHAR (255)
DECLARE @TOT_OTTOBRE VARCHAR (255)
DECLARE @TOT_NOVEMBRE VARCHAR (255)
DECLARE @TOT_DICEMBRE VARCHAR (255)
DECLARE @TOT_VT_T VARCHAR (255)
DECLARE @TOT_VT int
DECLARE @TOT_VT_C int
--inizializzazione delle  variabili ausiliare per il totale della singola voce di titolario
DECLARE @T_GENNAIO int
DECLARE @T_FEBBRAIO int
DECLARE @T_MARZO int
DECLARE @T_APRILE int
DECLARE @T_MAGGIO int
DECLARE @T_GIUGNO int
DECLARE @T_LUGLIO int
DECLARE @T_AGOSTO int
DECLARE @T_SETTEMBRE int
DECLARE @T_OTTOBRE int
DECLARE @T_NOVEMBRE int
DECLARE @T_DICEMBRE int

DECLARE @T_GENNAIO_C int
DECLARE @T_FEBBRAIO_C int
DECLARE @T_MARZO_C int
DECLARE @T_APRILE_C int
DECLARE @T_MAGGIO_C int
DECLARE @T_GIUGNO_C int
DECLARE @T_LUGLIO_C int
DECLARE @T_AGOSTO_C int
DECLARE @T_SETTEMBRE_C int
DECLARE @T_OTTOBRE_C int
DECLARE @T_NOVEMBRE_C int
DECLARE @T_DICEMBRE_C int

set @T_GENNAIO = 0
set @T_FEBBRAIO = 0
set @T_MARZO = 0
set @T_APRILE = 0
set @T_MAGGIO = 0
set @T_GIUGNO = 0
set @T_LUGLIO = 0
set @T_AGOSTO = 0
set @T_SETTEMBRE = 0
set @T_OTTOBRE = 0
set @T_NOVEMBRE = 0
set @T_DICEMBRE = 0

set @T_GENNAIO_C = 0
set @T_FEBBRAIO_C = 0
set @T_MARZO_C = 0
set @T_APRILE_C = 0
set @T_MAGGIO_C = 0
set @T_GIUGNO_C = 0
set @T_LUGLIO_C = 0
set @T_AGOSTO_C = 0
set @T_SETTEMBRE_C = 0
set @T_OTTOBRE_C = 0
set @T_NOVEMBRE_C = 0
set @T_DICEMBRE_C = 0

set @TOT_VT_T = ''0/0''
set @TOT_VT = 0
set @TOT_VT_C = 0
/*******************************************************************/

--TABELLA TEMPORANEA ALLOCAZIONE RISULTATI
/*Tot. Colonne: 18*/
CREATE TABLE [db_user].[#TEMP_REPORT_ANNUALE_FASC_VT]
(
[FASC_CREATI] [varchar] (255),
[FASC_CHIUSI] [varchar] (255),
[VAR_COD] [varchar] (255),
[VAR_DESCR] [varchar] (255),
[GENNAIO] [varchar] (255),
[FEBBRAIO] [varchar] (255),
[MARZO] [varchar] (255),
[APRILE] [varchar] (255),
[MAGGIO] [varchar] (255),
[GIUGNO] [varchar] (255),
[LUGLIO] [varchar] (255),
[AGOSTO] [varchar] (255),
[SETTEMBRE] [varchar] (255),
[OTTOBRE] [varchar] (255),
[NOVEMBRE] [varchar] (255),
[DICEMBRE] [varchar] (255),
[VT_FAC_CREATI] [varchar] (255)
) ON [PRIMARY]

/*******************************RECUPERO DEI DATI GENERALI************************************************************************************
FASC_CREATI:  Tutti i fascicoli con:
- anno di creazione pari all''anno di interesse,
- id_registro pari a qullo selezionato
- id_amm pari a quello selezionato

FASC_GEN_CREATI: Tutti i fascicoli generali:
- id_registro pari a null
- id_amm pari a quello selezionato

FASC_CHIUSI: Tutti i fascicoli chiusi:
- id_registro pari a qullo selezionato
- id_amm pari a quello selezionato
- anno della dati di chiusura pari a quello selezionato
*/
/*QUERY PER IL RECUPERO DEI DATI GENERALI*/
select @FASC_CREATI = FASC_CREATI, @FASC_CHIUSI = FASC_CHIUSI
from
(select count(distinct(system_id)) as FASC_CREATI from project where cha_tipo_proj = ''F'' and year(dta_creazione) = @anno and  (id_registro = @ID_REGISTRO or id_registro is null) and id_amm = @ID_AMM and cha_stato = ''A'') as A_Fasc_creati,
(select count(distinct(system_id)) as FASC_CHIUSI from project where cha_tipo_proj = ''F'' and (id_registro = @ID_REGISTRO or id_registro = null) and id_amm = @ID_AMM and year(dta_chiusura)=@anno and cha_stato = ''C'') as A_Fasc_chiusi

/*****************************************************************************************************************************************************/

/*1 QUERY- Recupera l''elenco delle voci di titolario  (input : @id_amm) */
/*-- contiene tutte le voci di titolario (TIPO "T")*/
DECLARE c_VociTit CURSOR LOCAL
FOR

select system_id,description,var_codice,num_livello
from project
where var_codice is not null
and id_titolario = (select system_id from project where cha_stato= ''A'' and var_codice = ''T'')
and id_amm =@ID_AMM and cha_tipo_proj = ''T''
and (id_registro = @id_registro OR id_registro is null)
order by var_cod_liv1

/*Apertura del cursore*/
OPEN c_VociTit
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT,@NUM_LIVELLO1

while(@@fetch_status=0)
BEGIN
if(@NUM_LIVELLO1 = 1)
begin
set @VAR_CODICE_LIVELLO1 = @VAR_CODICE_VT
set @DESCRIPTION__LIVELLO1 = @DESCRIPTION_VT
end
/*2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)*/
while @i <= @mese
begin
select @M_FASC_CREATI = M_FASC_CREATI ,@M_FASC_CHIUSI = M_FASC_CHIUSI, @VT_FASC_CREATI = VT_FASC_CREATI, @VT_FASC_CHIUSI = VT_FASC_CHIUSI
from
(select count(distinct(system_id)) as VT_FASC_CREATI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and (id_registro = @id_registro or id_registro is null) and year(dta_creazione) = @anno and cha_stato = ''A'') as totPerCRVT,
(select count(distinct(system_id)) as VT_FASC_CHIUSI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and (id_registro = @id_registro or id_registro is null) and year(dta_chiusura) = @anno and cha_stato = ''C'') as totPerChVT,
(select count(distinct(system_id)) as M_FASC_CREATI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and month(dta_creazione) = @i  and (id_registro = @id_registro or id_registro is null) and year(dta_creazione) = @anno and cha_stato = ''A'') as m_fasc_creati,
(select count(distinct(system_id)) as M_FASC_CHIUSI from project where cha_tipo_proj = ''F'' and id_amm = @ID_AMM and id_parent = @SYSTEM_ID_VT and month(dta_chiusura) = @i  and (id_registro = @id_registro or id_registro is null) and year(dta_chiusura) = @anno and cha_stato = ''C'') as m_fasc_chiusi

set @MESE_VC = @VT_FASC_CREATI
set @MESE_VC_C = @VT_FASC_CHIUSI
if(@i = 1)
begin
/*Gennaio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @gennaio = @M_FASC_CREATI
set @gennaio_c = @M_FASC_CHIUSI
end
else
begin
set @gennaio = 0
set @gennaio_c = 0
end
end
if(@i = 2)
begin
/*Febbraio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @febbraio = @M_FASC_CREATI
set @febbraio_c = @M_FASC_CHIUSI
end
else
begin
set @febbraio = 0
set @febbraio_c = 0
end
end
if(@i = 3)
begin
/*Marzo*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @marzo = @M_FASC_CREATI
set @marzo_c =@M_FASC_CHIUSI
end
else
begin
set @marzo = 0
set @marzo_c = 0
end
end
if(@i = 4)
begin
/*Aprile*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @aprile = @M_FASC_CREATI
set @aprile_c = @M_FASC_CHIUSI
end
else
begin
set @aprile = 0
set @aprile_c = 0
end
end
if(@i = 5)
begin
/*MAggio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @maggio = @M_FASC_CREATI
set @maggio_c = @M_FASC_CHIUSI
end
else
begin
set @maggio = 0
set @maggio_c = 0
end
end
if(@i = 6)
begin
/*Giugno*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @giugno = @M_FASC_CREATI
set @giugno_c =@M_FASC_CHIUSI
end
else
begin
set @giugno = 0
set @giugno_c = 0
end
end
if(@i = 7)
begin
/*Luglio*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @luglio = @M_FASC_CREATI
set @luglio_c = @M_FASC_CHIUSI
end
else
begin
set @luglio = 0
set @luglio_c = 0
end
end
if(@i = 8)
begin
/*Agosto*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @agosto = @M_FASC_CREATI
set @agosto_c = @M_FASC_CHIUSI
end
else
begin
set @agosto = 0
set @agosto_c = 0
end
end
if(@i = 9)
begin
/*Settembre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @settembre = @M_FASC_CREATI
set @settembre_c = @M_FASC_CHIUSI
end
else
begin
set @settembre = 0
set @settembre_c = 0
end
end
if(@i = 10)
begin
/*Ottobre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @ottobre = @M_FASC_CREATI
set @ottobre_c = @M_FASC_CHIUSI
end
else
begin
set @ottobre = 0
set @ottobre_c = 0
end
end
if(@i = 11)
begin
/*Novembre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @novembre = @M_FASC_CREATI
set @novembre_c = @M_FASC_CHIUSI
end
else
begin
set @novembre = 0
set @novembre_c = 0
end
end
if(@i = 12)
begin
/*Dicembre*/
if(@M_FASC_CREATI>0 OR @M_FASC_CHIUSI >0)
begin
set @dicembre = @M_FASC_CREATI
set @dicembre_c = @M_FASC_CHIUSI
end
else
begin
set @dicembre = 0
set @dicembre_c = 0
end
end

/*AGGIORNAMENTO DEL CONTATORE*/
set @i = @i +1

end

set @T_GENNAIO = @T_GENNAIO + @gennaio
set @T_FEBBRAIO = @T_FEBBRAIO + @FEBBRAIO
set @T_MARZO = @T_MARZO + @MARZO
set @T_APRILE = @T_APRILE + @APRILE
set @T_MAGGIO = @T_MAGGIO + @MAGGIO
set @T_GIUGNO = @T_GIUGNO + @GIUGNO
set @T_LUGLIO = @T_LUGLIO + @LUGLIO
set @T_AGOSTO = @T_AGOSTO + @AGOSTO
set @T_SETTEMBRE = @T_SETTEMBRE + @SETTEMBRE
set @T_OTTOBRE = @T_OTTOBRE + @OTTOBRE
set @T_NOVEMBRE = @T_NOVEMBRE + @NOVEMBRE
set @T_DICEMBRE = @T_DICEMBRE + @DICEMBRE

set @T_GENNAIO_C = @T_GENNAIO_C + @gennaio_C
set @T_FEBBRAIO_C = @T_FEBBRAIO_C + @FEBBRAIO_C
set @T_MARZO_C = @T_MARZO_C + @MARZO_C
set @T_APRILE_C = @T_APRILE_C + @APRILE_C
set @T_MAGGIO_C = @T_MAGGIO_C + @MAGGIO_C
set @T_GIUGNO_C = @T_GIUGNO_C + @GIUGNO_C
set @T_LUGLIO_C = @T_LUGLIO_C + @LUGLIO_C
set @T_AGOSTO_C = @T_AGOSTO_C + @AGOSTO_C
set @T_SETTEMBRE_C = @T_SETTEMBRE_C + @SETTEMBRE_C
set @T_OTTOBRE_C = @T_OTTOBRE_C + @OTTOBRE_C
set @T_NOVEMBRE_C = @T_NOVEMBRE_C + @NOVEMBRE_C
set @T_DICEMBRE_C = @T_DICEMBRE_C + @DICEMBRE_C

set @TOT_VT = @TOT_VT + @MESE_VC
set @TOT_VT_C = @T_GENNAIO_C + @T_FEBBRAIO_C + @T_MARZO_C + @T_APRILE_C + @T_MAGGIO_C + @T_GIUGNO_C + @T_LUGLIO_C + @T_AGOSTO_C + @T_SETTEMBRE_C + @T_OTTOBRE_C + @T_NOVEMBRE_C + @T_DICEMBRE_C
set @MESE_VC_C = 0
set @MESE_VC = 0

--Aggiornamento delle variabili annuali
IF ((@TOT_VT = 0) AND (@TOT_VT_C = 0)) set  @TOT_VT_T = ''-''
ELSE set @TOT_VT_T = convert(varchar,@TOT_VT)+''/''+convert(varchar,@TOT_VT_C)

IF ((@t_gennaio = 0) AND (@t_gennaio_c = 0)) set  @TOT_GENNAIO = ''-''
ELSE  set @TOT_GENNAIO = convert(varchar,@t_gennaio)+''/''+convert(varchar,@t_gennaio_c)

IF ((@t_febbraio = 0) AND (@t_febbraio_c = 0)) set  @TOT_FEBBRAIO = ''-''
ELSE  set @TOT_FEBBRAIO = convert(varchar,@t_febbraio)+''/''+convert(varchar,@t_febbraio_c)

IF ((@t_marzo = 0) AND (@t_marzo_c = 0)) set  @TOT_MARZO = ''-''
ELSE  set @TOT_MARZO = convert(varchar,@t_marzo)+''/''+convert(varchar,@t_marzo_c)

IF ((@t_aprile = 0) AND (@t_aprile = 0)) set  @TOT_APRILE = ''-''
ELSE set @TOT_APRILE = convert(varchar,@t_aprile)+''/''+convert(varchar,@t_aprile_c)

IF ((@t_maggio = 0) AND (@t_maggio_c = 0)) set  @TOT_MAGGIO = ''-''
ELSE set @TOT_MAGGIO = convert(varchar,@t_maggio)+''/''+convert(varchar,@t_maggio_c)

IF ((@t_giugno = 0) AND (@t_giugno_c = 0)) set  @TOT_GIUGNO = ''-''
ELSE 	set @TOT_GIUGNO = convert(varchar,@t_giugno)+''/''+convert(varchar,@t_giugno_c)

IF ((@t_luglio = 0) AND (@t_luglio_c = 0)) set  @TOT_LUGLIO = ''-''
ELSE 	set @TOT_LUGLIO = convert(varchar,@t_luglio)+''/''+convert(varchar,@t_luglio_c)

IF ((@t_agosto = 0) AND (@t_agosto_c = 0)) set  @TOT_AGOSTO = ''-''
ELSE  set @TOT_AGOSTO = convert(varchar,@t_agosto)+''/''+convert(varchar,@t_agosto_c)

IF ((@t_settembre = 0) AND (@t_settembre_c = 0)) set  @TOT_SETTEMBRE = ''-''
ELSE  set @TOT_SETTEMBRE = convert(varchar,@t_settembre)+''/''+convert(varchar,@t_settembre_c)

IF ((@t_ottobre = 0) AND (@t_ottobre_c = 0)) set  @TOT_OTTOBRE = ''-''
ELSE  set @TOT_OTTOBRE = convert(varchar,@t_ottobre)+''/''+convert(varchar,@t_ottobre_c)

IF ((@t_novembre = 0) AND (@t_novembre_c = 0)) set  @TOT_NOVEMBRE = ''-''
ELSE  set @TOT_NOVEMBRE = convert(varchar,@t_novembre)+''/''+convert(varchar,@t_novembre_c)

IF ((@t_dicembre = 0) AND (@t_dicembre_c = 0)) set  @TOT_DICEMBRE = ''-''
ELSE set @TOT_DICEMBRE = convert(varchar,@t_dicembre)+''/''+convert(varchar,@t_dicembre_c)

/*Aggiorniamo il cursore delle voci di Titolario*/
SET @i = 1
FETCH next from c_VociTit into @SYSTEM_ID_VT,@DESCRIPTION_VT,@VAR_CODICE_VT,@NUM_LIVELLO1

if(@NUM_LIVELLO1=1)
begin
insert into #TEMP_REPORT_ANNUALE_FASC_VT
(FASC_CREATI,FASC_CHIUSI,VAR_COD,VAR_DESCR,GENNAIO,FEBBRAIO,MARZO,APRILE,MAGGIO,GIUGNO,LUGLIO,AGOSTO,SETTEMBRE,OTTOBRE,NOVEMBRE,DICEMBRE,VT_FAC_CREATI)
VALUES
(@FASC_CREATI,@FASC_CHIUSI,@VAR_CODICE_LIVELLO1,@DESCRIPTION__LIVELLO1,@tot_gennaio,@tot_febbraio,@tot_marzo,@tot_aprile,@tot_maggio,@tot_giugno,@tot_luglio,@tot_agosto,@tot_settembre,@tot_ottobre,@tot_novembre,@tot_dicembre,@TOT_VT_T)

--reset delle variabili
set @TOT_VT = 0
set @TOT_VT_C = 0

set @GENNAIO = 0
set @FEBBRAIO = 0
set @MARZO = 0
set @APRILE = 0
set @MAGGIO = 0
set @GIUGNO = 0
set @LUGLIO = 0
set @AGOSTO = 0
set @SETTEMBRE = 0
set @OTTOBRE = 0
set @NOVEMBRE = 0
set @DICEMBRE = 0

set @T_GENNAIO = 0
set @T_FEBBRAIO = 0

set @T_MARZO = 0
set @T_APRILE = 0
set @T_MAGGIO = 0
set @T_GIUGNO = 0
set @T_LUGLIO = 0
set @T_AGOSTO = 0
set @T_SETTEMBRE = 0
set @T_OTTOBRE = 0
set @T_NOVEMBRE = 0
set @T_DICEMBRE = 0

set @T_GENNAIO_C = 0
set @T_FEBBRAIO_C = 0
set @T_MARZO_C = 0
set @T_APRILE_C = 0
set @T_MAGGIO_C = 0
set @T_GIUGNO_C = 0
set @T_LUGLIO_C = 0
set @T_AGOSTO_C = 0
set @T_SETTEMBRE_C = 0
set @T_OTTOBRE_C = 0
set @T_NOVEMBRE_C = 0
set @T_DICEMBRE_C = 0
end
END

SELECT * FROM #TEMP_REPORT_ANNUALE_FASC_VT
' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[update_liv]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'

CREATE PROCEDURE [db_user].[update_liv] @num_livello int , @id_amm int as
-- dichiarazione variabili
DECLARE @id_parent varchar(32)
DECLARE @system_id varchar(32)
DECLARE @id_parent_2 varchar(32)
DECLARE @var_cod_liv1 varchar(32)
DECLARE @maxliv int
-- fine dichiarazione
SET @maxliv = (SELECT MAX(num_livello) from db_user.project where id_amm=@id_amm and cha_tipo_proj= ''T'')
IF(@num_livello <= @maxliv)
BEGIN
DECLARE curr2 CURSOR FOR
-- la query ritorna i system_id associati ai nodi di titolario relativi al numero di livello in input alla procedure
SELECT id_parent, system_id from db_user.project where num_livello = @num_livello and id_amm=@id_amm and cha_tipo_proj= ''T'' ORDER BY ID_PARENT, system_id
DECLARE @cont2 int
OPEN curr2
SET @cont2 = 0
FETCH NEXT FROM curr2 INTO @id_parent, @system_id
SET @id_parent_2 = @id_parent
-- finch?i sono record da prelevare
WHILE @@FETCH_STATUS = 0
BEGIN

IF (@id_parent_2 <> @id_parent)
-- per azzerare il contatore e far ripartire la numerazione dei var_cod_liv
-- quando il record corrente presenta un'' id_parent diverso da quello del record precedente
BEGIN
SET @cont2 = 0
SET @id_parent_2 = @id_parent
END
-- viene  ricavato il var cod_liv_1 del padre
SET @var_cod_liv1 = (select var_cod_liv1 from db_user.project where system_id = @id_parent and id_amm=@id_amm and cha_tipo_proj= ''T'' and num_livello = @num_livello - 1)
SET @cont2 = @cont2 + 1
IF @cont2 <= 9 -- questo controllo serve per concatenare due o tre zeri a seconda del valore del contatore
update db_user.project set var_cod_liv1 = @var_cod_liv1 + ''000'' + CONVERT(varchar(32), @cont2) where num_livello = @num_livello and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id = @system_id
IF @cont2 > 9 AND @cont2 <= 99
update db_user.project set var_cod_liv1 = @var_cod_liv1 + ''00'' + CONVERT(varchar(32), @cont2) where num_livello  = @num_livello and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id = @system_id
IF @cont2 > 99 and @cont2 <= 999
update db_user.project set var_cod_liv1 = @var_cod_liv1 + ''0'' + CONVERT(varchar(32), @cont2) where num_livello  = @num_livello and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id = @system_id
IF @cont2 > 999
update db_user.project set var_cod_liv1 = @var_cod_liv1  + CONVERT(varchar(32), @cont2) where num_livello  = @num_livello and id_amm=@id_amm and cha_tipo_proj= ''T'' and system_id = @system_id

FETCH NEXT FROM curr2 INTO @id_parent, @system_id
END

CLOSE curr2
DEALLOCATE curr2
END
else
print ''L''''amministrazione '' + CONVERT(varchar(32),@id_amm) + '' non presenta il livello di titolario '' + CONVERT(varchar(32), @num_livello)




' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[getCodTit]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'

CREATE function [db_user].[getCodTit](@idParent int)
returns varchar(32)
as
begin
declare @risultato varchar(32)
SET @risultato =''''

SELECT @risultato = upper(var_codice) from project where system_id = @idParent

return @risultato
end
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[I_SMISTAMENTO_SMISTADOC]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[I_SMISTAMENTO_SMISTADOC]
@IDPeopleMittente int,
@IDCorrGlobaleRuoloMittente int,
@IDGruppoMittente int,
@IDAmministrazioneMittente int,
@IDPeopleDestinatario int,
@IDCorrGlobaleDestinatario int,
@IDDocumento int,
@IDTrasmissione int,
@IDTrasmissioneUtenteMittente int,
@TrasmissioneConWorkflow bit,
@NoteGeneraliDocumento varchar(250),
@NoteIndividuali varchar(250),
@DataScadenza datetime,
@TipoDiritto nchar(1),
@Rights int,
@IDRagioneTrasm int
AS

DECLARE @resultValue INT
DECLARE @resultValueOut int
DECLARE @ReturnValue int
DECLARE @Identity int
DECLARE @IdentityTrasm int

BEGIN
INSERT INTO DPA_TRASMISSIONE
(
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
@IDCorrGlobaleRuoloMittente,
@IDPeopleMittente,
''D'',
@IDDocumento,
NULL,
GETDATE(),
@NoteGeneraliDocumento
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=-2 -- errore inserimento nella dpa_trasmissione
END
ELSE

BEGIN

SET @Identity=scope_identity()
set @IdentityTrasm = @Identity

INSERT INTO DPA_TRASM_SINGOLA
(
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
VAR_NOTE_SING,
CHA_TIPO_TRASM,
DTA_SCADENZA,
ID_TRASM_UTENTE
)
VALUES
(
@IDRagioneTrasm,
@Identity,
''U'',
@IDCorrGlobaleDestinatario,
@NoteIndividuali,
''S'',
@DataScadenza,
NULL
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=-3  -- errore inserimento nella dpa_trasm_singola
END
ELSE
BEGIN

SET @Identity=scope_identity()

INSERT INTO DPA_TRASM_UTENTE
(
ID_TRASM_SINGOLA,
ID_PEOPLE,
DTA_VISTA,
DTA_ACCETTATA,
DTA_RIFIUTATA,
DTA_RISPOSTA,
CHA_VISTA,
CHA_ACCETTATA,
CHA_RIFIUTATA,
VAR_NOTE_ACC,
VAR_NOTE_RIF,
CHA_VALIDA,
ID_TRASM_RISP_SING
)
VALUES
(
@Identity,
@IDPeopleDestinatario,
NULL,
NULL,
NULL,
NULL,
''0'',
''0'',
''0'',
NULL,
NULL,
''1'',
NULL
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue = - 4  -- errore inserimento nella dpa_trasm_utente
END
ELSE
BEGIN

UPDATE DPA_TRASMISSIONE SET DTA_INVIO = GETDATE() WHERE SYSTEM_ID = @IdentityTrasm

DECLARE @AccessRights int
SET @AccessRights=
(
SELECT 	MAX(ACCESSRIGHTS)
FROM 	SECURITY
WHERE 	THING=@IDDocumento AND
PERSONORGROUP=@IDPeopleDestinatario
)

IF (NOT @AccessRights IS NULL)
BEGIN
IF (@AccessRights < @Rights)
UPDATE 	SECURITY
SET 	ACCESSRIGHTS=@Rights
WHERE 	THING=@IDDocumento AND
PERSONORGROUP=@IDPeopleDestinatario AND
ACCESSRIGHTS=@AccessRights
END
ELSE
BEGIN
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
@IDDocumento,
@IDPeopleDestinatario,
@Rights,
@IDGruppoMittente,
@TipoDiritto
)
END

IF (@TrasmissioneConWorkflow=''1'')
UPDATE 	DPA_TRASM_UTENTE
SET
dta_vista = (case when dta_vista is null then GETDATE() else dta_vista end),
cha_vista  =  (case when dta_vista is null  then 1 else 0 end),
DTA_ACCETTATA=GETDATE(),
CHA_ACCETTATA=''1'',
VAR_NOTE_ACC=''Documento accettato e smistato'',
CHA_IN_TODOLIST = ''0''
WHERE (SYSTEM_ID = @IDTrasmissioneUtenteMittente
OR
SYSTEM_ID = (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=@IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=@IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
AND TS.CHA_TIPO_DEST= ''U'')
)
AND CHA_VALIDA=''1''

ELSE

BEGIN

EXEC db_user.SPsetDataVistaSmistamento @IDPeopleMittente, @IDDocumento, @IDGruppoMittente, ''D'', @idTrasmissione,  @resultValue out

SET @resultValueOut= @resultValue

IF(@resultValueOut=1)
BEGIN
SET @ReturnValue = -5;
RETURN
END
END

IF ((SELECT top 1 A.CHA_TIPO_TRASM
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE= @IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=@IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =@IDTrasmissioneUtenteMittente))
ORDER BY CHA_TIPO_DEST
)=''S'' AND @TrasmissioneConWorkflow=''1'')

UPDATE 	DPA_TRASM_UTENTE
SET 	CHA_VALIDA = ''0'', cha_in_todolist = ''0''
WHERE ID_TRASM_SINGOLA IN
(SELECT A.SYSTEM_ID
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=@IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=@IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =@IDTrasmissioneUtenteMittente)))
AND SYSTEM_ID NOT IN(@IDTrasmissioneUtenteMittente)

SET @ReturnValue=0
END
END
END
END

RETURN @ReturnValue

' 
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[I_SMISTAMENTO_SMISTADOC_U]') AND OBJECTPROPERTY(id,N'IsProcedure') = 1)
BEGIN
EXEC dbo.sp_executesql @statement = N'
create PROCEDURE [db_user].[I_SMISTAMENTO_SMISTADOC_U]
@IDPeopleMittente int,
@IDCorrGlobaleRuoloMittente int,
@IDGruppoMittente int,
@IDAmministrazioneMittente int,
@IDCorrGlobaleDestinatario int,
@IDDocumento int,
@IDTrasmissione int,
@IDTrasmissioneUtenteMittente int,
@TrasmissioneConWorkflow bit,
@NoteGeneraliDocumento varchar(250),
@NoteIndividuali varchar(250),
@DataScadenza datetime,
@TipoTrasmissione nchar(1),
@TipoDiritto nchar(1),
@Rights int,
@IDRagioneTrasm int
AS

DECLARE @ReturnValue int
DECLARE @resultValue int
DECLARE @resultValueOut int
DECLARE @Identity int
DECLARE @IDGroups int
DECLARE @AccessRights int

BEGIN
INSERT INTO DPA_TRASMISSIONE
(
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
@IDCorrGlobaleRuoloMittente,
@IDPeopleMittente,
''D'',
@IDDocumento,
NULL,
GETDATE(),
@NoteGeneraliDocumento
)

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=-2
END
ELSE
BEGIN
SET @Identity=scope_identity()

INSERT INTO DPA_TRASM_SINGOLA
(
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
VAR_NOTE_SING,
CHA_TIPO_TRASM,
DTA_SCADENZA,
ID_TRASM_UTENTE
)
VALUES
(
@IDRagioneTrasm,
@Identity,
''R'',
@IDCorrGlobaleDestinatario,
@NoteIndividuali,
@TipoTrasmissione,
@DataScadenza,
NULL
)

SET @Returnvalue = scope_identity()

IF (@@ROWCOUNT = 0)
BEGIN
SET @ReturnValue=-3
END
ELSE
BEGIN
SET @IDGroups =
(
SELECT A.ID_GRUPPO
FROM DPA_CORR_GLOBALI A
WHERE A.SYSTEM_ID = @IDCorrGlobaleDestinatario
)

SET @AccessRights=
(
SELECT 	MAX(ACCESSRIGHTS)
FROM 	SECURITY
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @IDGroups
)

IF (NOT @AccessRights IS NULL)
BEGIN
IF (@AccessRights < @Rights)
UPDATE 	SECURITY
SET 	ACCESSRIGHTS=@Rights
WHERE 	THING = @IDDocumento
AND
PERSONORGROUP = @IDGroups
AND
ACCESSRIGHTS=@AccessRights
END

ELSE
BEGIN
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
@IDDocumento,
@IDGroups,
@Rights,
@IDGruppoMittente,
@TipoDiritto
)
END

IF (@TrasmissioneConWorkflow=''1'')
UPDATE 	DPA_TRASM_UTENTE
SET
dta_vista = (case when dta_vista is null then GETDATE() else dta_vista end),
cha_vista  =  (case when dta_vista is null  then 1 else 0 end),
DTA_ACCETTATA=GETDATE(),
CHA_ACCETTATA=''1'',
VAR_NOTE_ACC=''Documento accettato e smistato'',
CHA_IN_TODOLIST = ''0''
WHERE (SYSTEM_ID = @IDTrasmissioneUtenteMittente
OR SYSTEM_ID = (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=@IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=@IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
AND TS.CHA_TIPO_DEST= ''U'')
)
AND CHA_VALIDA=''1''
ELSE
BEGIN

EXEC db_user.SPsetDataVistaSmistamento @IDPeopleMittente, @IDDocumento, @IDGruppoMittente, ''D'', @idTrasmissione,  @resultValue out

SET @resultValueOut = @resultValue

IF(@resultValueOut=1)
BEGIN
SET @ReturnValue = -4;
RETURN
END
END

IF ((SELECT top 1 A.CHA_TIPO_TRASM
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE= @IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=@IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =@IDTrasmissioneUtenteMittente))
ORDER BY CHA_TIPO_DEST
)=''S'' AND @TrasmissioneConWorkflow=''1'')

BEGIN
UPDATE 	DPA_TRASM_UTENTE
SET 	CHA_VALIDA = ''0'', cha_in_todolist = ''0''
WHERE ID_TRASM_SINGOLA IN
(SELECT A.SYSTEM_ID
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=@IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=@IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =@IDTrasmissioneUtenteMittente)))
AND SYSTEM_ID NOT IN( @IDTrasmissioneUtenteMittente)
END
END
END
END

RETURN @ReturnValue

' 
END
GO
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[checkVisibilitaArchivio]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [db_user].[checkVisibilitaArchivio]
(
    @tipoObjParam VARCHAR,
    @thingParam INT,
    @idgroupParam INT
)  
RETURNS int

AS  
BEGIN 

DECLARE @retValue INT
DECLARE @inArchivio VARCHAR(1) 
DECLARE @isArchivista INT

set @inArchivio = ''''
set @isArchivista = db_user.checkGestioneArchivio(@idgroupParam)

    if (@tipoObjParam = ''D'')
            SELECT @inArchivio=CHA_IN_ARCHIVIO FROM PROFILE WHERE SYSTEM_ID=@thingParam
   else
        SELECT @inArchivio=CHA_IN_ARCHIVIO FROM PROJECT WHERE SYSTEM_ID=@thingParam

   if ( (@inArchivio = ''0''  or @inArchivio=''2'') and @isArchivista=0)
   set @retValue = 1

   if ( (@inArchivio = ''1'' or @inArchivio=''2'') and @isArchivista=1)
   set @retValue = 2
      
   if ( (@inArchivio = ''1'' and @isArchivista=''0'') or (@inArchivio = ''0'' and @isArchivista = ''1''))
   set @retValue = 0
      
   RETURN @retValue

END 
' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[checkSecurity]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'
CREATE FUNCTION [db_user].[checkSecurity]
(
@thing INT,
@idpeople INT,
@idgroup INT,
@tipoObjParam VARCHAR
)
RETURNS INT
AS

BEGIN

DECLARE @retValue INT
declare @cnt int

set @retValue = db_user.checkVisibilitaArchivio(@tipoObjParam, @thing, @idgroup)
set @cnt = 0

IF (@retValue=1) 
	begin 
	   SELECT @cnt=COUNT(*)  FROM security WHERE thing = @thing AND (personorgroup IN (@idgroup, @idpeople))  and ACCESSRIGHTS>0
	end

if (@cnt > 0)
	SET @retValue = 1 
ELSE
	SET @retValue = 0

RETURN @retValue
end' 
END

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[checkSecurityDocumento]') AND xtype in (N'FN', N'IF', N'TF'))
BEGIN
execute dbo.sp_executesql @statement = N'CREATE FUNCTION [db_user].[checkSecurityDocumento]
(
@idprofile INT,
@idpeople INT,
@idgroup INT,
@tipoObjParam VARCHAR
)
RETURNS INT
AS

BEGIN

DECLARE @thing INT
SELECT @thing = ID_DOCUMENTO_PRINCIPALE
FROM PROFILE
WHERE SYSTEM_ID = @idprofile

IF (@thing IS NULL)
SET @thing = @idprofile

RETURN db_user.checkSecurity(@thing, @idpeople, @idgroup,@tipoObjParam)
END

' 
END

GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK_DPA_LDAP_SYNC_HISTORY_DPA_AMMINISTRA]') AND type = 'F')
ALTER TABLE [db_user].[DPA_LDAP_SYNC_HISTORY]  WITH CHECK ADD  CONSTRAINT [FK_DPA_LDAP_SYNC_HISTORY_DPA_AMMINISTRA] FOREIGN KEY([ID_AMM])
REFERENCES [db_user].[DPA_AMMINISTRA] ([SYSTEM_ID])
ON DELETE CASCADE
GO
ALTER TABLE [db_user].[DPA_LDAP_SYNC_HISTORY] CHECK CONSTRAINT [FK_DPA_LDAP_SYNC_HISTORY_DPA_AMMINISTRA]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK_DPA_LDAP_CONFIG_DPA_AMMINISTRA]') AND type = 'F')
ALTER TABLE [db_user].[DPA_LDAP_CONFIG]  WITH CHECK ADD  CONSTRAINT [FK_DPA_LDAP_CONFIG_DPA_AMMINISTRA] FOREIGN KEY([ID_AMM])
REFERENCES [db_user].[DPA_AMMINISTRA] ([SYSTEM_ID])
ON DELETE CASCADE
GO
ALTER TABLE [db_user].[DPA_LDAP_CONFIG] CHECK CONSTRAINT [FK_DPA_LDAP_CONFIG_DPA_AMMINISTRA]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK_PEOPLE_DPA_CLIENT_MODEL_PROCESSORS]') AND type = 'F')
ALTER TABLE [db_user].[PEOPLE]  WITH CHECK ADD  CONSTRAINT [FK_PEOPLE_DPA_CLIENT_MODEL_PROCESSORS] FOREIGN KEY([ID_CLIENT_MODEL_PROCESSOR])
REFERENCES [db_user].[DPA_CLIENT_MODEL_PROCESSORS] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[PEOPLE] CHECK CONSTRAINT [FK_PEOPLE_DPA_CLIENT_MODEL_PROCESSORS]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK_DPA_AMMINISTRA_DPA_CLIENT_MODEL_PROCESSORS]') AND type = 'F')
ALTER TABLE [db_user].[DPA_AMMINISTRA]  WITH CHECK ADD  CONSTRAINT [FK_DPA_AMMINISTRA_DPA_CLIENT_MODEL_PROCESSORS] FOREIGN KEY([ID_CLIENT_MODEL_PROCESSOR])
REFERENCES [db_user].[DPA_CLIENT_MODEL_PROCESSORS] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_AMMINISTRA] CHECK CONSTRAINT [FK_DPA_AMMINISTRA_DPA_CLIENT_MODEL_PROCESSORS]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_AREA_CONSERVAZIONE_R01]') AND type = 'F')
ALTER TABLE [db_user].[DPA_AREA_CONSERVAZIONE]  WITH CHECK ADD  CONSTRAINT [DPA_AREA_CONSERVAZIONE_R01] FOREIGN KEY([VAR_TIPO_SUPPORTO])
REFERENCES [db_user].[DPA_TIPO_SUPPORTO] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_AREA_CONSERVAZIONE] CHECK CONSTRAINT [DPA_AREA_CONSERVAZIONE_R01]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_VIS_T__ID_TI__1BC821DD]') AND type = 'F')
ALTER TABLE [db_user].[DPA_VIS_TIPO_DOC]  WITH CHECK ADD FOREIGN KEY([ID_TIPO_DOC])
REFERENCES [db_user].[DPA_TIPO_ATTO] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[DPA_ITEMS_CONSERVAZIONE_R01]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ITEMS_CONSERVAZIONE]  WITH CHECK ADD  CONSTRAINT [DPA_ITEMS_CONSERVAZIONE_R01] FOREIGN KEY([ID_CONSERVAZIONE])
REFERENCES [db_user].[DPA_AREA_CONSERVAZIONE] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_ITEMS_CONSERVAZIONE] CHECK CONSTRAINT [DPA_ITEMS_CONSERVAZIONE_R01]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_OGGET__ID_TI__38996AB5]') AND type = 'F')
ALTER TABLE [db_user].[DPA_OGGETTI_CUSTOM]  WITH CHECK ADD FOREIGN KEY([ID_TIPO_OGGETTO])
REFERENCES [db_user].[DPA_TIPO_OGGETTO] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK_OGGCUST_IDTIPOOGG_TIPOOGG_SYSID]') AND type = 'F')
ALTER TABLE [db_user].[DPA_OGGETTI_CUSTOM]  WITH CHECK ADD  CONSTRAINT [FK_OGGCUST_IDTIPOOGG_TIPOOGG_SYSID] FOREIGN KEY([ID_TIPO_OGGETTO])
REFERENCES [db_user].[DPA_TIPO_OGGETTO] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_OGGETTI_CUSTOM] CHECK CONSTRAINT [FK_OGGCUST_IDTIPOOGG_TIPOOGG_SYSID]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_ASSOC__ID_OG__3F466844]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ASSOCIAZIONE_VALORI]  WITH CHECK ADD FOREIGN KEY([ID_OGGETTO_CUSTOM])
REFERENCES [db_user].[DPA_OGGETTI_CUSTOM] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK_ASSVAL_IDOGGCUST_OGGCUST_SYSID]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ASSOCIAZIONE_VALORI]  WITH CHECK ADD  CONSTRAINT [FK_ASSVAL_IDOGGCUST_OGGCUST_SYSID] FOREIGN KEY([ID_OGGETTO_CUSTOM])
REFERENCES [db_user].[DPA_OGGETTI_CUSTOM] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_ASSOCIAZIONE_VALORI] CHECK CONSTRAINT [FK_ASSVAL_IDOGGCUST_OGGCUST_SYSID]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_OGG_C__ID_OG__793DFFAF]') AND type = 'F')
ALTER TABLE [db_user].[DPA_OGG_CUSTOM_COMP]  WITH CHECK ADD FOREIGN KEY([ID_OGG_CUSTOM])
REFERENCES [db_user].[DPA_OGGETTI_CUSTOM] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_VIS_T__ID_TI__56E8E7AB]') AND type = 'F')
ALTER TABLE [db_user].[DPA_VIS_TIPO_FASC]  WITH CHECK ADD FOREIGN KEY([ID_TIPO_FASC])
REFERENCES [db_user].[DPA_TIPO_FASC] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_ASS_T__ID_OG__503BEA1C]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ASS_TEMPLATES_FASC]  WITH CHECK ADD FOREIGN KEY([ID_OGGETTO])
REFERENCES [db_user].[DPA_OGGETTI_CUSTOM_FASC] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_ASS_T__ID_TE__51300E55]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ASS_TEMPLATES_FASC]  WITH CHECK ADD FOREIGN KEY([ID_TEMPLATE])
REFERENCES [db_user].[DPA_TIPO_FASC] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_OGGET__ID_TI__4D5F7D71]') AND type = 'F')
ALTER TABLE [db_user].[DPA_OGGETTI_CUSTOM_FASC]  WITH CHECK ADD FOREIGN KEY([ID_TIPO_OGGETTO])
REFERENCES [db_user].[DPA_TIPO_OGGETTO_FASC] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_ASS_V__ID_OG__540C7B00]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ASS_VALORI_FASC]  WITH CHECK ADD FOREIGN KEY([ID_OGGETTO_CUSTOM])
REFERENCES [db_user].[DPA_OGGETTI_CUSTOM_FASC] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_OGG_C__ID_OG__7C1A6C5A]') AND type = 'F')
ALTER TABLE [db_user].[DPA_OGG_CUSTOM_COMP_FASC]  WITH CHECK ADD FOREIGN KEY([ID_OGG_CUSTOM])
REFERENCES [db_user].[DPA_OGGETTI_CUSTOM_FASC] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_PASSI__Id_di]') AND type = 'F')
ALTER TABLE [db_user].[DPA_PASSI]  WITH CHECK ADD  CONSTRAINT [FK__DPA_PASSI__Id_di] FOREIGN KEY([Id_diagramma])
REFERENCES [db_user].[DPA_DIAGRAMMI_STATO] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_PASSI] CHECK CONSTRAINT [FK__DPA_PASSI__Id_di]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_PASSI__ID_ST]') AND type = 'F')
ALTER TABLE [db_user].[DPA_PASSI]  WITH CHECK ADD  CONSTRAINT [FK__DPA_PASSI__ID_ST] FOREIGN KEY([ID_STATO])
REFERENCES [db_user].[DPA_STATI] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_PASSI] CHECK CONSTRAINT [FK__DPA_PASSI__ID_ST]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_STATI__ID_DI]') AND type = 'F')
ALTER TABLE [db_user].[DPA_STATI]  WITH CHECK ADD  CONSTRAINT [FK__DPA_STATI__ID_DI] FOREIGN KEY([ID_DIAGRAMMA])
REFERENCES [db_user].[DPA_DIAGRAMMI_STATO] ([SYSTEM_ID])
GO
ALTER TABLE [db_user].[DPA_STATI] CHECK CONSTRAINT [FK__DPA_STATI__ID_DI]
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[FK__DPA_ASS_I__ID_IN__68D28DBC]') AND type = 'F')
ALTER TABLE [dbo].[DPA_ASS_INDX_SIS]  WITH CHECK ADD FOREIGN KEY([ID_INDICE_SIS])
REFERENCES [dbo].[DPA_INDX_SIS] ([SYSTEM_ID])
GO
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[db_user].[FK__DPA_ASS_I__ID_IN__7720AD13]') AND type = 'F')
ALTER TABLE [db_user].[DPA_ASS_INDX_SIS]  WITH CHECK ADD FOREIGN KEY([ID_INDICE_SIS])
REFERENCES [db_user].[DPA_INDX_SIS] ([SYSTEM_ID])
