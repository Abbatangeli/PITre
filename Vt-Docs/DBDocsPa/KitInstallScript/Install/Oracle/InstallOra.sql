--
-- Create Schema Script 
--   Database Version   : 10.2.0.1.0 
--   TOAD Version       : 9.5.0.31 
--   DB Connect String  : XE 
--   Schema             : TEAM 
--   Script Created by  : TEAM 
--   Script Created at  : 18/03/2009 17.26.37 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   DBMS_Jobs: 1 
--   Functions: 61      Lines of Code: 5747 
--   Indexes: 202       Columns: 254        
--   Object Privileges: 1 
--   Packages: 2        Lines of Code: 5 
--   Procedures: 54     Lines of Code: 7378 
--   Sequences: 37 
--   Tables: 127        Columns: 1256       Lob Segments: 3     Constraints: 104    
--   Triggers: 2 
--   Types: 21 
--   Views: 9           


--
-- ANNUALEDOCTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."ANNUALEDOCTABLEROW"                                                                          is table of AnnualeDocTableType
/

SHOW ERRORS;


--
-- ANNUALEDOCTABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."ANNUALEDOCTABLETYPE"                                                                          IS OBJECT (THING varchar(50), TOT_DOC varchar(255), GRIGI varchar(255), PERC_GRIGI varchar(255), PROT varchar(255), PERC_PROT varchar(255), ANNULL varchar(255), PERC_ANNULL varchar(255), ARRIVO varchar(255), PERC_ARRIVO varchar(255), PARTENZA varchar(255), PERC_PARTENZA varchar(255), INTERNI varchar(255), PERC_INTERNI varchar(255) )
/

SHOW ERRORS;


--
-- DOCCLASSCOMPTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCCLASSCOMPTABLEROW"                                                                          IS TABLE OF DocClassCompTableType
/

SHOW ERRORS;


--
-- DOCCLASSCOMPTABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCCLASSCOMPTABLETYPE"                                                                          IS OBJECT 		(TOT_DOC_CLASS number, 		COD_CLASS varchar(255), 		DESC_CLASS varchar(255), 		TOT_DOC_CLASS_VT float, 		PERC_DOC_CLASS_VT float, 		NUM_LIVELLO varchar(255))
/

SHOW ERRORS;


--
-- DOCCLASSTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCCLASSTABLEROW"                                                                          IS TABLE OF DocClassTableType
/

SHOW ERRORS;


--
-- DOCCLASSTABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCCLASSTABLETYPE"                                                                          IS OBJECT 		(TOT_DOC_CLASS number, 		COD_CLASS varchar(255), 		DESC_CLASS varchar(255), 		TOT_DOC_CLASS_VT float, 		PERC_DOC_CLASS_VT float)
/

SHOW ERRORS;


--
-- DOCSEDETABLE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCSEDETABLE"                                                                          IS OBJECT 		(ANNO varchar(100), 		SEDE varchar(100), 		TOT_DOC varchar(20), 		GRIGI varchar(20), 		PERC_GRIGI varchar(20), 		PROT varchar(20), 		PERC_PROT varchar(20), 		ANNULL varchar(20), 		PERC_ANNULL varchar(20), 		ARRIVO varchar(20), 		PERC_ARRIVO varchar(20), 		PARTENZA varchar(20), 		PERC_PARTENZA varchar(20), 		INTERNI varchar(20), 		PERC_INTERNI varchar(20))
/

SHOW ERRORS;


--
-- DOCSEDETABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCSEDETABLEROW"                                                                          IS TABLE OF DocSedeTable
/

SHOW ERRORS;


--
-- DOCUOTABLE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCUOTABLE"                                                                          IS OBJECT 		(UO varchar(100), 		TOT_PROT varchar(20), 		ARRIVO varchar(20), 		PERC_ARRIVO varchar(20), 		PARTENZA varchar(20), 		PERC_PARTENZA varchar(20), 		INTERNI varchar(20), 		PERC_INTERNI varchar(20), 		ANNULL varchar(20), 		PERC_ANNULL varchar(20), 		PROFILI varchar(20), 		PERC_PROFILI varchar(20), 		CLASSIFICATI varchar(20), 		PERC_CLASSIFICATI varchar(20))
/

SHOW ERRORS;


--
-- DOCUOTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."DOCUOTABLEROW"                                                                          IS TABLE OF DocUoTable
/

SHOW ERRORS;


--
-- FASCICOLITABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."FASCICOLITABLEROW"                                                                          IS TABLE OF FascicoliTableType
/

SHOW ERRORS;


--
-- FASCICOLITABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."FASCICOLITABLETYPE"                                                                          IS OBJECT 		(TOTFASC float, 		TOTFASCA number, 		TOTFASCC number, 		MESE varchar(15), 		TOTFASCM number, 		TOTFASCMA number, 		TOTFASCMC number, 		TOTPERCFASCA float, 		TOTPERCFASCC float)
/

SHOW ERRORS;


--
-- FASCICOLIVTEXTENDEDTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."FASCICOLIVTEXTENDEDTABLEROW"                                                                          IS TABLE OF FascicoliVTExtendedTableType
/

SHOW ERRORS;


--
-- FASCICOLIVTEXTENDEDTABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."FASCICOLIVTEXTENDEDTABLETYPE"                                                                          IS OBJECT 		(FASC_CREATI varchar(255), 		FASC_CHIUSI varchar(255), 		VAR_COD varchar(255), 		VAR_DESCR varchar(255), 		GENNAIO varchar(255), 		FEBBRAIO varchar(255), 		MARZO varchar(255), 		APRILE varchar(255), 		MAGGIO varchar(255), 		GIUGNO varchar(255), 		LUGLIO varchar(255), 		AGOSTO varchar(255), 		SETTEMBRE varchar(255), 		OTTOBRE varchar(255), 		NOVEMBRE varchar(255), 		DICEMBRE varchar(255), 		VT_FAC_CREATI varchar(255))
/

SHOW ERRORS;


--
-- FASCICOLIVTTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."FASCICOLIVTTABLEROW"                                                                          IS TABLE OF FascicoliVTTableType
/

SHOW ERRORS;


--
-- FASCICOLIVTTABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."FASCICOLIVTTABLETYPE"                                                                          IS OBJECT 		(FASC_CREATI varchar(255), 		FASC_CHIUSI varchar(255), 		VAR_COD varchar(255), 		VAR_DESCR varchar(255), 		GENNAIO varchar(255), 		FEBBRAIO varchar(255), 		MARZO varchar(255), 		APRILE varchar(255), 		MAGGIO varchar(255), 		GIUGNO varchar(255), 		LUGLIO varchar(255), 		AGOSTO varchar(255), 		SETTEMBRE varchar(255), 		OTTOBRE varchar(255), 		NOVEMBRE varchar(255), 		DICEMBRE varchar(255), 		VT_FAC_CREATI varchar(255) 		)
/

SHOW ERRORS;


--
-- INTEROPTABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."INTEROPTABLEROW"                                                                          IS TABLE OF InteropTableType
/

SHOW ERRORS;


--
-- INTEROPTABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."INTEROPTABLETYPE"                                                                          IS OBJECT 		(var_cod_amm varchar(100), 		var_cod_aoo varchar(100), 		gennaio varchar(20), 		febbraio varchar(20), 		marzo varchar(20), 		aprile varchar(20), 		maggio varchar(20), 		giugno varchar(20), 		luglio varchar(20), 		agosto varchar(20), 		settembre varchar(20), 		ottobre varchar(20), 		novembre varchar(20), 		dicembre varchar(20), 		tot_m_sped varchar(20), 		tot_sped varchar(20))
/

SHOW ERRORS;


--
-- NEWOBJECT  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."NEWOBJECT"                                                                                     AS OBJECT
(
  NEWATTRIB1 VARCHAR2(255)
)
/

SHOW ERRORS;


--
-- TEMPIMEDITABLEROW  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."TEMPIMEDITABLEROW"                                                                          IS TABLE OF TempiMediTableType
/

SHOW ERRORS;


--
-- TEMPIMEDITABLETYPE  (Type) 
--
CREATE OR REPLACE TYPE "@db_user"."TEMPIMEDITABLETYPE"                                                                          IS OBJECT 		(COD_CLASS varchar(255), 		DESC_CLASS varchar(255), 		T_MEDIO_LAV number)
/

SHOW ERRORS;


--
-- SEQ_DPA_TIPO_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TIPO_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_TIPO_OGGETTO_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TIPO_OGGETTO_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_OGGETTI_CUSTOM_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_OGGETTI_CUSTOM_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_ASS_VALORI_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_ASS_VALORI_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_ASS_TEMPLATES_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_ASS_TEMPLATES_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_VIS_TIPO_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_VIS_TIPO_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_CONTATORI_DOC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_CONTATORI_DOC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_CONTATORI_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_CONTATORI_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_OGG_CUSTOM_COMP  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_OGG_CUSTOM_COMP START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_OGG_CUSTOM_COMP_FASC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_OGG_CUSTOM_COMP_FASC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_INDX_SIS  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_INDX_SIS START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_ASS_INDX_SIS  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_ASS_INDX_SIS START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_LDAP_SYNC_HISTORY  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_LDAP_SYNC_HISTORY START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_CONV_PDF_SERVER  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_CONV_PDF_SERVER START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_CONSERVAZIONE  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_CONSERVAZIONE START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_SUPPORTO  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_SUPPORTO START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_ASSOCIAZIONE_TEMPLATES  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_ASSOCIAZIONE_TEMPLATES START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_ASSOCIAZIONE_VALORI  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_ASSOCIAZIONE_VALORI START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_OGGETTI_CUSTOM  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_OGGETTI_CUSTOM START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_TEMPLATES  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TEMPLATES START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_TEMPLATES_COMPONENT  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TEMPLATES_COMPONENT START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_VIS_TIPO_DOC  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_VIS_TIPO_DOC START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_TIPO_OGGETTO  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TIPO_OGGETTO START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_LISTE_DISTR  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_LISTE_DISTR START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_DIAGRAMMI_STATO  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_DIAGRAMMI_STATO START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_STATI  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_STATI START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_PASSI  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_PASSI START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_DIAGRAMMI  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_DIAGRAMMI START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_DIAGRAMMI_STO  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_DIAGRAMMI_STO START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_TRASM_DIAGR  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TRASM_DIAGR START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_ASS_DIAGRAMMI  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_ASS_DIAGRAMMI START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_MODELLI_TRASM  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_MODELLI_TRASM START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_MODELLI_MITT_DEST  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_MODELLI_MITT_DEST START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_SALVA_RICERCHE  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_SALVA_RICERCHE START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_CORR_ABILITATI  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_CORR_ABILITATI START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- SEQ_DPA_TIPO_ATTO  (Sequence) 
--
CREATE SEQUENCE "@db_user".SEQ_DPA_TIPO_ATTO START WITH 1 MAXVALUE 999999999999999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER
/


--
-- DPA_CANALI_REG  (Table) 
--
CREATE TABLE "@db_user".DPA_CANALI_REG ( SYSTEM_ID NUMBER(10), ID_CANALE NUMBER(10), ID_REGISTRO NUMBER(10), ID_DOCUMENTTYPE NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CARAT_TIMBRO  (Table) 
--
CREATE TABLE "@db_user".DPA_CARAT_TIMBRO ( SYSTEM_ID INTEGER, VAR_NOME VARCHAR2(50 BYTE), DIMENSIONE VARCHAR2(4 CHAR) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CHECKIN_CHECKOUT  (Table) 
--
CREATE TABLE "@db_user".DPA_CHECKIN_CHECKOUT ( SYSTEM_ID INTEGER NOT NULL, ID_DOCUMENT INTEGER NOT NULL, DOCUMENT_NUMBER INTEGER NOT NULL, ID_USER INTEGER NOT NULL, ID_ROLE INTEGER NOT NULL, CHECK_OUT_DATE DATE NOT NULL, DOCUMENT_LOCATION NVARCHAR2(1000), MACHINE_NAME NVARCHAR2(50) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CLIENT_MODEL_PROCESSORS  (Table) 
--
CREATE TABLE "@db_user".DPA_CLIENT_MODEL_PROCESSORS ( SYSTEM_ID INTEGER, NAME VARCHAR2(255 BYTE) NOT NULL, CLASS_ID VARCHAR2(50 BYTE) NOT NULL, SUPPORTED_EXTENSIONS VARCHAR2(100 BYTE) NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_COLL_MSPEDIZ_DOCUMENTO  (Table) 
--
CREATE TABLE "@db_user".DPA_COLL_MSPEDIZ_DOCUMENTO ( SYSTEM_ID NUMBER NOT NULL, IDAMM NUMBER NOT NULL, ID_RUOLO NUMBER, ID_UTENTE NUMBER, ID_DOCUMENTTYPES NUMBER NOT NULL, ID_PROFILE NUMBER NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_COLORE_TIMBRO  (Table) 
--
CREATE TABLE "@db_user".DPA_COLORE_TIMBRO ( SYSTEM_ID INTEGER NOT NULL, DESCRIZIONE VARCHAR2(50 CHAR), VAR_NOME VARCHAR2(50 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CONTATORI_DOC  (Table) 
--
CREATE TABLE "@db_user".DPA_CONTATORI_DOC ( SYSTEM_ID INTEGER NOT NULL, ID_OGG INTEGER, ID_TIPOLOGIA INTEGER, ID_AOO INTEGER, ID_RF INTEGER, VALORE INTEGER, ABILITATO INTEGER, ANNO INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CONTATORI_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_CONTATORI_FASC ( SYSTEM_ID INTEGER NOT NULL, ID_OGG INTEGER, ID_TIPOLOGIA INTEGER, ID_AOO INTEGER, ID_RF INTEGER, VALORE INTEGER, ABILITATO INTEGER, ANNO INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CONV_PDF_SERVER  (Table) 
--
CREATE TABLE "@db_user".DPA_CONV_PDF_SERVER ( SYSTEM_ID INTEGER NOT NULL, ID_PROFILE INTEGER, DTA_CONVERSIONE DATE ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CORR_ABILITATI  (Table) 
--
CREATE TABLE "@db_user".DPA_CORR_ABILITATI ( SYSTEM_ID NUMBER NOT NULL, ID_CORR_GLOBALE NUMBER NOT NULL, CHA_TIPO_URP VARCHAR2(1 BYTE) NOT NULL, CHA_APPLICAZIONE VARCHAR2(2 BYTE), ID_PARENT NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CORR_GLOBALI  (Table) 
--
CREATE TABLE "@db_user".DPA_CORR_GLOBALI ( SYSTEM_ID NUMBER(10), ID_REGISTRO NUMBER(10), ID_AMM NUMBER(10), VAR_COD_RUBRICA VARCHAR2(128 BYTE), VAR_DESC_CORR VARCHAR2(256 BYTE), ID_OLD NUMBER(10), DTA_INIZIO DATE, DTA_FINE DATE, ID_PARENT NUMBER(10), NUM_LIVELLO NUMBER(10), VAR_CODICE VARCHAR2(128 BYTE), ID_GRUPPO NUMBER(10), ID_TIPO_RUOLO NUMBER(10), CHA_DEFAULT_TRASM VARCHAR2(1 BYTE), ID_UO NUMBER(10), VAR_COGNOME VARCHAR2(50 BYTE), VAR_NOME VARCHAR2(50 BYTE), ID_PEOPLE NUMBER(10), CHA_TIPO_CORR VARCHAR2(1 BYTE), CHA_TIPO_IE VARCHAR2(1 BYTE), CHA_TIPO_URP VARCHAR2(1 BYTE), CHA_PA VARCHAR2(1 BYTE), VAR_CODICE_AOO VARCHAR2(16 BYTE), VAR_CODICE_AMM VARCHAR2(32 BYTE), VAR_CODICE_ISTAT VARCHAR2(32 BYTE), ID_PESO NUMBER(10), VAR_EMAIL VARCHAR2(128 BYTE), CHA_DETTAGLI VARCHAR2(1 BYTE), NUM_FIGLI NUMBER(10), VAR_SMTP VARCHAR2(128 BYTE), NUM_PORTA_SMTP NUMBER(10), VAR_FAX_USER_LOGIN VARCHAR2(8 BYTE), CHA_RIFERIMENTO VARCHAR2(1 BYTE), ID_PEOPLE_LISTE INTEGER, ID_GRUPPO_LISTE NUMBER(4), CHA_RESPONSABILE VARCHAR2(1 BYTE), ID_PESO_ORG NUMBER(10), AOO_SOSPESO VARCHAR2(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CORR_GRUPPO  (Table) 
--
CREATE TABLE "@db_user".DPA_CORR_GRUPPO ( SYSTEM_ID NUMBER(10), ID_GRUPPO NUMBER(10), ID_COMP_GRUPPO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CORR_STO  (Table) 
--
CREATE TABLE "@db_user".DPA_CORR_STO ( SYSTEM_ID NUMBER(10), ID_PROFILE NUMBER(10), ID_MITT_DEST NUMBER(10), CHA_TIPO_MITT_DES VARCHAR2(1 BYTE), DTA_MODIFICA DATE, ID_PEOPLE NUMBER(10), ID_RUOLO_IN_UO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DATI_SCARICATI  (Table) 
--
CREATE TABLE "@db_user".DPA_DATI_SCARICATI ( DTA_ULTIMO_SCARICO DATE NOT NULL, ID_ULTIMO_DOC_SCARICATO NUMBER NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_UO_REG  (Table) 
--
CREATE TABLE "@db_user".DPA_UO_REG ( SYSTEM_ID NUMBER, ID_UO NUMBER, ID_REGISTRO NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_UO_SMISTAMENTO  (Table) 
--
CREATE TABLE "@db_user".DPA_UO_SMISTAMENTO ( SYSTEM_ID NUMBER(10), ID_REGISTRO NUMBER(10), ID_UO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_USERADMIN  (Table) 
--
CREATE TABLE "@db_user".DPA_USERADMIN ( ID_CORR_GLOBALE NUMBER, CHA_ABILITATO CHAR(1 BYTE) DEFAULT 1 ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_USERADMIN_REGISTRI  (Table) 
--
CREATE TABLE "@db_user".DPA_USERADMIN_REGISTRI ( SYSTEM_ID_CORR_GLOB NUMBER NOT NULL, SYSTEM_ID_REGISTRO NUMBER NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_USERADMIN_VOCI_MENU  (Table) 
--
CREATE TABLE "@db_user".DPA_USERADMIN_VOCI_MENU ( ID_CORR_GLOBALE NUMBER, ID_VOCE_MENU NUMBER, ID_AMM NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_VIS_TIPO_DOC  (Table) 
--
CREATE TABLE "@db_user".DPA_VIS_TIPO_DOC ( SYSTEM_ID INTEGER NOT NULL, ID_TIPO_DOC INTEGER, ID_RUOLO INTEGER, DIRITTI INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_VIS_TIPO_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_VIS_TIPO_FASC ( SYSTEM_ID INTEGER NOT NULL, ID_TIPO_FASC INTEGER, ID_RUOLO INTEGER, DIRITTI INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_VOCI_MENU_ADMIN  (Table) 
--
CREATE TABLE "@db_user".DPA_VOCI_MENU_ADMIN ( SYSTEM_ID NUMBER, VAR_CODICE VARCHAR2(64 BYTE), VAR_DESCRIZIONE VARCHAR2(64 BYTE), VAR_VISIBILITA_MENU VARCHAR2(32 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- GROUPS  (Table) 
--
CREATE TABLE "@db_user".GROUPS ( SYSTEM_ID NUMBER(10), GROUP_ID VARCHAR2(32 BYTE), NETWORK_ID VARCHAR2(254 BYTE), GROUP_NAME VARCHAR2(128 BYTE), PROFILE_DEFAULTS LONG, DISABLED VARCHAR2(1 BYTE), ALLOW_LOGIN VARCHAR2(1 BYTE), UNIV_ACCESS NUMBER(10), DELETE_VERSIONS VARCHAR2(1 BYTE), EDIT_PREVIOUS_VER VARCHAR2(1 BYTE), MAX_VERSIONS NUMBER(10), MAX_SUBVERSIONS NUMBER(10), NEW_VERSIONS VARCHAR2(1 BYTE), SAVE_TO_REM_LIB VARCHAR2(1 BYTE), PRECONNECT_LIBS VARCHAR2(1 BYTE), NV_AUTHOR_EDIT VARCHAR2(1 BYTE), NV_ENTERED_BY VARCHAR2(1 BYTE), NV_BILLABLE VARCHAR2(1 BYTE), DISPLAY_VER_LIST VARCHAR2(1 BYTE), MV_DOCS_IF_CHNG VARCHAR2(1 BYTE), CHECKOUT VARCHAR2(1 BYTE), OTHER_CHECKIN VARCHAR2(1 BYTE), CHECKIN_REMINDER VARCHAR2(1 BYTE), RESET_STATUS VARCHAR2(1 BYTE), COPY_IN_USE VARCHAR2(1 BYTE), TEMPLATE_MANAGER VARCHAR2(1 BYTE), MASS_UPD_PROFILES VARCHAR2(1 BYTE), AUTO_LOGIN VARCHAR2(1 BYTE), VIEW_UNSECURED VARCHAR2(1 BYTE), PROMPT_PAGES VARCHAR2(1 BYTE), NONBILL_PAGES VARCHAR2(1 BYTE), DEFAULT_PAGES NUMBER(10), GET_EDIT_INFO VARCHAR2(1 BYTE), VISIT_AUTHOR_EDIT VARCHAR2(1 BYTE), VISIT_ENTERED_BY VARCHAR2(1 BYTE), LCP_RUN VARCHAR2(1 BYTE), EDIT_VTS VARCHAR2(1 BYTE), EDIT_LIBPARMS VARCHAR2(1 BYTE), EDIT_WS_PARAMS VARCHAR2(1 BYTE), EDIT_USER_DEFAULTS VARCHAR2(1 BYTE), MANAGE_GROUPS VARCHAR2(1 BYTE), DI_RUN VARCHAR2(1 BYTE), MBLINST_RUN VARCHAR2(1 BYTE), DI_MANAGE VARCHAR2(1 BYTE), CR_RUN VARCHAR2(1 BYTE), SM_RUN VARCHAR2(1 BYTE), DD_RUN VARCHAR2(1 BYTE), DB_EDIT VARCHAR2(1 BYTE), DBI_RUN VARCHAR2(1 BYTE), INDEXER_RUN VARCHAR2(1 BYTE), INTERCHANGE_RUN VARCHAR2(1 BYTE), PROFSEC VARCHAR2(1 BYTE), ALLOW_DOC_DELETE VARCHAR2(1 BYTE), ALLOW_CONTENT_DEL VARCHAR2(1 BYTE), ALLOW_QUEUE_DEL VARCHAR2(1 BYTE), PROFILE_FORM NUMBER(10), HITLIST_FORM NUMBER(10), ACL_DEFAULTS VARCHAR2(254 BYTE), REMOVE_MON_LIST VARCHAR2(1 BYTE), DISPLAY_MON_LIST VARCHAR2(1 BYTE), WARN_SECURE VARCHAR2(1 BYTE), ONLY_READONLY VARCHAR2(1 BYTE), FORCE_CHECKIN VARCHAR2(1 BYTE), MBL_EDITCOPY VARCHAR2(1 BYTE), MBL_OVERWRITE VARCHAR2(1 BYTE), MIN_DISKFREE NUMBER(10), AUTOCLEAN VARCHAR2(1 BYTE), DEF_SHAD_RETENTION NUMBER(10), SHADOW_DOCS VARCHAR2(1 BYTE), SHADOW_PROFILES VARCHAR2(1 BYTE), SHADOW_SEC_DOCS VARCHAR2(1 BYTE), DEFAULT_FT_INDEX NUMBER(10), DISABLE_NATIVE VARCHAR2(1 BYTE), MAKE_READ_ONLY VARCHAR2(1 BYTE), REMOVE_READ_ONLY VARCHAR2(1 BYTE), MAKE_VER_READONLY VARCHAR2(1 BYTE), MAKE_VER_WRITABLE VARCHAR2(1 BYTE), PUBLISH_VERSION VARCHAR2(1 BYTE), UNPUBLISH_VERSION VARCHAR2(1 BYTE), DATE_FORMAT VARCHAR2(10 BYTE), TIME_FORMAT VARCHAR2(10 BYTE), ITEM_MAX NUMBER(10), PAGE_MAX NUMBER(10), DEFAULT_VIEWER VARCHAR2(10 BYTE), FRONTEND_PROFILE VARCHAR2(1 BYTE), MANAGE_PRF VARCHAR2(1 BYTE), MANAGE_CYD VARCHAR2(1 BYTE), DPACKAGE NUMBER(10), ALLOW_APPINT VARCHAR2(1 BYTE), ALLOW_USRSETTINGS VARCHAR2(1 BYTE), ALLOW_DOC_CREATE VARCHAR2(1 BYTE), CREATE_FOLDER VARCHAR2(1 BYTE), ROOT_FOLDER VARCHAR2(1 BYTE), CREATE_RELATION VARCHAR2(1 BYTE), SHOW_RELATED VARCHAR2(1 BYTE), REMOVE_RELATION VARCHAR2(1 BYTE), ALLOW_NOTIF VARCHAR2(1 BYTE), ALLOW_PREVIEW VARCHAR2(1 BYTE), WARN_UPDATE_AVAIL VARCHAR2(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- NETWORK_ALIASES  (Table) 
--
CREATE TABLE "@db_user".NETWORK_ALIASES ( SYSTEM_ID NUMBER(10), NETWORK_ID VARCHAR2(240 BYTE), NETWORK_TYPE NUMBER(10), PERSONORGROUP NUMBER(10), PARENT_ORG NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- PEOPLE  (Table) 
--
CREATE TABLE "@db_user".PEOPLE ( SYSTEM_ID NUMBER(10), USER_ID VARCHAR2(32 BYTE), FULL_NAME VARCHAR2(64 BYTE), DISABLED VARCHAR2(1 BYTE), USER_PASSWORD VARCHAR2(30 BYTE), USER_LOCATION VARCHAR2(60 BYTE), PHONE VARCHAR2(40 BYTE), EXTENSION VARCHAR2(10 BYTE), LAST_LOGIN_DATE DATE, LAST_LOGIN_TIME DATE, ALLOW_LOGIN VARCHAR2(1 BYTE), FAX VARCHAR2(40 BYTE), DID VARCHAR2(10 BYTE), TARGET_DOCSRVR NUMBER(10), PRIMARY_GROUP NUMBER(10), PRIMARY_LIB NUMBER(10), PROFILE_DEFAULTS LONG, CONNECT_BRIDGED VARCHAR2(1 BYTE), BUTTON_BAR VARCHAR2(254 BYTE), NETWORK_ID VARCHAR2(254 BYTE), ACL_DEFAULTS VARCHAR2(254 BYTE), SHOW_RESTORED VARCHAR2(1 BYTE), PASS_EXP_DATE DATE, LOGINS_REMAINING NUMBER(10), PSWORD_VALID_FOR NUMBER(10), NO_EXP_DATE VARCHAR2(1 BYTE), DR_USER VARCHAR2(1 BYTE), SEARCH_FORM_ID NUMBER(10), EMAIL_ADDRESS VARCHAR2(128 BYTE), CHA_AMMINISTRATORE VARCHAR2(1 BYTE), CHA_NOTIFICA VARCHAR2(1 BYTE), VAR_TELEFONO VARCHAR2(16 BYTE), ID_AMM NUMBER(10), CHA_RESP_ASS VARCHAR2(1 BYTE), CHA_ASSEGNATARIO VARCHAR2(1 BYTE), VAR_COGNOME VARCHAR2(100 BYTE), VAR_NOME VARCHAR2(100 BYTE), CHA_NOTIFICA_CON_ALLEGATO VARCHAR2(1 BYTE), VAR_SEDE VARCHAR2(64 BYTE), ENCRYPTED_PASSWORD VARCHAR2(255 BYTE), PASSWORD_CREATION_DATE DATE, PASSWORD_NEVER_EXPIRE INTEGER, FROM_EMAIL_ADDRESS VARCHAR2(128 BYTE), LDAP_NEVER_SYNC CHAR(1 BYTE), LDAP_ID_SYNC VARCHAR2(50 BYTE), ID_CLIENT_MODEL_PROCESSOR INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- PEOPLEGROUPS  (Table) 
--
CREATE TABLE "@db_user".PEOPLEGROUPS ( GROUPS_SYSTEM_ID NUMBER(10), PEOPLE_SYSTEM_ID NUMBER(10), CHA_UTENTE_RIF VARCHAR2(1 BYTE), CHA_PREFERITO VARCHAR2(1 BYTE), DTA_FINE DATE ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- PROFILE  (Table) 
--
CREATE TABLE "@db_user".PROFILE ( SYSTEM_ID NUMBER(10), DOCNUMBER NUMBER(10), DOCNAME VARCHAR2(240 BYTE), TYPIST NUMBER(10), AUTHOR NUMBER(10), DOCUMENTTYPE NUMBER(10), LAST_EDITED_BY NUMBER(10), LAST_LOCKED_BY NUMBER(10), LAST_ACCESS_ID NUMBER(10), PROCESS_DATE DATE, CREATION_DATE DATE, CREATION_TIME DATE, LAST_EDIT_DATE DATE, LAST_EDIT_TIME DATE, LAST_ACCESS_DATE DATE, LAST_ACCESS_TIME DATE, ARCHIVE_DATE DATE, STATUS NUMBER(10), PATH VARCHAR2(128 BYTE), DOCSERVER_LOC VARCHAR2(64 BYTE), ID_REGISTRO NUMBER(10), CHA_TIPO_PROTO VARCHAR2(1 BYTE), ID_OGGETTO NUMBER(10), NUM_PROTO NUMBER(10), NUM_ANNO_PROTO NUMBER(10), VAR_PROTO_EME VARCHAR2(64 BYTE), DTA_PROTO_EME DATE, VAR_COGNOME_EME VARCHAR2(64 BYTE), VAR_NOME_EME VARCHAR2(64 BYTE), ID_PARENT NUMBER(10), DTA_PROTO DATE, CHA_MOD_OGGETTO VARCHAR2(1 BYTE), CHA_MOD_MITT_DEST VARCHAR2(1 BYTE), CHA_MOD_MITT_INT VARCHAR2(1 BYTE), CHA_MOD_DEST_OCC VARCHAR2(1 BYTE), DTA_PROTO_IN DATE, VAR_PROTO_IN VARCHAR2(128 BYTE), ID_ANNULLATORE NUMBER(10), DTA_ANNULLA DATE, VAR_AUT_ANNULLA VARCHAR2(250 BYTE), VAR_SEGNATURA VARCHAR2(250 BYTE), CHA_DA_PROTO VARCHAR2(1 BYTE), VAR_NOTE VARCHAR2(2000 BYTE), ID_TIPO_ATTO NUMBER(10), CHA_ASSEGNATO VARCHAR2(1 BYTE), CHA_IMG VARCHAR2(1 BYTE), CHA_FASCICOLATO VARCHAR2(1 BYTE), CHA_INVIO_CONFERMA VARCHAR2(1 BYTE), CHA_CONGELATO VARCHAR2(1 BYTE), CHA_CONSOLIDATO VARCHAR2(1 BYTE), CHA_PRIVATO VARCHAR2(1 BYTE), VAR_CHIAVE_PROTO VARCHAR2(64 BYTE) DEFAULT to_char(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF8') NOT NULL, VAR_NUM_OGGETTO VARCHAR2(10 BYTE), VAR_COMM_REF VARCHAR2(256 BYTE), CHA_EVIDENZA VARCHAR2(1 BYTE), APPLICATION NUMBER, VAR_SEDE VARCHAR2(64 BYTE), VAR_PROF_OGGETTO VARCHAR2(2000 BYTE), ID_PEOPLE_PROT NUMBER, ID_RUOLO_PROT NUMBER, ID_UO_PROT NUMBER, ID_UO_REF NUMBER, ID_RUOLO_CREATORE NUMBER, ID_UO_CREATORE NUMBER, CHA_INTEROP VARCHAR2(1 BYTE), DTA_SCADENZA DATE, CHA_PERSONALE VARCHAR2(1 BYTE), CHA_IN_CESTINO VARCHAR2(1 BYTE), VAR_NOTE_CESTINO VARCHAR2(256 BYTE), ID_DOCUMENTO_PRINCIPALE INTEGER, CHA_IN_ARCHIVIO VARCHAR2(1 BYTE) DEFAULT 0 ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- APPS  (Table) 
--
CREATE TABLE "@db_user".APPS ( SYSTEM_ID NUMBER(10), APPLICATION VARCHAR2(64 BYTE), DESCRIPTION VARCHAR2(256 BYTE), COUNT_KEYS VARCHAR2(1 BYTE), TIMEOUT NUMBER(10), VER_TOLERANT VARCHAR2(1 BYTE), FILING_SCHEME NUMBER(10), VALID_ON_PROFILE VARCHAR2(1 BYTE), READ_ONLY VARCHAR2(1 BYTE), DEFAULT_EXTENSION VARCHAR2(256 BYTE), OPEN_LAUNCH VARCHAR2(1 BYTE), ON_DESKTOP VARCHAR2(1 BYTE), DOS_MONITORING VARCHAR2(1 BYTE), LANGUAGE NUMBER(10), VIEWER NUMBER(10), PRINTING NUMBER(10), DISABLED VARCHAR2(1 BYTE), OUTPUT_EXTS VARCHAR2(50 BYTE), PDFCOMPAT VARCHAR2(1 BYTE), INTEGRATED VARCHAR2(1 BYTE), FILE_TYPES LONG, SUPER_APP VARCHAR2(1 BYTE), USE_UNCNAME VARCHAR2(1 BYTE), DIRMON_STUBCHECK VARCHAR2(1 BYTE), MIME_TYPE VARCHAR2(100 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- COMPONENTS  (Table) 
--
CREATE TABLE "@db_user".COMPONENTS ( PATH VARCHAR2(500 BYTE), LOCKED VARCHAR2(1 BYTE), COMPTYPE VARCHAR2(3 BYTE), VERSION_ID NUMBER(10), DOCNUMBER NUMBER(10), FILE_SIZE NUMBER(10), VAR_IMPRONTA VARCHAR2(64 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DELETED_SECURITY  (Table) 
--
CREATE TABLE "@db_user".DELETED_SECURITY ( THING NUMBER(10), PERSONORGROUP NUMBER(10), ACCESSRIGHTS NUMBER(10), ID_GRUPPO_TRASM NUMBER(10), CHA_TIPO_DIRITTO VARCHAR2(1 BYTE), NOTE VARCHAR2(512 BYTE), DTA_REVOCA DATE, ID_UTENTE_REV NUMBER(10), ID_RUOLO_REV NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DOCS_UNIQUE_KEYS  (Table) 
--
CREATE TABLE "@db_user".DOCS_UNIQUE_KEYS ( TBNAME VARCHAR2(37 BYTE), LASTKEY NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DOCUMENTTYPES  (Table) 
--
CREATE TABLE "@db_user".DOCUMENTTYPES ( SYSTEM_ID NUMBER(10), TYPE_ID VARCHAR2(32 BYTE), DESCRIPTION VARCHAR2(60 BYTE), DISABLED VARCHAR2(1 BYTE), STORAGE_TYPE VARCHAR2(1 BYTE), RETENTION_DAYS NUMBER(10), MAX_VERSIONS NUMBER(10), MAX_SUBVERSIONS NUMBER(10), FULL_TEXT VARCHAR2(1 BYTE), TARGET_DOCSRVR NUMBER(10), RET_2 NUMBER(10), RET_2_TYPE VARCHAR2(1 BYTE), KEEP_CRITERIA VARCHAR2(1 BYTE), VERSIONS_TO_KEEP NUMBER(10), CHA_TIPO_CANALE VARCHAR2(1 BYTE), DELETED CHAR(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_AMMINISTRA  (Table) 
--
CREATE TABLE "@db_user".DPA_AMMINISTRA ( SYSTEM_ID NUMBER(10) NOT NULL, VAR_CODICE_AMM VARCHAR2(16 BYTE), VAR_CODICE_ISTAT VARCHAR2(16 BYTE), VAR_DESC_AMM VARCHAR2(128 BYTE), VAR_LIBRERIA VARCHAR2(32 BYTE), CHA_SEPARATORE VARCHAR2(1 BYTE), CHA_STR_FISSA VARCHAR2(1 BYTE), CHA_STR_SEGNATURA VARCHAR2(1 BYTE), VAR_SMTP VARCHAR2(128 BYTE), NUM_PORTA_SMTP NUMBER(10), VAR_LOGIN VARCHAR2(128 BYTE), VAR_PATH VARCHAR2(128 BYTE), VAR_FORMATO_SEGNATURA VARCHAR2(255 BYTE), VAR_FORMATO_FASCICOLATURA VARCHAR2(255 BYTE), VAR_DOMINIO VARCHAR2(255 BYTE), CHA_PROTOINT CHAR(1 BYTE), VAR_USER_SMTP VARCHAR2(128 BYTE), VAR_PWD_SMTP VARCHAR2(128 BYTE), VAR_RAGIONE_REFERENTE VARCHAR2(32 BYTE), ID_RAGIONE_TO NUMBER, ID_RAGIONE_CC NUMBER, ID_RAGIONE_REFERENTE NUMBER, NUM_GG_PERM_TODOLIST NUMBER, CHA_ATTIVA_GG_PERM_TODOLIST CHAR(1 BYTE), CHA_SMTP_SSL VARCHAR2(1 BYTE), CHA_SMTP_STA VARCHAR2(1 BYTE), ENABLE_PASSWORD_EXPIRATION INTEGER, PASSWORD_EXPIRATION_DAYS INTEGER, PASSWORD_MIN_LENGTH INTEGER, PASSWORD_SPECIAL_CHAR_LIST VARCHAR2(50 BYTE), FROM_EMAIL_ADDRESS VARCHAR2(128 BYTE), ID_RAGIONE_CONOSCENZA NUMBER, ID_RAGIONE_COMPETENZA NUMBER, VAR_FORMATO_DOMINIO VARCHAR2(255 BYTE), FONTCOLOR VARCHAR2(12 BYTE), VAR_FORMATO_TIMBRO VARCHAR2(255 BYTE), ID_CARAT_DF INTEGER, ID_COLORE_DF INTEGER, ID_POS_DF INTEGER, ORIENTAMENTO VARCHAR2(30 BYTE), TIPO_ROTAZ VARCHAR2(30 BYTE), NUM_RECORD NUMBER, CHA_ARCHIVIAZIONE_LOG VARCHAR2(1 BYTE), PULS_COLOR VARCHAR2(20 BYTE), ID_CLIENT_MODEL_PROCESSOR INTEGER, CSS NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ANAGRAFICA_FUNZIONI  (Table) 
--
CREATE TABLE "@db_user".DPA_ANAGRAFICA_FUNZIONI ( COD_FUNZIONE VARCHAR2(32 BYTE), VAR_DESC_FUNZIONE VARCHAR2(1000 BYTE), CHA_TIPO_FUNZ VARCHAR2(1 BYTE), DISABLED CHAR(1 CHAR) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ANAGRAFICA_LOG  (Table) 
--
CREATE TABLE "@db_user".DPA_ANAGRAFICA_LOG ( SYSTEM_ID NUMBER, VAR_CODICE VARCHAR2(32 BYTE), VAR_DESCRIZIONE VARCHAR2(128 BYTE), VAR_OGGETTO VARCHAR2(128 BYTE), VAR_METODO VARCHAR2(64 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_AREA_CONSERVAZIONE  (Table) 
--
CREATE TABLE "@db_user".DPA_AREA_CONSERVAZIONE ( SYSTEM_ID NUMBER NOT NULL, ID_AMM NUMBER, ID_PEOPLE NUMBER, ID_RUOLO_IN_UO NUMBER, CHA_STATO CHAR(1 BYTE), VAR_TIPO_SUPPORTO NUMBER, VAR_NOTE VARCHAR2(500 BYTE), VAR_DESCRIZIONE VARCHAR2(250 BYTE), DATA_APERTURA DATE, DATA_INVIO DATE, DATA_CONSERVAZIONE DATE, VAR_MARCA_TEMPORALE VARCHAR2(3000 BYTE), VAR_FIRMA_RESPONSABILE VARCHAR2(1024 BYTE), VAR_LOCAZIONE_FISICA VARCHAR2(512 BYTE), DATA_PROX_VERIFICA DATE, DATA_ULTIMA_VERIFICA DATE, DATA_RIVERSAMENTO DATE, VAR_TIPO_CONS VARCHAR2(32 BYTE), COPIE_SUPPORTI NUMBER, VAR_NOTE_RIFIUTO VARCHAR2(256 BYTE), VAR_FORMATO_DOC VARCHAR2(10 BYTE), USER_ID VARCHAR2(32 BYTE), ID_GRUPPO NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_AREA_LAVORO  (Table) 
--
CREATE TABLE "@db_user".DPA_AREA_LAVORO ( SYSTEM_ID NUMBER(10), ID_PEOPLE NUMBER(10), ID_RUOLO_IN_UO NUMBER(10), ID_PROFILE NUMBER(10), ID_PROJECT NUMBER(10), DTA_INS DATE, CHA_TIPO_DOC VARCHAR2(1 BYTE), CHA_TIPO_FASC VARCHAR2(1 BYTE), ID_REGISTRO NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASSOCIAZIONE_TEMPLATES  (Table) 
--
CREATE TABLE "@db_user".DPA_ASSOCIAZIONE_TEMPLATES ( SYSTEM_ID NUMBER, ID_OGGETTO NUMBER, ID_TEMPLATE NUMBER, DOC_NUMBER VARCHAR2(255 BYTE), VALORE_OGGETTO_DB VARCHAR2(255 BYTE), ANNO NUMBER, ID_AOO_RF NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASSOCIAZIONE_VALORI  (Table) 
--
CREATE TABLE "@db_user".DPA_ASSOCIAZIONE_VALORI ( SYSTEM_ID NUMBER, DESCRIZIONE_VALORE VARCHAR2(255 BYTE), VALORE VARCHAR2(255 BYTE), VALORE_DI_DEFAULT VARCHAR2(255 BYTE), ID_OGGETTO_CUSTOM NUMBER, ABILITATO INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASS_DIAGRAMMI  (Table) 
--
CREATE TABLE "@db_user".DPA_ASS_DIAGRAMMI ( SYSTEM_ID INTEGER NOT NULL, ID_TIPO_DOC INTEGER, ID_DIAGRAMMA INTEGER, ID_MOD_TRASM INTEGER, TRASM_AUT INTEGER, ID_STATO INTEGER, ID_TIPO_FASC INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASS_INDX_SIS  (Table) 
--
CREATE TABLE "@db_user".DPA_ASS_INDX_SIS ( SYSTEM_ID INTEGER NOT NULL, ID_PROJECT INTEGER, ID_INDICE_SIS INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASS_TEMPLATES_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_ASS_TEMPLATES_FASC ( SYSTEM_ID INTEGER NOT NULL, ID_OGGETTO INTEGER, ID_TEMPLATE INTEGER, ID_PROJECT VARCHAR2(255 BYTE), VALORE_OGGETTO_DB VARCHAR2(255 BYTE), ANNO INTEGER, ID_AOO_RF NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASS_VALORI_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_ASS_VALORI_FASC ( SYSTEM_ID INTEGER NOT NULL, DESCRIZIONE_VALORE VARCHAR2(255 BYTE), VALORE VARCHAR2(255 BYTE), VALORE_DI_DEFAULT VARCHAR2(255 BYTE), ID_OGGETTO_CUSTOM INTEGER, ABILITATO INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_CANALI  (Table) 
--
CREATE TABLE "@db_user".DPA_CANALI ( SYSTEM_ID NUMBER(10), VAR_SERVER_SMTP VARCHAR2(64 BYTE), NUM_PORTA_SMTP NUMBER(10), VAR_SERVER_POP VARCHAR2(64 BYTE), NUM_PORTA_POP NUMBER(10), VAR_DESC_CANALE VARCHAR2(1 BYTE), ID_DOCUMENTTYPE NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ASS_RUOLO_OGG_CUSTOM  (Table) 
--
CREATE TABLE "@db_user".DPA_ASS_RUOLO_OGG_CUSTOM ( SYSTEM_ID NUMBER(10), ID_OGGETTO_CUSTOM NUMBER(10), ID_RUOLO NUMBER(10), INSERIMENTO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- PLAN_TABLE  (Table) 
--
CREATE TABLE "@db_user".PLAN_TABLE ( STATEMENT_ID VARCHAR2(30 BYTE), PLAN_ID NUMBER, TIMESTAMP DATE, REMARKS VARCHAR2(4000 BYTE), OPERATION VARCHAR2(30 BYTE), OPTIONS VARCHAR2(255 BYTE), OBJECT_NODE VARCHAR2(128 BYTE), OBJECT_OWNER VARCHAR2(30 BYTE), OBJECT_NAME VARCHAR2(30 BYTE), OBJECT_ALIAS VARCHAR2(65 BYTE), OBJECT_INSTANCE INTEGER, OBJECT_TYPE VARCHAR2(30 BYTE), OPTIMIZER VARCHAR2(255 BYTE), SEARCH_COLUMNS NUMBER, ID INTEGER, PARENT_ID INTEGER, DEPTH INTEGER, POSITION INTEGER, COST INTEGER, CARDINALITY INTEGER, BYTES INTEGER, OTHER_TAG VARCHAR2(255 BYTE), PARTITION_START VARCHAR2(255 BYTE), PARTITION_STOP VARCHAR2(255 BYTE), PARTITION_ID INTEGER, OTHER LONG, DISTRIBUTION VARCHAR2(30 BYTE), CPU_COST INTEGER, IO_COST INTEGER, TEMP_SPACE INTEGER, ACCESS_PREDICATES VARCHAR2(4000 BYTE), FILTER_PREDICATES VARCHAR2(4000 BYTE), PROJECTION VARCHAR2(4000 BYTE), TIME INTEGER, QBLOCK_NAME VARCHAR2(30 BYTE), OTHER_XML CLOB ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS LOB (OTHER_XML) STORE AS ( TABLESPACE @ora_dattblspc_name ENABLE STORAGE IN ROW CHUNK 8192 RETENTION NOCACHE INDEX ( TABLESPACE @ora_dattblspc_name) ) NOCACHE NOPARALLEL MONITORING
/


--
-- PROJECT  (Table) 
--
CREATE TABLE "@db_user".PROJECT ( SYSTEM_ID NUMBER(10), DESCRIPTION VARCHAR2(2000 BYTE), ICONIZED VARCHAR2(1 BYTE), CHA_TIPO_PROJ VARCHAR2(1 BYTE), VAR_CODICE VARCHAR2(64 BYTE), ID_AMM NUMBER(10), ID_REGISTRO NUMBER(10), NUM_LIVELLO NUMBER(10), CHA_TIPO_FASCICOLO VARCHAR2(1 BYTE), ID_FASCICOLO NUMBER(10), ID_PARENT NUMBER(10), VAR_NOTE VARCHAR2(1024 BYTE), DTA_APERTURA DATE, DTA_CHIUSURA DATE, CHA_STATO VARCHAR2(1 BYTE), VAR_COD_ULTIMO VARCHAR2(32 BYTE), VAR_COD_LIV1 VARCHAR2(32 BYTE), VAR_COD_LIV2 VARCHAR2(32 BYTE), VAR_COD_LIV3 VARCHAR2(32 BYTE), VAR_COD_LIV4 VARCHAR2(32 BYTE), VAR_COD_LIV5 VARCHAR2(32 BYTE), VAR_COD_LIV6 VARCHAR2(32 BYTE), VAR_COD_LIV7 VARCHAR2(32 BYTE), VAR_COD_LIV8 VARCHAR2(32 BYTE), ID_TIPO_PROC NUMBER(10), ID_LEGISLATURA NUMBER(10), ETDOC_RANDOM_ID NUMBER(19), DTA_CREAZIONE DATE, NUM_FASCICOLO NUMBER, ANNO_CREAZIONE NUMBER, CHA_RW VARCHAR2(1 BYTE), ID_UO_REF NUMBER, ID_UO_LF NUMBER, DTA_UO_LF DATE, NUM_MESI_CONSERVAZIONE NUMBER, VAR_CHIAVE_FASC VARCHAR2(64 BYTE) DEFAULT to_char(SYSTIMESTAMP, 'YYYYMMDDHH24MISSFF8') NOT NULL, CARTACEO INTEGER, CHA_PRIVATO VARCHAR2(1 BYTE), ID_TIPO_FASC NUMBER, CHA_BLOCCA_FASC VARCHAR2(2 BYTE), ID_TITOLARIO NUMBER, DTA_ATTIVAZIONE DATE, DTA_CESSAZIONE DATE, DTA_SCADENZA DATE, CHA_IN_ARCHIVIO VARCHAR2(1 BYTE) DEFAULT 0, AUTHOR NUMBER, ID_RUOLO_CREATORE NUMBER, ID_UO_CREATORE NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- PROJECT_COMPONENTS  (Table) 
--
CREATE TABLE "@db_user".PROJECT_COMPONENTS ( DESCRIPTION VARCHAR2(60 BYTE), LIBRARY NUMBER(10), TYPE VARCHAR2(1 BYTE), PROJECT_ID NUMBER(10), LINK NUMBER(10), COMP_ORDER NUMBER(10), VAR_CODICE_COMP VARCHAR2(250 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- REMOTE_LIBRARIES  (Table) 
--
CREATE TABLE "@db_user".REMOTE_LIBRARIES ( SYSTEM_ID NUMBER(10), LIBRARY_NAME VARCHAR2(20 BYTE), LIBRARY_DESC VARCHAR2(80 BYTE), DISABLED VARCHAR2(1 BYTE), ORACLE_MIXED_CASE NUMBER(10), OWNER VARCHAR2(80 BYTE), DATABASE_ENGINE NUMBER(10), OPERATING_SYSTEM NUMBER(10), SERVER_LOCATION VARCHAR2(128 BYTE), DATABASE_NAME VARCHAR2(18 BYTE), LIB_LOGIN_UNAME VARCHAR2(30 BYTE), SQL_PASSWORD VARCHAR2(250 BYTE), SHADOW_DOCS VARCHAR2(1 BYTE), PRESHADOW VARCHAR2(1 BYTE), DEFAULT_SEARCH VARCHAR2(1 BYTE), BRIDGED VARCHAR2(1 BYTE), LIBRARY_GROUP VARCHAR2(10 BYTE), LIB_LOGIN_SCHEME VARCHAR2(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- SECURITY  (Table) 
--
CREATE TABLE "@db_user".SECURITY ( THING NUMBER(10), PERSONORGROUP NUMBER(10), ACCESSRIGHTS NUMBER(10), ID_GRUPPO_TRASM NUMBER(10), CHA_TIPO_DIRITTO VARCHAR2(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- VERSIONS  (Table) 
--
CREATE TABLE "@db_user".VERSIONS ( VERSION_ID NUMBER(10), DOCNUMBER NUMBER(10), VERSION NUMBER(10), SUBVERSION VARCHAR2(1 BYTE), VERSION_LABEL VARCHAR2(10 BYTE), AUTHOR NUMBER(10), TYPIST NUMBER(10), LASTEDITDATE DATE, LASTEDITTIME DATE, COMMENTS VARCHAR2(200 BYTE), NUM_PAG_ALLEGATI NUMBER(10), DTA_CREAZIONE DATE, CHA_DA_INVIARE VARCHAR2(1 BYTE), DTA_ARRIVO DATE, V_NAME_FN VARCHAR2(7 BYTE), CARTACEO INTEGER, SCARTA_FASC_CARTACEA INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DETT_GLOBALI  (Table) 
--
CREATE TABLE "@db_user".DPA_DETT_GLOBALI ( SYSTEM_ID NUMBER(10), ID_CORR_GLOBALI NUMBER(10), VAR_INDIRIZZO VARCHAR2(128 BYTE), VAR_CAP VARCHAR2(5 BYTE), VAR_PROVINCIA VARCHAR2(2 BYTE), VAR_NAZIONE VARCHAR2(32 BYTE), VAR_COD_FISCALE VARCHAR2(16 BYTE), VAR_TELEFONO VARCHAR2(16 BYTE), VAR_TELEFONO2 VARCHAR2(16 BYTE), VAR_FAX VARCHAR2(16 BYTE), VAR_NOTE VARCHAR2(250 BYTE), VAR_COD_FIS VARCHAR2(128 BYTE), VAR_CITTA VARCHAR2(64 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DIAGRAMMI  (Table) 
--
CREATE TABLE "@db_user".DPA_DIAGRAMMI ( SYSTEM_ID INTEGER NOT NULL, DOC_NUMBER INTEGER, ID_STATO INTEGER, ID_DIAGRAMMA INTEGER, ID_PROJECT INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DIAGRAMMI_STATO  (Table) 
--
CREATE TABLE "@db_user".DPA_DIAGRAMMI_STATO ( SYSTEM_ID INTEGER NOT NULL, ID_AMM INTEGER, VAR_DESCRIZIONE VARCHAR2(255 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DIAGRAMMI_STO  (Table) 
--
CREATE TABLE "@db_user".DPA_DIAGRAMMI_STO ( SYSTEM_ID INTEGER NOT NULL, ID_USER VARCHAR2(255 BYTE), DOC_NUMBER INTEGER, DTA_DATE DATE, VAR_DESC_OLD_STATO VARCHAR2(255 BYTE), VAR_DESC_NEW_STATO VARCHAR2(255 BYTE), ID_PEOPLE INTEGER, ID_RUOLO INTEGER, ID_PROJECT INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DOCSPA  (Table) 
--
CREATE TABLE "@db_user".DPA_DOCSPA ( SYSTEM_ID NUMBER(10) NOT NULL, DTA_INSTALL DATE, DTA_UPDATE DATE, ID_VERSIONS_I VARCHAR2(10 BYTE), ID_VERSIONS_U VARCHAR2(10 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DOC_ARRIVO_PAR  (Table) 
--
CREATE TABLE "@db_user".DPA_DOC_ARRIVO_PAR ( SYSTEM_ID NUMBER(10), ID_MITT_DEST NUMBER(10), ID_PROFILE NUMBER(10), CHA_TIPO_MITT_DEST VARCHAR2(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_DOC_COLLEGAMENTI  (Table) 
--
CREATE TABLE "@db_user".DPA_DOC_COLLEGAMENTI ( ID_DOCUMENTO NUMBER(10), ID_DOC_COLLEGATO NUMBER(10), ID_TIPO_COLLEGAMENTO NUMBER(10), ID_ROOT NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_EL_REGISTRI  (Table) 
--
CREATE TABLE "@db_user".DPA_EL_REGISTRI ( SYSTEM_ID NUMBER(10), ID_AMM NUMBER(10), VAR_CODICE VARCHAR2(16 BYTE), VAR_DESC_REGISTRO VARCHAR2(128 BYTE), VAR_EMAIL_REGISTRO VARCHAR2(128 BYTE), VAR_USER_MAIL VARCHAR2(128 BYTE), VAR_PWD_MAIL VARCHAR2(32 BYTE), DTA_OPEN DATE, DTA_CLOSE DATE, NUM_RIF NUMBER(10), CHA_STATO VARCHAR2(1 BYTE), VAR_SERVER_SMTP VARCHAR2(64 BYTE), NUM_PORTA_SMTP NUMBER(10), DTA_ULTIMO_PROTO DATE, VAR_SERVER_POP VARCHAR2(64 BYTE), NUM_PORTA_POP NUMBER(10), CHA_AUTOMATICO CHAR(1 BYTE), VAR_USER_SMTP VARCHAR2(128 BYTE), ID_RUOLO_AOO NUMBER(10), ID_PEOPLE_AOO INTEGER, VAR_PWD_SMTP VARCHAR2(128 BYTE), CHA_SMTP_SSL VARCHAR2(1 BYTE), CHA_POP_SSL VARCHAR2(1 BYTE), CHA_SMTP_STA VARCHAR2(1 BYTE), CHA_AUTO_INTEROP CHAR(1 BYTE), CHA_RF VARCHAR2(1 BYTE), ID_AOO_COLLEGATA NUMBER(10), CHA_DISABILITATO VARCHAR2(1 BYTE), DIRITTO_RUOLO_AOO NUMBER(10), ID_RUOLO_RESP NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FASCICOLAZIONE_CARTACEA  (Table) 
--
CREATE TABLE "@db_user".DPA_FASCICOLAZIONE_CARTACEA ( SYSTEM_ID INTEGER NOT NULL, PROJECT_ID INTEGER NOT NULL, ID_DOCUMENT INTEGER NOT NULL, VERSION_ID INTEGER NOT NULL, DATA_ARCHIVIAZIONE DATE NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FIRMATARI  (Table) 
--
CREATE TABLE "@db_user".DPA_FIRMATARI ( SYSTEM_ID NUMBER(10), VAR_COGNOME VARCHAR2(50 BYTE), VAR_NOME VARCHAR2(50 BYTE), VAR_COD_FISCALE VARCHAR2(16 BYTE), VAR_TITOLARE VARCHAR2(250 BYTE), VAR_RUOLO VARCHAR2(250 BYTE), VAR_SERIE VARCHAR2(64 BYTE), VAR_EMITTENTE_C VARCHAR2(250 BYTE), VAR_EMITTENTE_O VARCHAR2(250 BYTE), VAR_EMITTENTE_OU VARCHAR2(250 BYTE), VAR_EMITTENTE_CN VARCHAR2(250 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FIRMA_VERS  (Table) 
--
CREATE TABLE "@db_user".DPA_FIRMA_VERS ( SYSTEM_ID NUMBER(10), ID_FIRMATARIO NUMBER(10), ID_VERSIONE NUMBER(10), NUM_LIVELLO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FORMATI_DOCUMENTO  (Table) 
--
CREATE TABLE "@db_user".DPA_FORMATI_DOCUMENTO ( SYSTEM_ID INTEGER NOT NULL, ID_AMMINISTRAZIONE INTEGER, FILE_TYPE_USED INTEGER NOT NULL, DESCRIPTION VARCHAR2(255 BYTE) NOT NULL, FILE_EXTENSION VARCHAR2(10 BYTE) NOT NULL, MAX_FILE_SIZE INTEGER DEFAULT 0 NOT NULL, MAX_FILE_SIZE_ALERT_MODE INTEGER DEFAULT 2 NOT NULL, CONTAINS_FILE_MODEL INTEGER DEFAULT 0 NOT NULL, DOCUMENT_TYPE INTEGER DEFAULT 0 NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FORMATTA_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_FORMATTA_FASC ( SYSTEM_ID NUMBER(10), VAR_STRINGA VARCHAR2(16 BYTE), ID_AMM NUMBER(10), CHA_VISUALIZZA VARCHAR2(1 BYTE), ID_PESO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FORMATTA_SEGN  (Table) 
--
CREATE TABLE "@db_user".DPA_FORMATTA_SEGN ( SYSTEM_ID NUMBER(10), VAR_STRINGA VARCHAR2(16 BYTE), ID_AMM NUMBER(10), CHA_VISUALIZZA VARCHAR2(1 BYTE), ID_PESO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_REGISTRO_STO  (Table) 
--
CREATE TABLE "@db_user".DPA_REGISTRO_STO ( SYSTEM_ID NUMBER(10), DTA_OPEN DATE, DTA_CLOSE DATE, NUM_RIF NUMBER(10), ID_REGISTRO NUMBER(10), ID_PEOPLE NUMBER(10), ID_RUOLO_IN_UO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_REG_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_REG_FASC ( SYSTEM_ID NUMBER(10) NOT NULL, ID_TITOLARIO NUMBER(10), ID_REGISTRO NUMBER(10), NUM_RIF NUMBER(10), CHA_AUTOMATICO CHAR(1 BYTE) DEFAULT '0' ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_REG_PROTO  (Table) 
--
CREATE TABLE "@db_user".DPA_REG_PROTO ( SYSTEM_ID NUMBER(10), NUM_RIF NUMBER(10), ID_REGISTRO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_RUOE_UTENTE  (Table) 
--
CREATE TABLE "@db_user".DPA_RUOE_UTENTE ( SYSTEM_ID NUMBER(10), ID_RUOE NUMBER(10), ID_UTENTE_EST NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_SALVA_RICERCHE  (Table) 
--
CREATE TABLE "@db_user".DPA_SALVA_RICERCHE ( SYSTEM_ID NUMBER(10), VAR_DESCRIZIONE VARCHAR2(64 BYTE) NOT NULL, ID_PEOPLE NUMBER(10), ID_GRUPPO NUMBER(10), VAR_PAGINA_RIC VARCHAR2(50 BYTE) NOT NULL, VAR_FILTRI_RIC CLOB, CHA_IN_ADL CHAR(1 CHAR) DEFAULT 0 ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS LOB (VAR_FILTRI_RIC) STORE AS ( TABLESPACE @ora_dattblspc_name ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10 NOCACHE INDEX ( TABLESPACE @ora_dattblspc_name) ) NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_SERVER_POSTA  (Table) 
--
CREATE TABLE "@db_user".DPA_SERVER_POSTA ( SYSTEM_ID NUMBER(10), VAR_SERVER_POP VARCHAR2(128 BYTE), NUM_PORTA_POP NUMBER(10), VAR_SERVER_SMTP VARCHAR2(128 BYTE), NUM_PORTA_SMTP NUMBER(10), VAR_DOMINIO VARCHAR2(128 BYTE), VAR_DESCRIZIONE VARCHAR2(64 BYTE), VAR_CODICE VARCHAR2(32 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_STAMPAREGISTRI  (Table) 
--
CREATE TABLE "@db_user".DPA_STAMPAREGISTRI ( SYSTEM_ID NUMBER(10), ID_REGISTRO NUMBER(10), NUM_PROTO_START NUMBER(10), NUM_PROTO_END NUMBER(10), NUM_ANNO NUMBER(10), NUM_ORD_FILE NUMBER(10), NUM_PAGINA_END NUMBER(10), DOCNUMBER NUMBER(10), DTA_STAMPA DATE ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_STATI  (Table) 
--
CREATE TABLE "@db_user".DPA_STATI ( SYSTEM_ID INTEGER NOT NULL, ID_DIAGRAMMA INTEGER, VAR_DESCRIZIONE VARCHAR2(255 BYTE), STATO_INIZIALE INTEGER, STATO_FINALE INTEGER, CONV_PDF INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_STATO_INVIO  (Table) 
--
CREATE TABLE "@db_user".DPA_STATO_INVIO ( SYSTEM_ID NUMBER(10), ID_CORR_GLOBALE NUMBER(10), ID_PROFILE NUMBER(10), ID_DOC_ARRIVO_PAR NUMBER(10), ID_CANALE NUMBER(10), DTA_SPEDIZIONE DATE, VAR_INDIRIZZO VARCHAR2(128 BYTE), VAR_CAP VARCHAR2(5 BYTE), VAR_CITTA VARCHAR2(64 BYTE), CHA_INTEROP VARCHAR2(1 BYTE), VAR_PROVINCIA VARCHAR2(2 BYTE), ID_DOCUMENTTYPE NUMBER(10), VAR_SERVER_SMTP VARCHAR2(64 BYTE), NUM_PORTA_SMTP NUMBER(10), VAR_CODICE_AOO VARCHAR2(16 BYTE), VAR_CODICE_AMM VARCHAR2(64 BYTE), VAR_PROTO_DEST VARCHAR2(128 BYTE), DTA_PROTO_DEST DATE, VAR_MOTIVO_ANNULLA VARCHAR2(256 BYTE), CHA_ANNULLATO VARCHAR2(1 BYTE), VAR_PROVVEDIMENTO VARCHAR2(256 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_SUPPORTO  (Table) 
--
CREATE TABLE "@db_user".DPA_SUPPORTO ( SYSTEM_ID NUMBER NOT NULL, COPIA NUMBER, DATA_PRODUZIONE DATE, VAR_COLLOCAZIONE_FISICA VARCHAR2(64 BYTE), DATA_ULTIMA_VERIFICA DATE, DATA_ELIMINAZIONE DATE, ESITO_ULTIMA_VERIFICA NUMBER, VERIFICHE_EFFETTUATE NUMBER, DATA_PROX_VERIFICA DATE, DATA_APPO_MARCA DATE, DATA_SCADENZA_MARCA DATE, VAR_MARCA_TEMPORALE VARCHAR2(3000 CHAR), ID_CONSERVAZIONE NUMBER, ID_TIPO_SUPPORTO NUMBER, CHA_STATO CHAR(1 CHAR), VAR_NOTE VARCHAR2(256 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TEMPLATES_BK  (Table) 
--
CREATE TABLE "@db_user".DPA_TEMPLATES_BK ( SYSTEM_ID NUMBER, DESCRIZIONE VARCHAR2(255 BYTE), ABILITATO_SI_NO NUMBER, IN_ESERCIZIO VARCHAR2(255 BYTE), PATH_MOD_1 VARCHAR2(255 BYTE), EXT_MOD_1 CHAR(10 BYTE), PATH_MOD_2 VARCHAR2(255 BYTE), EXT_MOD_2 CHAR(10 BYTE), ID_TIPO_ATTO INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TEMPLATES_COMPONENT_BK  (Table) 
--
CREATE TABLE "@db_user".DPA_TEMPLATES_COMPONENT_BK ( SYSTEM_ID NUMBER, ID_TEMPLATE NUMBER, TIPO_ATTO VARCHAR2(255 BYTE), ID_AMM NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TEMPL_TRASM  (Table) 
--
CREATE TABLE "@db_user".DPA_TEMPL_TRASM ( SYSTEM_ID NUMBER(10), VAR_TEMPLATE VARCHAR2(256 BYTE), ID_TRASMISSIONE NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_THEMES  (Table) 
--
CREATE TABLE "@db_user".DPA_THEMES ( SYSTEM_ID NUMBER(10) NOT NULL, THEME VARCHAR2(30 BYTE), COLOR VARCHAR2(10 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_ATTO  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_ATTO ( SYSTEM_ID NUMBER(10), VAR_DESC_ATTO VARCHAR2(64 BYTE), ID_AMM NUMBER, ABILITATO_SI_NO NUMBER, IN_ESERCIZIO VARCHAR2(255 BYTE), PATH_MOD_1 VARCHAR2(255 BYTE), EXT_MOD_1 CHAR(10 BYTE), PATH_MOD_2 VARCHAR2(255 BYTE), EXT_MOD_2 CHAR(10 BYTE), GG_SCADENZA INTEGER, GG_PRE_SCADENZA INTEGER, CHA_PRIVATO VARCHAR2(1 BYTE), IPERFASCICOLO NUMBER, PATH_ALL_1 VARCHAR2(255 BYTE), EXT_ALL_1 CHAR(10 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_FASC ( SYSTEM_ID INTEGER NOT NULL, VAR_DESC_FASC VARCHAR2(255 BYTE), ID_AMM INTEGER, ABILITATO_SI_NO INTEGER, IN_ESERCIZIO VARCHAR2(255 BYTE), PATH_MOD_1 VARCHAR2(255 BYTE), EXT_MOD_1 VARCHAR2(10 BYTE), PATH_MOD_2 VARCHAR2(255 BYTE), EXT_MOD_2 VARCHAR2(10 BYTE), GG_SCADENZA INTEGER, GG_PRE_SCADENZA INTEGER, CHA_PRIVATO VARCHAR2(1 BYTE), IPERFASCICOLO NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_FUNZIONE  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_FUNZIONE ( SYSTEM_ID NUMBER(10), VAR_COD_TIPO VARCHAR2(32 BYTE), VAR_DESC_TIPO_FUN VARCHAR2(256 BYTE), CHA_VIS CHAR(1 BYTE), ID_AMM NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_FUNZIONE_BK  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_FUNZIONE_BK ( SYSTEM_ID NUMBER(10), VAR_COD_TIPO VARCHAR2(32 BYTE), VAR_DESC_TIPO_FUN VARCHAR2(256 BYTE), CHA_VIS CHAR(1 BYTE), ID_AMM NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_F_RUOLO  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_F_RUOLO ( SYSTEM_ID NUMBER(10), ID_TIPO_FUNZ NUMBER(10), ID_RUOLO_IN_UO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FUNZIONI  (Table) 
--
CREATE TABLE "@db_user".DPA_FUNZIONI ( SYSTEM_ID NUMBER(10), ID_AMM NUMBER(10), COD_FUNZIONE VARCHAR2(32 BYTE), VAR_DESC_FUNZIONE VARCHAR2(256 BYTE), ID_PARENT NUMBER(10), CHA_TIPO_FUNZ VARCHAR2(1 BYTE), ID_PESO NUMBER(10), CHA_FLAG_PARENT VARCHAR2(1 BYTE), ID_TIPO_FUNZIONE NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_FUNZIONI_BK  (Table) 
--
CREATE TABLE "@db_user".DPA_FUNZIONI_BK ( SYSTEM_ID NUMBER(10), ID_AMM NUMBER(10), COD_FUNZIONE VARCHAR2(32 BYTE), VAR_DESC_FUNZIONE VARCHAR2(256 BYTE), ID_PARENT NUMBER(10), CHA_TIPO_FUNZ VARCHAR2(1 BYTE), ID_PESO NUMBER(10), CHA_FLAG_PARENT VARCHAR2(1 BYTE), ID_TIPO_FUNZIONE NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_INDX_SIS  (Table) 
--
CREATE TABLE "@db_user".DPA_INDX_SIS ( SYSTEM_ID INTEGER NOT NULL, ID_AMM INTEGER, VOCE_INDICE VARCHAR2(255 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_ITEMS_CONSERVAZIONE  (Table) 
--
CREATE TABLE "@db_user".DPA_ITEMS_CONSERVAZIONE ( SYSTEM_ID NUMBER NOT NULL, ID_CONSERVAZIONE NUMBER, ID_PROFILE NUMBER, ID_PROJECT NUMBER, CHA_TIPO_DOC CHAR(1 BYTE), VAR_OGGETTO VARCHAR2(64 BYTE), ID_REGISTRO NUMBER, DATA_INS DATE, CHA_STATO CHAR(1 BYTE), VAR_XML_METADATI CLOB, SIZE_ITEM NUMBER, COD_FASC VARCHAR2(64 BYTE), DOCNUMBER NUMBER, VAR_TIPO_FILE VARCHAR2(32 BYTE), NUMERO_ALLEGATI NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS LOB (VAR_XML_METADATI) STORE AS ( TABLESPACE @ora_dattblspc_name ENABLE STORAGE IN ROW CHUNK 8192 PCTVERSION 10 NOCACHE INDEX ( TABLESPACE @ora_dattblspc_name) ) NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LDAP_CONFIG  (Table) 
--
CREATE TABLE "@db_user".DPA_LDAP_CONFIG ( ID_AMM INTEGER NOT NULL, SERVER_NAME VARCHAR2(255 BYTE) NOT NULL, GROUP_DN VARCHAR2(255 BYTE) NOT NULL, USER_NAME VARCHAR2(255 BYTE), PASSWORD VARCHAR2(255 BYTE), USERID_ATTRIBUTE VARCHAR2(50 BYTE) NOT NULL, EMAIL_ATTRIBUTE VARCHAR2(255 BYTE) NOT NULL, MATRICOLA_ATTRIBUTE VARCHAR2(50 BYTE) NOT NULL, NOME_ATTRIBUTE VARCHAR2(50 BYTE) NOT NULL, COGNOME_ATTRIBUTE VARCHAR2(50 BYTE) NOT NULL, SEDE_ATTRIBUTE VARCHAR2(255 BYTE) NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LDAP_SYNC_HISTORY  (Table) 
--
CREATE TABLE "@db_user".DPA_LDAP_SYNC_HISTORY ( SYSTEM_ID INTEGER, ID_AMM INTEGER NOT NULL, USER_ID VARCHAR2(50 BYTE) NOT NULL, SYNC_DATE DATE NOT NULL, ITEMS_SYNCRONIZED INTEGER NOT NULL, ERROR_DETAILS VARCHAR2(2000 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LEGISLATURE  (Table) 
--
CREATE TABLE "@db_user".DPA_LEGISLATURE ( SYSTEM_ID NUMBER(10), VAR_COD_LEG VARCHAR2(64 BYTE), VAR_DESC_LEG VARCHAR2(256 BYTE), DTA_INIZIO DATE, DTA_FINE DATE ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LISTE_DISTR  (Table) 
--
CREATE TABLE "@db_user".DPA_LISTE_DISTR ( SYSTEM_ID INTEGER, ID_LISTA_DPA_CORR INTEGER, ID_DPA_CORR INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LOCK  (Table) 
--
CREATE TABLE "@db_user".DPA_LOCK ( NUM_STATO NUMBER(10), VAR_SEMAFORO VARCHAR2(40 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LOG  (Table) 
--
CREATE TABLE "@db_user".DPA_LOG ( SYSTEM_ID NUMBER, USERID_OPERATORE VARCHAR2(20 BYTE), ID_PEOPLE_OPERATORE NUMBER, ID_GRUPPO_OPERATORE NUMBER, ID_AMM NUMBER, DTA_AZIONE DATE, VAR_OGGETTO VARCHAR2(256 BYTE), ID_OGGETTO NUMBER, VAR_DESC_OGGETTO VARCHAR2(2000 BYTE), VAR_COD_AZIONE VARCHAR2(32 BYTE), CHA_ESITO CHAR(1 BYTE), VAR_DESC_AZIONE VARCHAR2(2000 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LOGIN  (Table) 
--
CREATE TABLE "@db_user".DPA_LOGIN ( USER_ID VARCHAR2(20 BYTE), ID_AMM NUMBER(10), IP_ADDRESS VARCHAR2(20 BYTE), DTA_CONNESSIONE DATE, DST VARCHAR2(4000 BYTE), SESSION_ID VARCHAR2(50 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LOG_ATTIVATI  (Table) 
--
CREATE TABLE "@db_user".DPA_LOG_ATTIVATI ( SYSTEM_ID_ANAGRAFICA NUMBER, ID_AMM NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_LOG_STORICO  (Table) 
--
CREATE TABLE "@db_user".DPA_LOG_STORICO ( SYSTEM_ID NUMBER(10) NOT NULL, USERID_OPERATORE VARCHAR2(20 BYTE), ID_PEOPLE_OPERATORE NUMBER(10) NOT NULL, ID_GRUPPO_OPERATORE NUMBER(10), ID_AMM NUMBER(10), DTA_AZIONE DATE NOT NULL, VAR_OGGETTO VARCHAR2(64 BYTE) NOT NULL, ID_OGGETTO NUMBER(10), VAR_DESC_OGGETTO VARCHAR2(2000 BYTE), VAR_COD_AZIONE VARCHAR2(32 BYTE) NOT NULL, VAR_DESC_AZIONE VARCHAR2(2000 BYTE) NOT NULL, CHA_ESITO VARCHAR2(1 BYTE) NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_L_AOO_UO  (Table) 
--
CREATE TABLE "@db_user".DPA_L_AOO_UO ( SYSTEM_ID NUMBER(10), ID_UO NUMBER(10), ID_REGISTRO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_L_RUOLO_REG  (Table) 
--
CREATE TABLE "@db_user".DPA_L_RUOLO_REG ( SYSTEM_ID NUMBER(10), ID_REGISTRO NUMBER(10), ID_RUOLO_IN_UO NUMBER(10), CHA_PREFERITO VARCHAR2(1 BYTE), CHA_RIFERIMENTO VARCHAR2(1 BYTE), DTA_INIZIO DATE, DTA_FINE DATE, DTA_ASS_VISIBILITA DATE ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_MAIL_ELABORATE  (Table) 
--
CREATE TABLE "@db_user".DPA_MAIL_ELABORATE ( SYSTEM_ID NUMBER(10), VAR_MESSAGE VARCHAR2(254 BYTE), CHA_RAGIONE_ELAB VARCHAR2(1 BYTE), DTA_ELAB DATE, ID_PEOPLE NUMBER(10), VAR_NOTE VARCHAR2(250 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_MODELLI_DEST_CON_NOTIFICA  (Table) 
--
CREATE TABLE "@db_user".DPA_MODELLI_DEST_CON_NOTIFICA ( SYSTEM_ID NUMBER, ID_MODELLO_MITT_DEST NUMBER NOT NULL, ID_PEOPLE NUMBER NOT NULL, ID_MODELLO NUMBER NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_MODELLI_MITT_DEST  (Table) 
--
CREATE TABLE "@db_user".DPA_MODELLI_MITT_DEST ( SYSTEM_ID NUMBER NOT NULL, ID_MODELLO NUMBER, CHA_TIPO_MITT_DEST VARCHAR2(6 BYTE), ID_CORR_GLOBALI NUMBER NOT NULL, ID_RAGIONE NUMBER, CHA_TIPO_TRASM VARCHAR2(1 BYTE), VAR_NOTE_SING VARCHAR2(250 BYTE), CHA_TIPO_URP VARCHAR2(1 BYTE), SCADENZA NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_MODELLI_TRASM  (Table) 
--
CREATE TABLE "@db_user".DPA_MODELLI_TRASM ( SYSTEM_ID NUMBER NOT NULL, ID_AMM NUMBER, NOME VARCHAR2(256 BYTE), CHA_TIPO_OGGETTO VARCHAR2(1 BYTE), ID_REGISTRO NUMBER, VAR_NOTE_GENERALI VARCHAR2(250 BYTE), ID_PEOPLE NUMBER, SINGLE VARCHAR2(1 BYTE), CHA_CEDE_DIRITTI CHAR(1 BYTE) DEFAULT 0, ID_PEOPLE_NEW_OWNER NUMBER, ID_GROUP_NEW_OWNER NUMBER, CODICE VARCHAR2(16 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_NOTE  (Table) 
--
CREATE TABLE "@db_user".DPA_NOTE ( SYSTEM_ID INTEGER NOT NULL, TESTO NVARCHAR2(2000), DATACREAZIONE DATE NOT NULL, IDUTENTECREATORE INTEGER NOT NULL, IDRUOLOCREATORE INTEGER NOT NULL, TIPOVISIBILITA CHAR(1 BYTE) NOT NULL, TIPOOGGETTOASSOCIATO CHAR(1 CHAR) NOT NULL, IDOGGETTOASSOCIATO INTEGER NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_OGGETTARIO  (Table) 
--
CREATE TABLE "@db_user".DPA_OGGETTARIO ( SYSTEM_ID NUMBER(10), ID_REGISTRO NUMBER(10), ID_AMM NUMBER(10), VAR_DESC_OGGETTO VARCHAR2(2000 BYTE), CHA_OCCASIONALE VARCHAR2(1 BYTE), VAR_COD_OGGETTO VARCHAR2(50 CHAR) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_OGGETTI_CUSTOM  (Table) 
--
CREATE TABLE "@db_user".DPA_OGGETTI_CUSTOM ( SYSTEM_ID NUMBER, DESCRIZIONE VARCHAR2(255 BYTE), ORIZZONTALE_VERTICALE VARCHAR2(255 BYTE), CAMPO_OBBLIGATORIO VARCHAR2(255 BYTE), MULTILINEA VARCHAR2(255 BYTE), NUMERO_DI_LINEE VARCHAR2(255 BYTE), NUMERO_DI_CARATTERI VARCHAR2(255 BYTE), CAMPO_DI_RICERCA VARCHAR2(255 BYTE), ID_TIPO_OGGETTO NUMBER, RESET_ANNO VARCHAR2(2 BYTE), FORMATO_CONTATORE VARCHAR2(100 BYTE), ID_R_DEFAULT VARCHAR2(50 BYTE), RICERCA_CORR VARCHAR2(50 BYTE), CHA_TIPO_TAR VARCHAR2(2 BYTE), CONTA_DOPO NUMBER, REPERTORIO NUMBER, CAMPO_COMUNE NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_OGGETTI_CUSTOM_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_OGGETTI_CUSTOM_FASC ( SYSTEM_ID INTEGER NOT NULL, DESCRIZIONE VARCHAR2(255 BYTE), ORIZZONTALE_VERTICALE VARCHAR2(255 BYTE), CAMPO_OBBLIGATORIO VARCHAR2(255 BYTE), MULTILINEA VARCHAR2(255 BYTE), NUMERO_DI_LINEE VARCHAR2(255 BYTE), NUMERO_DI_CARATTERI VARCHAR2(255 BYTE), CAMPO_DI_RICERCA VARCHAR2(255 BYTE), ID_TIPO_OGGETTO INTEGER, RESET_ANNO VARCHAR2(100 BYTE), FORMATO_CONTATORE VARCHAR2(100 BYTE), ID_R_DEFAULT VARCHAR2(50 BYTE), RICERCA_CORR VARCHAR2(50 BYTE), CHA_TIPO_TAR VARCHAR2(2 BYTE), CONTA_DOPO NUMBER, REPERTORIO NUMBER, CAMPO_COMUNE NUMBER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_OGGETTI_STO  (Table) 
--
CREATE TABLE "@db_user".DPA_OGGETTI_STO ( SYSTEM_ID NUMBER(10), DTA_MODIFICA DATE, ID_PROFILE NUMBER(10), ID_OGGETTO NUMBER(10), ID_PEOPLE NUMBER(10), ID_RUOLO_IN_UO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_OGG_CUSTOM_COMP  (Table) 
--
CREATE TABLE "@db_user".DPA_OGG_CUSTOM_COMP ( SYSTEM_ID INTEGER NOT NULL, ID_TEMPLATE INTEGER, ID_OGG_CUSTOM INTEGER, POSIZIONE INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_OGG_CUSTOM_COMP_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_OGG_CUSTOM_COMP_FASC ( SYSTEM_ID INTEGER NOT NULL, ID_TEMPLATE INTEGER, ID_OGG_CUSTOM INTEGER, POSIZIONE INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_PAROLE  (Table) 
--
CREATE TABLE "@db_user".DPA_PAROLE ( SYSTEM_ID NUMBER(10), ID_AMM NUMBER(10), VAR_DESC_PAROLA VARCHAR2(128 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_PASSI  (Table) 
--
CREATE TABLE "@db_user".DPA_PASSI ( SYSTEM_ID INTEGER NOT NULL, ID_STATO INTEGER, ID_NEXT_STATO INTEGER, ID_DIAGRAMMA INTEGER, ID_STATO_AUTO INTEGER, DESC_STATO_AUTO VARCHAR2(255 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_POSIZ_TIMBRO  (Table) 
--
CREATE TABLE "@db_user".DPA_POSIZ_TIMBRO ( SYSTEM_ID INTEGER NOT NULL, TIPO_POS VARCHAR2(10 BYTE), POS_X VARCHAR2(50 BYTE), POS_Y VARCHAR2(50 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_PROF_PAROLE  (Table) 
--
CREATE TABLE "@db_user".DPA_PROF_PAROLE ( SYSTEM_ID NUMBER(10), ID_PROFILE NUMBER(10), ID_PAROLA NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_PR_DOCXSEDE  (Table) 
--
CREATE TABLE "@db_user".DPA_PR_DOCXSEDE ( ID_PEOPLE NUMBER NOT NULL, TS_STAMPA DATE NOT NULL, ANNO VARCHAR2(100 BYTE), SEDE VARCHAR2(100 BYTE), TOT_DOC NUMBER DEFAULT 0, GRIGI NUMBER DEFAULT 0, PROT NUMBER DEFAULT 0, ANNULL NUMBER DEFAULT 0, ARRIVO NUMBER DEFAULT 0, PARTENZA NUMBER DEFAULT 0, INTERNI NUMBER DEFAULT 0 ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_RAGIONE_TRASM  (Table) 
--
CREATE TABLE "@db_user".DPA_RAGIONE_TRASM ( SYSTEM_ID NUMBER(10), VAR_DESC_RAGIONE VARCHAR2(32 BYTE), CHA_TIPO_RAGIONE VARCHAR2(1 BYTE), CHA_VIS VARCHAR2(1 BYTE), CHA_TIPO_DIRITTI VARCHAR2(1 BYTE), CHA_TIPO_DEST VARCHAR2(1 BYTE), CHA_RISPOSTA VARCHAR2(1 BYTE), VAR_NOTE VARCHAR2(250 BYTE), CHA_EREDITA VARCHAR2(1 BYTE), ID_AMM NUMBER(10), CHA_TIPO_RISPOSTA VARCHAR2(1 BYTE), VAR_NOTIFICA_TRASM VARCHAR2(2 BYTE), VAR_TESTO_MSG_NOTIFICA_DOC VARCHAR2(1024 BYTE), VAR_TESTO_MSG_NOTIFICA_FASC VARCHAR2(1024 BYTE), CHA_CEDE_DIRITTI CHAR(1 BYTE), CHA_RAG_SISTEMA CHAR(1 CHAR) DEFAULT 0 NOT NULL ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_F_RUOLO_BK  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_F_RUOLO_BK ( SYSTEM_ID NUMBER(10), ID_TIPO_FUNZ NUMBER(10), ID_RUOLO_IN_UO NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_OGGETTO  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_OGGETTO ( SYSTEM_ID NUMBER, TIPO VARCHAR2(255 BYTE), DESCRIZIONE VARCHAR2(255 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_OGGETTO_FASC  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_OGGETTO_FASC ( SYSTEM_ID INTEGER NOT NULL, TIPO VARCHAR2(255 BYTE), DESCRIZIONE VARCHAR2(255 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_RUOLO  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_RUOLO ( SYSTEM_ID NUMBER(10), ID_AMM NUMBER(10), ID_PARENT NUMBER(10), VAR_CODICE VARCHAR2(16 BYTE), NUM_LIVELLO NUMBER(10), VAR_DESC_RUOLO VARCHAR2(64 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TIPO_SUPPORTO  (Table) 
--
CREATE TABLE "@db_user".DPA_TIPO_SUPPORTO ( SYSTEM_ID NUMBER NOT NULL, VAR_TIPO VARCHAR2(32 BYTE), CAPACITA FLOAT(126), PERIODO_VERIFICA NUMBER, VAR_DESCRIZIONE VARCHAR2(32 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TODOLIST  (Table) 
--
CREATE TABLE "@db_user".DPA_TODOLIST ( ID_TRASMISSIONE NUMBER(10) NOT NULL, ID_TRASM_SINGOLA NUMBER(10) NOT NULL, ID_TRASM_UTENTE NUMBER(10) NOT NULL, DTA_INVIO DATE NOT NULL, ID_PEOPLE_MITT NUMBER(10) NOT NULL, ID_RUOLO_MITT NUMBER(10) NOT NULL, ID_PEOPLE_DEST NUMBER(10) NOT NULL, ID_RAGIONE_TRASM NUMBER(10) NOT NULL, VAR_NOTE_GEN VARCHAR2(250 BYTE), VAR_NOTE_SING VARCHAR2(250 BYTE), DTA_SCADENZA DATE, ID_PROFILE NUMBER(10), ID_PROJECT NUMBER(10), ID_RUOLO_DEST NUMBER(10), ID_REGISTRO NUMBER(10), CHA_TIPO_TRASM CHAR(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TRASMISSIONE  (Table) 
--
CREATE TABLE "@db_user".DPA_TRASMISSIONE ( SYSTEM_ID NUMBER(10), ID_RUOLO_IN_UO NUMBER(10), ID_PEOPLE NUMBER(10), CHA_TIPO_OGGETTO VARCHAR2(1 BYTE), ID_PROFILE NUMBER(10), ID_PROJECT NUMBER(10), DTA_INVIO DATE, VAR_NOTE_GENERALI VARCHAR2(250 BYTE), CHA_CESSIONE CHAR(1 BYTE), CHA_SALVATA_CON_CESSIONE CHAR(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TRASM_DIAGR  (Table) 
--
CREATE TABLE "@db_user".DPA_TRASM_DIAGR ( SYSTEM_ID INTEGER NOT NULL, ID_TRASM INTEGER, DOC_NUMBER INTEGER, ID_STATO INTEGER, ID_PROJECT INTEGER ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TRASM_SINGOLA  (Table) 
--
CREATE TABLE "@db_user".DPA_TRASM_SINGOLA ( SYSTEM_ID NUMBER(10), ID_RAGIONE NUMBER(10), ID_TRASMISSIONE NUMBER(10), CHA_TIPO_DEST VARCHAR2(1 BYTE), ID_CORR_GLOBALE NUMBER(10), VAR_NOTE_SING VARCHAR2(250 BYTE), CHA_TIPO_TRASM VARCHAR2(1 BYTE), DTA_SCADENZA DATE, ID_TRASM_UTENTE NUMBER(10) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_TRASM_UTENTE  (Table) 
--
CREATE TABLE "@db_user".DPA_TRASM_UTENTE ( SYSTEM_ID NUMBER(10), ID_TRASM_SINGOLA NUMBER(10), ID_PEOPLE NUMBER(10), DTA_VISTA DATE, DTA_ACCETTATA DATE, DTA_RIFIUTATA DATE, DTA_RISPOSTA DATE, CHA_VISTA VARCHAR2(1 BYTE), CHA_ACCETTATA VARCHAR2(1 BYTE), CHA_RIFIUTATA VARCHAR2(1 BYTE), VAR_NOTE_ACC VARCHAR2(250 BYTE), VAR_NOTE_RIF VARCHAR2(250 BYTE), CHA_VALIDA VARCHAR2(1 BYTE), ID_TRASM_RISP_SING NUMBER(10), CHA_IN_TODOLIST CHAR(1 BYTE) DEFAULT '1', DTA_RIMOZIONE_TODOLIST DATE ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- DPA_T_CANALE_CORR  (Table) 
--
CREATE TABLE "@db_user".DPA_T_CANALE_CORR ( SYSTEM_ID NUMBER(10), ID_CORR_GLOBALE NUMBER(10), ID_DOCUMENTTYPE NUMBER(10), CHA_PREFERITO VARCHAR2(1 BYTE) ) TABLESPACE @ora_dattblspc_name LOGGING NOCOMPRESS NOCACHE NOPARALLEL MONITORING
/


--
-- INDX_ITEMS_CONS_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_ITEMS_CONS_PK ON "@db_user".DPA_ITEMS_CONSERVAZIONE (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- IX_DPA_LDAP_CONFIG_ID_AMM  (Index) 
--
CREATE UNIQUE INDEX "@db_user".IX_DPA_LDAP_CONFIG_ID_AMM ON "@db_user".DPA_LDAP_CONFIG (ID_AMM) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DPA_LDAP_SYNC_HISTORY_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DPA_LDAP_SYNC_HISTORY_PK ON "@db_user".DPA_LDAP_SYNC_HISTORY (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_RUOLOREG1  (Index) 
--
CREATE INDEX "@db_user".INDX_RUOLOREG1 ON "@db_user".DPA_L_RUOLO_REG (ID_RUOLO_IN_UO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_RUOLOREG2  (Index) 
--
CREATE INDEX "@db_user".INDX_RUOLOREG2 ON "@db_user".DPA_L_RUOLO_REG (ID_RUOLO_IN_UO, ID_REGISTRO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_MAILELAB1  (Index) 
--
CREATE INDEX "@db_user".INDX_MAILELAB1 ON "@db_user".DPA_MAIL_ELABORATE (ID_PEOPLE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DPA_MODELLI_DEST_CON_NOTIFI_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DPA_MODELLI_DEST_CON_NOTIFI_PK ON "@db_user".DPA_MODELLI_DEST_CON_NOTIFICA (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_OGG  (Index) 
--
CREATE INDEX "@db_user".INDX_ID_OGG ON "@db_user".DPA_NOTE (IDOGGETTOASSOCIATO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_RUOLO  (Index) 
--
CREATE INDEX "@db_user".INDX_ID_RUOLO ON "@db_user".DPA_NOTE (IDRUOLOCREATORE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TESTO_NOTE  (Index) 
--
CREATE INDEX "@db_user".INDX_TESTO_NOTE ON "@db_user".DPA_NOTE (TESTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_UTENTE  (Index) 
--
CREATE INDEX "@db_user".INDX_ID_UTENTE ON "@db_user".DPA_NOTE (IDUTENTECREATORE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- IDX_DPA_OGGETTARIO  (Index) 
--
CREATE INDEX "@db_user".IDX_DPA_OGGETTARIO ON "@db_user".DPA_OGGETTARIO (VAR_DESC_OGGETTO, ID_REGISTRO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_OGG2  (Index) 
--
CREATE INDEX "@db_user".INDX_OGG2 ON "@db_user".DPA_OGGETTARIO (CHA_OCCASIONALE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_OGGETTI_CUSTOM  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_OGGETTI_CUSTOM ON "@db_user".DPA_OGGETTI_CUSTOM (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_OGGETTI_CUSTOM_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_OGGETTI_CUSTOM_FASC ON "@db_user".DPA_OGGETTI_CUSTOM_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_OGG_CUSTOM_COMP  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_OGG_CUSTOM_COMP ON "@db_user".DPA_OGG_CUSTOM_COMP (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_OGG_CUSTOM_COMP_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_OGG_CUSTOM_COMP_FASC ON "@db_user".DPA_OGG_CUSTOM_COMP_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_PASSI  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_PASSI ON "@db_user".DPA_PASSI (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DPA_POSIZ_TIMBRO  (Index) 
--
CREATE INDEX "@db_user".INDX_DPA_POSIZ_TIMBRO ON "@db_user".DPA_POSIZ_TIMBRO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROF_PAROLE1  (Index) 
--
CREATE INDEX "@db_user".INDX_PROF_PAROLE1 ON "@db_user".DPA_PROF_PAROLE (ID_PAROLA) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_PEOPLE  (Index) 
--
CREATE INDEX "@db_user".INDX_ID_PEOPLE ON "@db_user".DPA_PR_DOCXSEDE (ID_PEOPLE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TS_STAMPA  (Index) 
--
CREATE INDEX "@db_user".INDX_TS_STAMPA ON "@db_user".DPA_PR_DOCXSEDE (TS_STAMPA) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_SALVA_RICERCHE  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_SALVA_RICERCHE ON "@db_user".DPA_SALVA_RICERCHE (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- U_SALVARIC_NOME  (Index) 
--
CREATE UNIQUE INDEX "@db_user".U_SALVARIC_NOME ON "@db_user".DPA_SALVA_RICERCHE (VAR_DESCRIZIONE, ID_PEOPLE, ID_GRUPPO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_STAMPA1  (Index) 
--
CREATE INDEX "@db_user".INDX_STAMPA1 ON "@db_user".DPA_STAMPAREGISTRI (DOCNUMBER) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_STATI  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_STATI ON "@db_user".DPA_STATI (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DPA_SUPPORTO_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DPA_SUPPORTO_PK ON "@db_user".DPA_SUPPORTO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_ASSOCIAZIONE_VALORI  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_ASSOCIAZIONE_VALORI ON "@db_user".DPA_ASSOCIAZIONE_VALORI (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_TIPODOC_DS_TEMPL  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_TIPODOC_DS_TEMPL ON "@db_user".DPA_ASS_DIAGRAMMI (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_ASS_INDX_SIS  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_ASS_INDX_SIS ON "@db_user".DPA_ASS_INDX_SIS (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_ASS_TEMPLATES_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_ASS_TEMPLATES_FASC ON "@db_user".DPA_ASS_TEMPLATES_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_ASS_VALORI_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_ASS_VALORI_FASC ON "@db_user".DPA_ASS_VALORI_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DPA_CARAT_TIMBRO  (Index) 
--
CREATE INDEX "@db_user".INDX_DPA_CARAT_TIMBRO ON "@db_user".DPA_CARAT_TIMBRO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_CHECKIN_CHECKOUT  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_CHECKIN_CHECKOUT ON "@db_user".DPA_CHECKIN_CHECKOUT (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DPA_CLIENT_MODEL_PROCESSORS_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DPA_CLIENT_MODEL_PROCESSORS_PK ON "@db_user".DPA_CLIENT_MODEL_PROCESSORS (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DPA_COLORE_TIMBRO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_DPA_COLORE_TIMBRO ON "@db_user".DPA_COLORE_TIMBRO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_CONV_PDF_SERVER  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_CONV_PDF_SERVER ON "@db_user".DPA_CONV_PDF_SERVER (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DPA_CORR_ABILITATI_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DPA_CORR_ABILITATI_PK ON "@db_user".DPA_CORR_ABILITATI (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CHA_APPLICAZIONE  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_CHA_APPLICAZIONE ON "@db_user".DPA_CORR_ABILITATI (CHA_APPLICAZIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_CORR_GLOBALE  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_ID_CORR_GLOBALE ON "@db_user".DPA_CORR_ABILITATI (ID_CORR_GLOBALE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_PARENT  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_ID_PARENT ON "@db_user".DPA_CORR_ABILITATI (ID_PARENT) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORRGLOB3  (Index) 
--
CREATE INDEX "@db_user".INDX_CORRGLOB3 ON "@db_user".DPA_CORR_GLOBALI (ID_GRUPPO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORRGLOB5  (Index) 
--
CREATE INDEX "@db_user".INDX_CORRGLOB5 ON "@db_user".DPA_CORR_GLOBALI (ID_PARENT, ID_UO, CHA_TIPO_URP) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORRGLOB6  (Index) 
--
CREATE INDEX "@db_user".INDX_CORRGLOB6 ON "@db_user".DPA_CORR_GLOBALI (ID_PEOPLE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORRGLOB8  (Index) 
--
CREATE INDEX "@db_user".INDX_CORRGLOB8 ON "@db_user".DPA_CORR_GLOBALI (VAR_CODICE, CHA_TIPO_URP) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORRGLOB9  (Index) 
--
CREATE INDEX "@db_user".INDX_CORRGLOB9 ON "@db_user".DPA_CORR_GLOBALI (VAR_CODICE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORR_GLOB_TIPO_CORR  (Index) 
--
CREATE INDEX "@db_user".INDX_CORR_GLOB_TIPO_CORR ON "@db_user".DPA_CORR_GLOBALI (CHA_TIPO_CORR) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORR_GLOB_TIPO_IE  (Index) 
--
CREATE INDEX "@db_user".INDX_CORR_GLOB_TIPO_IE ON "@db_user".DPA_CORR_GLOBALI (CHA_TIPO_IE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORR_TIPOURP  (Index) 
--
CREATE INDEX "@db_user".INDX_CORR_TIPOURP ON "@db_user".DPA_CORR_GLOBALI (CHA_TIPO_URP) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DTA_ULTIMO_SCARICO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_DTA_ULTIMO_SCARICO ON "@db_user".DPA_DATI_SCARICATI (DTA_ULTIMO_SCARICO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ID_ULTIMO_DOC_SCARICATO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_ID_ULTIMO_DOC_SCARICATO ON "@db_user".DPA_DATI_SCARICATI (ID_ULTIMO_DOC_SCARICATO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DETTGLOB2  (Index) 
--
CREATE INDEX "@db_user".INDX_DETTGLOB2 ON "@db_user".DPA_DETT_GLOBALI (ID_CORR_GLOBALI) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_DIAGRAMMI_DOC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_DIAGRAMMI_DOC ON "@db_user".DPA_DIAGRAMMI (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_DIAGRAMMI_STATO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_DIAGRAMMI_STATO ON "@db_user".DPA_DIAGRAMMI_STATO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_DIAGRAMMI_STO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_DIAGRAMMI_STO ON "@db_user".DPA_DIAGRAMMI_STO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- IDX_DPA_DOC_ARRIVO_PAR  (Index) 
--
CREATE INDEX "@db_user".IDX_DPA_DOC_ARRIVO_PAR ON "@db_user".DPA_DOC_ARRIVO_PAR (ID_MITT_DEST, ID_PROFILE, CHA_TIPO_MITT_DEST) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DOCARRPAR  (Index) 
--
CREATE INDEX "@db_user".INDX_DOCARRPAR ON "@db_user".DPA_DOC_ARRIVO_PAR (ID_MITT_DEST) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DOCARRPAR2  (Index) 
--
CREATE INDEX "@db_user".INDX_DOCARRPAR2 ON "@db_user".DPA_DOC_ARRIVO_PAR (ID_PROFILE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DOCARRPAR3  (Index) 
--
CREATE INDEX "@db_user".INDX_DOCARRPAR3 ON "@db_user".DPA_DOC_ARRIVO_PAR (ID_PROFILE, ID_MITT_DEST) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_FASC_CARTACEA_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_FASC_CARTACEA_PK ON "@db_user".DPA_FASCICOLAZIONE_CARTACEA (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_FASC_CARTACEA_PROJ_ID  (Index) 
--
CREATE INDEX "@db_user".INDX_FASC_CARTACEA_PROJ_ID ON "@db_user".DPA_FASCICOLAZIONE_CARTACEA (PROJECT_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_FASC_CARTACEA_ID_DOC  (Index) 
--
CREATE INDEX "@db_user".INDX_FASC_CARTACEA_ID_DOC ON "@db_user".DPA_FASCICOLAZIONE_CARTACEA (ID_DOCUMENT) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_FASC_CARTACEA_VERS_ID  (Index) 
--
CREATE INDEX "@db_user".INDX_FASC_CARTACEA_VERS_ID ON "@db_user".DPA_FASCICOLAZIONE_CARTACEA (VERSION_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_FASC_CARTACEA_PROJ_VERS  (Index) 
--
CREATE INDEX "@db_user".INDX_FASC_CARTACEA_PROJ_VERS ON "@db_user".DPA_FASCICOLAZIONE_CARTACEA (PROJECT_ID, VERSION_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_FORMATI_DOCUMENTO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_FORMATI_DOCUMENTO ON "@db_user".DPA_FORMATI_DOCUMENTO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_FUNZ1  (Index) 
--
CREATE INDEX "@db_user".INDX_FUNZ1 ON "@db_user".DPA_FUNZIONI (ID_TIPO_FUNZIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_COD_FUNZ  (Index) 
--
CREATE INDEX "@db_user".INDX_COD_FUNZ ON "@db_user".DPA_FUNZIONI (COD_FUNZIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_INDX_SIS  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_INDX_SIS ON "@db_user".DPA_INDX_SIS (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJECTCOMP2  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJECTCOMP2 ON "@db_user".PROJECT_COMPONENTS (PROJECT_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_SEC5  (Index) 
--
CREATE INDEX "@db_user".INDX_SEC5 ON "@db_user".SECURITY (THING) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_SEC6  (Index) 
--
CREATE INDEX "@db_user".INDX_SEC6 ON "@db_user".SECURITY (PERSONORGROUP) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_SEC_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_SEC_PK ON "@db_user".SECURITY (THING, PERSONORGROUP, ACCESSRIGHTS) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_VERSIONS1  (Index) 
--
CREATE INDEX "@db_user".INDX_VERSIONS1 ON "@db_user".VERSIONS (DOCNUMBER) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_VERSIONS3  (Index) 
--
CREATE INDEX "@db_user".INDX_VERSIONS3 ON "@db_user".VERSIONS (TYPIST) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_VERSIONS2  (Index) 
--
CREATE INDEX "@db_user".INDX_VERSIONS2 ON "@db_user".VERSIONS (VERSION_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- APPSCU  (Index) 
--
CREATE UNIQUE INDEX "@db_user".APPSCU ON "@db_user".APPS (UPPER("APPLICATION")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DOCTYPESCU  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DOCTYPESCU ON "@db_user".DOCUMENTTYPES (UPPER("TYPE_ID")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- GROUPSCU  (Index) 
--
CREATE UNIQUE INDEX "@db_user".GROUPSCU ON "@db_user".GROUPS (UPPER("GROUP_ID")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- IDX_PEOPLE  (Index) 
--
CREATE INDEX "@db_user".IDX_PEOPLE ON "@db_user".PEOPLE (UPPER("FULL_NAME")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CORRGLOB1  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_CORRGLOB1 ON "@db_user".DPA_CORR_GLOBALI ("SYSTEM_ID" DESC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE10  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE10 ON "@db_user".PROFILE ("NUM_ANNO_PROTO" DESC, 'NUM_PROTO' DESC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE3  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE3 ON "@db_user".PROFILE ("NUM_PROTO" DESC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE4  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE4 ON "@db_user".PROFILE ("NUM_ANNO_PROTO" DESC, CHA_DA_PROTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE40  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE40 ON "@db_user".PROFILE (TO_NUMBER(TO_CHAR("DTA_PROTO",'MM')), 'NUM_ANNO_PROTO' DESC, CHA_TIPO_PROTO, CHA_DA_PROTO) NOLOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE41  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE41 ON "@db_user".PROFILE ("NUM_ANNO_PROTO" DESC, CHA_DA_PROTO, VAR_SEDE, CHA_TIPO_PROTO) NOLOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ40  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ40 ON "@db_user".PROJECT (TO_NUMBER(TO_CHAR("DTA_CREAZIONE",'YYYY')), CHA_TIPO_PROJ) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ41  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ41 ON "@db_user".PROJECT (TO_NUMBER(TO_CHAR("DTA_CHIUSURA",'YYYY')), CHA_TIPO_PROJ, CHA_STATO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASM5  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASM5 ON "@db_user".DPA_TRASMISSIONE ("DTA_INVIO" DESC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_DESCRIPTION  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_DESCRIPTION ON "@db_user".PROJECT (UPPER("DESCRIPTION")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_VAR_CODICE  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_VAR_CODICE ON "@db_user".DPA_CORR_GLOBALI (UPPER("VAR_CODICE")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_VAR_COD_RUBRICA  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_VAR_COD_RUBRICA ON "@db_user".DPA_CORR_GLOBALI (UPPER("VAR_COD_RUBRICA")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_VAR_DESC_CORR  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_VAR_DESC_CORR ON "@db_user".DPA_CORR_GLOBALI (UPPER("VAR_DESC_CORR")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_VAR_DESC_OGGETTO  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_VAR_DESC_OGGETTO ON "@db_user".DPA_OGGETTARIO (UPPER("VAR_DESC_OGGETTO")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_VAR_PROF_OGGETTO  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_VAR_PROF_OGGETTO ON "@db_user".PROFILE (UPPER("VAR_PROF_OGGETTO")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PROFILENAMEU  (Index) 
--
CREATE INDEX "@db_user".PROFILENAMEU ON "@db_user".PROFILE (UPPER("DOCNAME")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- REMOTE_LIBSCU  (Index) 
--
CREATE UNIQUE INDEX "@db_user".REMOTE_LIBSCU ON "@db_user".REMOTE_LIBRARIES (UPPER("LIBRARY_NAME")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ18  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ18 ON "@db_user".PROJECT (UPPER(TO_CHAR("SYSTEM_ID"))) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE_NVL_CEST  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE_NVL_CEST ON "@db_user".PROFILE (NVL("CHA_IN_CESTINO",'0')) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_TESTO_NOTE  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_TESTO_NOTE ON "@db_user".DPA_NOTE (UPPER("TESTO")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_UPPER_VAR_PROF_OGG_ID_REG  (Index) 
--
CREATE INDEX "@db_user".INDX_UPPER_VAR_PROF_OGG_ID_REG ON "@db_user".PROFILE (ID_REGISTRO, UPPER("VAR_PROF_OGGETTO")) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_ASS_RUOLO_OGG_CUSTOM  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_ASS_RUOLO_OGG_CUSTOM ON "@db_user".DPA_ASS_RUOLO_OGG_CUSTOM (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DPA_ASS_RUOLO_OGG_CUSTOM  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_DPA_ASS_RUOLO_OGG_CUSTOM ON "@db_user".DPA_ASS_RUOLO_OGG_CUSTOM (ID_OGGETTO_CUSTOM, ID_RUOLO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE_DATA  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE_DATA ON "@db_user".PROFILE (NVL("DTA_PROTO","CREATION_TIME") DESC, NVL("ID_REGISTRO",0)) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_TIPO_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_TIPO_FASC ON "@db_user".DPA_TIPO_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TIPOFUNRUOLO1  (Index) 
--
CREATE INDEX "@db_user".INDX_TIPOFUNRUOLO1 ON "@db_user".DPA_TIPO_F_RUOLO (ID_RUOLO_IN_UO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TIPOFUNRUOLO2  (Index) 
--
CREATE INDEX "@db_user".INDX_TIPOFUNRUOLO2 ON "@db_user".DPA_TIPO_F_RUOLO (ID_TIPO_FUNZ) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_TIPO_OGGETTO  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_TIPO_OGGETTO ON "@db_user".DPA_TIPO_OGGETTO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_TIPO_OGGETTO_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_TIPO_OGGETTO_FASC ON "@db_user".DPA_TIPO_OGGETTO_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- DPA_TIPO_SUPPORTO_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".DPA_TIPO_SUPPORTO_PK ON "@db_user".DPA_TIPO_SUPPORTO (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DPA_TODOLIST_PEOPLE_DEST  (Index) 
--
CREATE INDEX "@db_user".INDX_DPA_TODOLIST_PEOPLE_DEST ON "@db_user".DPA_TODOLIST (ID_PEOPLE_DEST, ID_RUOLO_DEST) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASM_UTENTE  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASM_UTENTE ON "@db_user".DPA_TODOLIST (ID_TRASM_UTENTE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASM2  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASM2 ON "@db_user".DPA_TRASMISSIONE (ID_PROFILE, ID_PEOPLE, ID_RUOLO_IN_UO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASM3  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASM3 ON "@db_user".DPA_TRASMISSIONE (ID_PROFILE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASM4  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASM4 ON "@db_user".DPA_TRASMISSIONE (ID_PROJECT) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASM6  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASM6 ON "@db_user".DPA_TRASMISSIONE (ID_PROJECT, ID_PEOPLE, ID_RUOLO_IN_UO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_TRASM_DIAGR  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_TRASM_DIAGR ON "@db_user".DPA_TRASM_DIAGR (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASMSING1  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASMSING1 ON "@db_user".DPA_TRASM_SINGOLA (ID_TRASMISSIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASMSING2  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASMSING2 ON "@db_user".DPA_TRASM_SINGOLA (ID_CORR_GLOBALE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASMSING3  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASMSING3 ON "@db_user".DPA_TRASM_SINGOLA (ID_RAGIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASMSING4  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASMSING4 ON "@db_user".DPA_TRASM_SINGOLA (ID_TRASM_UTENTE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASMUTE1  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASMUTE1 ON "@db_user".DPA_TRASM_UTENTE (ID_TRASM_SINGOLA) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_TRASMUTE2  (Index) 
--
CREATE INDEX "@db_user".INDX_TRASMUTE2 ON "@db_user".DPA_TRASM_UTENTE (ID_PEOPLE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_CANALECORR1  (Index) 
--
CREATE INDEX "@db_user".INDX_CANALECORR1 ON "@db_user".DPA_T_CANALE_CORR (ID_CORR_GLOBALE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_VIS_TIPO_DOC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_VIS_TIPO_DOC ON "@db_user".DPA_VIS_TIPO_DOC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_VIS_TIPO_FASC  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_VIS_TIPO_FASC ON "@db_user".DPA_VIS_TIPO_FASC (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_VOCI_MENU_ADMIN  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_VOCI_MENU_ADMIN ON "@db_user".DPA_VOCI_MENU_ADMIN (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- NETWORK_UNIQUE  (Index) 
--
CREATE UNIQUE INDEX "@db_user".NETWORK_UNIQUE ON "@db_user".NETWORK_ALIASES (NETWORK_ID, NETWORK_TYPE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PEOPLEGROUP1  (Index) 
--
CREATE INDEX "@db_user".INDX_PEOPLEGROUP1 ON "@db_user".PEOPLEGROUPS (GROUPS_SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PEOPLEGROUP2  (Index) 
--
CREATE INDEX "@db_user".INDX_PEOPLEGROUP2 ON "@db_user".PEOPLEGROUPS (PEOPLE_SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_PROFILE_PK ON "@db_user".PROFILE (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE2  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_PROFILE2 ON "@db_user".PROFILE (DOCNUMBER) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE11  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE11 ON "@db_user".PROFILE (CHA_TIPO_PROTO, CHA_DA_PROTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE12  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE12 ON "@db_user".PROFILE (CHA_ASSEGNATO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE13  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE13 ON "@db_user".PROFILE (CHA_FASCICOLATO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE5  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE5 ON "@db_user".PROFILE (ID_OGGETTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE6  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE6 ON "@db_user".PROFILE (ID_REGISTRO, DTA_PROTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE7  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE7 ON "@db_user".PROFILE (DTA_PROTO_IN) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE9  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE9 ON "@db_user".PROFILE (CHA_TIPO_PROTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROF_ID_PARENT  (Index) 
--
CREATE INDEX "@db_user".INDX_PROF_ID_PARENT ON "@db_user".PROFILE (ID_PARENT) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- UIPROF  (Index) 
--
CREATE UNIQUE INDEX "@db_user".UIPROF ON "@db_user".PROFILE (VAR_CHIAVE_PROTO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE_DOC_PRINC  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE_DOC_PRINC ON "@db_user".PROFILE (ID_DOCUMENTO_PRINCIPALE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROFILE17  (Index) 
--
CREATE INDEX "@db_user".INDX_PROFILE17 ON "@db_user".PROFILE (CHA_IN_ARCHIVIO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ10  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ10 ON "@db_user".PROJECT (CHA_TIPO_PROJ, CHA_TIPO_FASCICOLO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ11  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ11 ON "@db_user".PROJECT (ANNO_CREAZIONE, CHA_TIPO_PROJ, CHA_TIPO_FASCICOLO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ2  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ2 ON "@db_user".PROJECT (VAR_CODICE, ID_AMM, ID_REGISTRO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ3  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ3 ON "@db_user".PROJECT (NUM_FASCICOLO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ4  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ4 ON "@db_user".PROJECT (ANNO_CREAZIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ42  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ42 ON "@db_user".PROJECT (CHA_TIPO_PROJ, ID_PARENT, ID_REGISTRO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ5  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ5 ON "@db_user".PROJECT (VAR_COD_LIV1) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ6  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ6 ON "@db_user".PROJECT (ID_FASCICOLO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ7  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ7 ON "@db_user".PROJECT (ID_PARENT) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ8  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ8 ON "@db_user".PROJECT (CHA_TIPO_PROJ, NUM_LIVELLO) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ9  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJ9 ON "@db_user".PROJECT (NUM_FASCICOLO, ANNO_CREAZIONE) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJ_UNIQUE  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_PROJ_UNIQUE ON "@db_user".PROJECT (VAR_CHIAVE_FASC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_PROJECTCOMP1  (Index) 
--
CREATE INDEX "@db_user".INDX_PROJECTCOMP1 ON "@db_user".PROJECT_COMPONENTS (LINK, PROJECT_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_COMP1  (Index) 
--
CREATE INDEX "@db_user".INDX_COMP1 ON "@db_user".COMPONENTS (DOCNUMBER) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_COMP2  (Index) 
--
CREATE INDEX "@db_user".INDX_COMP2 ON "@db_user".COMPONENTS (VERSION_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DEL_SEC6  (Index) 
--
CREATE INDEX "@db_user".INDX_DEL_SEC6 ON "@db_user".DELETED_SECURITY (PERSONORGROUP) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DEL_SEC5  (Index) 
--
CREATE INDEX "@db_user".INDX_DEL_SEC5 ON "@db_user".DELETED_SECURITY (THING) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_DEL_SEQ_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_DEL_SEQ_PK ON "@db_user".DELETED_SECURITY (THING, PERSONORGROUP, ACCESSRIGHTS) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_ANAFUNZ1  (Index) 
--
CREATE INDEX "@db_user".INDX_ANAFUNZ1 ON "@db_user".DPA_ANAGRAFICA_FUNZIONI (CHA_TIPO_FUNZ) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_AREA_CONS_PK  (Index) 
--
CREATE UNIQUE INDEX "@db_user".INDX_AREA_CONS_PK ON "@db_user".DPA_AREA_CONSERVAZIONE (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_AREALAV  (Index) 
--
CREATE INDEX "@db_user".INDX_AREALAV ON "@db_user".DPA_AREA_LAVORO (ID_PEOPLE, ID_PROFILE, CHA_TIPO_DOC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- INDX_AREALAV2  (Index) 
--
CREATE INDEX "@db_user".INDX_AREALAV2 ON "@db_user".DPA_AREA_LAVORO (ID_PEOPLE, ID_PROJECT, CHA_TIPO_FASC) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PK_DPA_ASSOCIAZIONE_TEMPLATES  (Index) 
--
CREATE UNIQUE INDEX "@db_user".PK_DPA_ASSOCIAZIONE_TEMPLATES ON "@db_user".DPA_ASSOCIAZIONE_TEMPLATES (SYSTEM_ID) LOGGING TABLESPACE @ora_idxtblspc_name NOPARALLEL
/


--
-- PKGRUBRICA  (Package) 
--
CREATE OR REPLACE PACKAGE "@db_user".pkgRubrica as TYPE r_cursor is REF CURSOR; end;
/

SHOW ERRORS;


--
-- CURTYPES  (Package) 
--
CREATE OR REPLACE PACKAGE "@db_user".curtypes
AS
TYPE InteropRefCursor IS REF CURSOR;
END;
/

SHOW ERRORS;


--
-- SP_INSERT_AREA_CONS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INSERT_AREA_CONS
(
p_idAmm              NUMBER,
p_idPeople           NUMBER,
p_idProfile          NUMBER,
p_idProject          NUMBER,
p_codFasc            VARCHAR,
p_oggetto            VARCHAR,
p_tipoDoc            CHAR,
p_idGruppo           NUMBER,
p_idRegistro         NUMBER,
p_docNumber          NUMBER,
p_userId             VARCHAR,
p_result             OUT   NUMBER
)
IS

idRuoloInUo NUMBER:=0;
id_cons_1 NUMBER:=0;
id_cons_2 NUMBER:=0;
res number:=0;

begin

SELECT SEQ_CONSERVAZIONE.nextval into id_cons_1 from dual;

SELECT SEQ_CONSERVAZIONE.nextval into id_cons_2 from dual;

SELECT DPA_CORR_GLOBALI.SYSTEM_ID INTO idRuoloInUo FROM DPA_CORR_GLOBALI WHERE DPA_CORR_GLOBALI.ID_GRUPPO = p_idGruppo;

begin
SELECT DISTINCT DPA_AREA_CONSERVAZIONE.SYSTEM_ID  INTO res  FROM DPA_AREA_CONSERVAZIONE WHERE
DPA_AREA_CONSERVAZIONE.ID_PEOPLE=p_idPeople AND
DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = idRuoloInUo AND
DPA_AREA_CONSERVAZIONE.CHA_STATO='N';
exception when others then res:=0;
end;
IF (res>0) THEN

INSERT INTO DPA_ITEMS_CONSERVAZIONE (
SYSTEM_ID,
ID_CONSERVAZIONE,
ID_PROFILE,
ID_PROJECT,
CHA_TIPO_DOC,
VAR_OGGETTO,
ID_REGISTRO,
DATA_INS,
CHA_STATO,
VAR_XML_METADATI,
COD_FASC,
DOCNUMBER
)
VALUES
(
id_cons_1,
res,
p_idProfile,
p_idProject,
p_tipoDoc,
p_oggetto,
p_idRegistro,
sysdate,
'N',
EMPTY_CLOB(),
p_codFasc,
p_docNumber
);

p_result:=id_cons_1;

ELSE

INSERT INTO DPA_AREA_CONSERVAZIONE (
SYSTEM_ID,
ID_AMM,
ID_PEOPLE,
ID_RUOLO_IN_UO,
CHA_STATO,
DATA_APERTURA,
USER_ID,
ID_GRUPPO
)
VALUES(
id_cons_1,
p_idAmm,
p_idPeople,
idRuoloInUo,
'N',
sysdate,
p_userId,
p_idGruppo
);

INSERT INTO DPA_ITEMS_CONSERVAZIONE (
SYSTEM_ID,
ID_CONSERVAZIONE,
ID_PROFILE,
ID_PROJECT,
CHA_TIPO_DOC,
VAR_OGGETTO,
ID_REGISTRO,
DATA_INS,
CHA_STATO,
VAR_XML_METADATI,
COD_FASC,
DOCNUMBER
)
VALUES
(
id_cons_2,
id_cons_1,
p_idProfile,
p_idProject,
p_tipoDoc,
p_oggetto,
p_idRegistro,
sysdate,
'N',
EMPTY_CLOB(),
p_codFasc,
p_docNumber
);

p_result:=id_cons_2;

END IF;

exception when others then p_result:=-1;

END SP_INSERT_AREA_CONS;
/

SHOW ERRORS;


--
-- CREATEMODELLOTRASM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".createModelloTrasm 
(
p_idAmm number,
p_Nome varchar2,
p_Oggetto char,
p_idReg number,
p_Note varchar2,
p_Single char,
p_idPeople number,
p_cedeDiritti char,
p_idPeopleNew number,
p_idGruppoNew number,
p_returnvalue   out number
)
is
/******************************************************************************
   NAME:       createModelloTrasm
   PURPOSE:    Creazione di un nuovo Modello Trasmissione
******************************************************************************/
BEGIN 
declare  p_system_id number ;
idpeopletoset varchar2 
idpeoplenewtoset varchar2 
idgroupnewtoset varchar2 
idregtoset varchar2 

    BEGIN
 
    p_returnvalue := 0;
    p_system_id   :=0;
    
   
 
    -- Reperimento identity
    SELECT SEQ_DPA_MODELLI_TRASM.nextval INTO p_system_id FROM dual;
    
    if
         p_idPeople = 0 
         then 
         idpeopletoset :=null;
         else
         idpeopletoset:=to_char(p_idPeople);
            end if;
            
     
    INSERT INTO DPA_MODELLI_TRASM 
    (
        SYSTEM_ID,
        ID_AMM,
        NOME,  
        CHA_TIPO_OGGETTO,
        ID_REGISTRO,
        VAR_NOTE_GENERALI,
        SINGLE,
        ID_PEOPLE, 
        CHA_CEDE_DIRITTI,
        ID_PEOPLE_NEW_OWNER,
        ID_GROUP_NEW_OWNER,
        CODICE
    ) 
    VALUES 
    (
        p_system_id,
        p_idAmm,
        p_Nome, 
        p_Oggetto, 
        p_idReg,
        p_Note,
        p_Single,
       idpeopletoset, 
        p_cedeDiritti,
        p_idPeopleNew,
        p_idGruppoNew,
        'MT_' || to_char(p_system_id)
    );
    
    p_returnvalue := SQL%ROWCOUNT; 

    IF (p_returnvalue > 0) THEN
        BEGIN
            p_returnvalue := p_system_id;
        END;
    END IF;  
    END;
END createModelloTrasm;
/

SHOW ERRORS;


--
-- SP_INSERT_DOC_ARCHIVIO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INSERT_DOC_ARCHIVIO(p_idProfile NUMBER, p_serie NUMBER, p_result OUT NUMBER) IS
inFasc number:=0;
inSerie number := 0;
docNumber number := 0;
BEGIN

--select docnumber into docNumber from profile where system_id = p_idProfile;

SELECT count(*) INTO inFasc FROM PROJECT A
WHERE A.CHA_TIPO_PROJ = 'F' AND
A.SYSTEM_ID IN
(SELECT A.ID_FASCICOLO FROM PROJECT A, PROJECT_COMPONENTS B
WHERE A.SYSTEM_ID=B.PROJECT_ID AND B.LINK=p_idProfile);

select count(*) into inSerie
from profile, dpa_associazione_templates, dpa_oggetti_custom
where
profile.docnumber = dpa_associazione_templates.doc_number
and
dpa_associazione_templates.id_oggetto = dpa_oggetti_custom.system_id
and
profile.docnumber in (select docnumber from profile where system_id = p_idProfile)
and
dpa_oggetti_custom.repertorio = 1
and
dpa_associazione_templates.valore_oggetto_db is not null;

if ((inFasc=1 and p_serie=1) or (inFasc>1 and p_serie=0) or (inSerie>0 and p_serie=0)) then
begin
UPDATE PROFILE SET  CHA_IN_ARCHIVIO='2' WHERE SYSTEM_ID = p_idProfile;
p_result:=2;
end;
else
begin
UPDATE PROFILE SET  CHA_IN_ARCHIVIO='1' WHERE SYSTEM_ID = p_idProfile;
DELETE FROM DPA_AREA_LAVORO WHERE ID_PROFILE = p_idProfile;
update dpa_trasm_utente set cha_in_todolist = '0' where id_trasm_singola in
(select system_id from dpa_trasm_singola where id_trasmissione in
(select system_id from dpa_trasmissione where id_profile = p_idProfile));
p_result:=1;
end;
end if;
exception when others then p_result:=-1;
END SP_INSERT_DOC_ARCHIVIO;
/

SHOW ERRORS;


--
-- CREATEDOCSP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".createDocSP(p_idpeople number,p_doctype VARCHAR, p_systemId OUT number)
is

BEGIN

DECLARE
docnum  number;
verid number;
idDocType number;

BEGIN

p_systemId:=0;

<<REPERIMENTO_DOCUMENTTYPES>>
BEGIN

SELECT SYSTEM_ID into idDocType FROM
DOCUMENTTYPES
WHERE TYPE_ID = p_doctype;
EXCEPTION
WHEN NO_DATA_FOUND THEN
p_systemId:=0;
RETURN;

END REPERIMENTO_DOCUMENTTYPES;

SELECT SEQ.NEXTVAL INTO docnum FROM DUAL;

p_systemId:= docnum;

<<INSERIMENTO_IN_PROFILE>>
BEGIN
INSERT INTO Profile
(
SYSTEM_ID,
TYPIST,
AUTHOR,
DOCUMENTTYPE,
CREATION_DATE,
CREATION_TIME,
DOCNUMBER

)
VALUES
(
docnum,
p_idpeople,
p_idpeople,
idDocType,
SYSDATE,
SYSDATE,
docnum

);
EXCEPTION
WHEN OTHERS THEN  p_systemId:=0;
RETURN;

END INSERIMENTO_IN_PROFILE;

<<INSERIMENTO_IN_VERSIONS>>
BEGIN

SELECT SEQ.NEXTVAL INTO verid FROM DUAL;

INSERT INTO VERSIONS
(
VERSION_ID,  DOCNUMBER, VERSION, SUBVERSION, VERSION_LABEL, AUTHOR, TYPIST, DTA_CREAZIONE
) VALUES (
verid, docnum, 1, '!', '1',p_idpeople, p_idpeople,  SYSDATE
);

EXCEPTION
WHEN OTHERS THEN p_systemId:=0;
RETURN;

END INSERIMENTO_IN_VERSIONS;

<<INSERIMENTO_IN_COMPONENTS>>
BEGIN

INSERT INTO COMPONENTS
(
VERSION_ID, DOCNUMBER, FILE_SIZE
) VALUES (
verid, docnum, 0
)	;
EXCEPTION
WHEN OTHERS THEN p_systemId:=0;
RETURN;

END INSERIMENTO_IN_COMPONENTS;

<<INSERIMENTO_SECURITY>>
BEGIN
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
) VALUES (
docnum, p_idpeople, 0, NULL, NULL
)	;
EXCEPTION
WHEN OTHERS THEN p_systemId:=0;
return;
END INSERIMENTO_SECURITY;

END;

END;
/

SHOW ERRORS;


--
-- SP_DPA_PR_DOCXSEDE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_DPA_PR_DOCXSEDE (
ID_AMM_P  			  IN NUMBER,
ID_REGISTRO_P          IN NUMBER,
ANNO_P                 IN NUMBER,
ID_PEOPLE_P	 		  IN NUMBER,
TS_STAMPA  	 		  IN VARCHAR
)
IS
BEGIN --GENERALE
DECLARE
--variabile del cursore
v_var_sede         VARCHAR (255);
v_cha_tipo_proto   VARCHAR (1);
v_proto_count      NUMBER;
v_flag			 NUMBER;
--variabili ausiliarie
existSede NUMBER;
protoA NUMBER;
protoP NUMBER;
protoI NUMBER;
totProto NUMBER;
protoAnn NUMBER;
TS_STAMPA_P DATE;



-- CURSORE PER I DOC GRIGI
CURSOR c_grigi
IS
SELECT  /*+  INDEX (profile INDX_PROFILE9) */ COUNT (system_id) AS protocount, var_sede
FROM PROFILE
WHERE
Getidamm(PROFILE.author) = ID_AMM_P
AND num_proto IS NULL
AND cha_tipo_proto = 'G'
AND TO_NUMBER (TO_CHAR (creation_date, 'YYYY')) = ANNO_P
AND var_sede >=CHR(0)
GROUP BY ROLLUP (var_sede);
-- CURSORE PER I PROTOCOLLI A,I,P,ANNULLATI
CURSOR c_protocolli
IS
SELECT /*+  INDEX (profile INDX_PROFILE41) */
COUNT (system_id) AS protocount, var_sede,cha_tipo_proto,DECODE(ID_ANNULLATORE,NULL,0,1) AS FLAG
FROM PROFILE
WHERE '0' = cha_da_proto
AND 1e10 >= -num_proto
AND ANNO_P = num_anno_proto
AND PROFILE.var_sede >= CHR (0)
AND ID_REGISTRO_P = id_registro
AND ('R' > cha_tipo_proto OR 'R' < cha_tipo_proto)
GROUP BY ROLLUP (var_sede, cha_tipo_proto, DECODE(ID_ANNULLATORE,NULL,0,1));

-- CURSORE PER I TOTALI Creati
CURSOR c_totali_creati
IS
SELECT SUM (grigi+prot),sede FROM DPA_PR_DOCXSEDE
WHERE ANNO = 'Creati' AND ID_PEOPLE = ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P GROUP BY ROLLUP (sede);

-- CURSORE PER I DOC GRIGI CLASSIFICATI
CURSOR c_grigiClass
IS
SELECT /*+  INDEX (profile INDX_PROFILE9) */ COUNT (p.system_id) AS protocount, p.var_sede
FROM PROFILE p, PROJECT_COMPONENTS  pc
WHERE Getidamm(p.author) = ID_AMM_P
AND p.num_proto IS NULL
AND p.cha_tipo_proto = 'G'
AND TO_NUMBER (TO_CHAR (p.creation_date, 'YYYY')) = ANNO_P
AND p.var_sede >=CHR(0)
AND p.system_id IN pc.LINK
GROUP BY ROLLUP (var_sede);

--CURSORE PER PROTOCOLLI A,I,P,ANNULL CLASSIFICATI
CURSOR c_protocolli_class
IS
SELECT /*+  INDEX (profile INDX_PROFILE41) */
COUNT (system_id) AS protocount, var_sede,cha_tipo_proto,DECODE(ID_ANNULLATORE,NULL,0,1) AS FLAG
FROM PROFILE,PROJECT_COMPONENTS  pc
WHERE '0' = cha_da_proto
AND 1e10 >= -num_proto
AND ANNO_P = num_anno_proto
AND PROFILE.var_sede >= CHR (0)
AND ID_REGISTRO_P = id_registro
AND ('R' > cha_tipo_proto OR 'R' < cha_tipo_proto)
AND system_id IN pc.LINK
GROUP BY ROLLUP (var_sede, cha_tipo_proto, DECODE(ID_ANNULLATORE,NULL,0,1));

-- CURSORE PER I TOTALI classificati
CURSOR c_totali_classificati
IS
SELECT SUM (grigi+prot),sede FROM DPA_PR_DOCXSEDE WHERE
anno = 'Classificati' AND ID_PEOPLE = ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P GROUP BY ROLLUP (sede);


--CURSORE PER I DOC GRIGI SENZA IMG
CURSOR c_grigi_prof
IS
SELECT  /*+  INDEX (profile INDX_PROFILE9) */ COUNT (system_id) AS protocount, var_sede
FROM PROFILE
WHERE
Getidamm(PROFILE.author) = ID_AMM_P
AND num_proto IS NULL
AND CHA_IMG = '0'
AND cha_tipo_proto = 'G'
AND TO_NUMBER (TO_CHAR (creation_date, 'YYYY')) = ANNO_P
AND var_sede >=CHR(0)
GROUP BY ROLLUP (var_sede);

-- CURSORE PER I PROTOCOLLI A,I,P,ANNULLATI SENZA IMG
CURSOR c_protocolli_prof
IS
SELECT /*+  INDEX (profile INDX_PROFILE41) */
COUNT (system_id) AS protocount, var_sede,cha_tipo_proto,DECODE(ID_ANNULLATORE,NULL,0,1) AS FLAG
FROM PROFILE
WHERE '0' = cha_da_proto
AND 1e10 >= -num_proto
AND CHA_IMG = '0'
AND ANNO_P = num_anno_proto
AND PROFILE.var_sede >= CHR (0)
AND ID_REGISTRO_P = id_registro
AND ('R' > cha_tipo_proto OR 'R' < cha_tipo_proto)
GROUP BY ROLLUP (var_sede, cha_tipo_proto, DECODE(ID_ANNULLATORE,NULL,0,1));

-- CURSORE PER I TOTALI Creati senza IMG
CURSOR c_totali_creati_prof
IS
SELECT SUM (grigi+prot),sede FROM DPA_PR_DOCXSEDE WHERE anno = 'Senza Img.'
AND ID_PEOPLE = ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P GROUP BY ROLLUP (sede);

BEGIN -- MAIN
TS_STAMPA_P := TO_DATE (TS_STAMPA,'dd/mm/yyyy hh24:mi:ss');
-- SVUOTO LA TABELLA DEI DATI
DELETE DPA_PR_DOCXSEDE WHERE (ID_PEOPLE = ID_PEOPLE_P);

BEGIN ----------------------------------- CURSORE PER I DOC GRIGI --------------------------------------
OPEN c_grigi;
LOOP
FETCH c_grigi INTO v_proto_count, v_var_sede;
EXIT WHEN c_grigi%NOTFOUND;
-- CODICE DI LOOP
IF ((v_proto_count IS NOT NULL) AND (v_var_sede IS NOT NULL))THEN
INSERT INTO DPA_PR_DOCXSEDE (id_people,ts_stampa,anno,sede,grigi) VALUES (ID_PEOPLE_P,TS_STAMPA_P,'Creati',v_var_sede,v_proto_count);
END IF;
-- END CODICE DI LOOP
END LOOP;
CLOSE c_grigi;
-- RESET DELLE VARIABILI LOCALI
v_var_sede := '';
v_cha_tipo_proto := '';
v_proto_count := 0;
v_flag := 0;
existSede := 0;
END; ----------------------------------- CURSORE PER I DOC GRIGI --------------------------------------

BEGIN -------------------------------- CURSORE PER PROTOCOLLI A.I.P.ANNULLATI -------------------------
OPEN c_protocolli;
LOOP
FETCH c_protocolli INTO v_proto_count, v_var_sede, v_cha_tipo_proto,v_flag;
EXIT WHEN c_protocolli%NOTFOUND;


SELECT COUNT(*) INTO existSede FROM DPA_PR_DOCXSEDE WHERE SEDE=v_var_sede AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P;
IF (existSede = 0) THEN
IF ((v_var_sede IS NOT NULL) AND (v_cha_tipo_proto IS NOT NULL) AND (v_proto_count IS NOT NULL) AND (v_flag = 0))
THEN
INSERT INTO DPA_PR_DOCXSEDE (id_people,ts_stampa,anno,sede) VALUES (ID_PEOPLE_P,TS_STAMPA_P,'Creati',v_var_sede);
END IF;
END IF;

-- PROTO ARRIVO
IF ((v_cha_tipo_proto = 'A') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET arrivo = v_proto_count
WHERE sede = v_var_sede AND anno = 'Creati'AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoA := v_proto_count;

END IF;

-- PROTO PARTENZA
IF ((v_cha_tipo_proto = 'P') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET partenza = v_proto_count
WHERE sede = v_var_sede AND anno = 'Creati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoP := v_proto_count;
END IF;

-- PROTO INTERNI
IF ((v_cha_tipo_proto = 'I') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET interni = v_proto_count
WHERE sede = v_var_sede AND anno = 'Creati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoI := v_proto_count;
END IF;

-- INSERISCO IL TOTALE PROTOCOLLI
IF ((v_proto_count > 0 ) AND (v_var_sede IS NOT NULL) AND (v_cha_tipo_proto IS NULL) AND (v_flag IS NULL)) THEN
UPDATE DPA_PR_DOCXSEDE SET prot = v_proto_count WHERE sede = v_var_sede AND anno = 'Creati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P;
totProto := v_proto_count;
END IF;

--PROTO ANNULLATI
IF ((v_proto_count > 0) AND (v_var_sede IS NOT NULL) AND (v_flag = 1)) THEN
UPDATE DPA_PR_DOCXSEDE SET annull = v_proto_count WHERE sede = v_var_sede AND anno = 'Creati'  AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoAnn := NULL;
totProto := NULL;
protoA := NULL;
protoP := NULL;
protoI := NULL;
END IF;

-- PROTO ANNULLATI
--IF ((protoA IS NOT NULL) AND (protoP IS NOT NULL) AND (protoI IS NOT NULL) AND (totProto IS NOT NULL)) THEN
--protoAnn := totProto - (protoA+protoP+protoI);
--UPDATE DPA_PR_DOCXSEDE SET annull = protoAnn WHERE sede = v_var_sede AND anno = 'Creati'  AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
--protoAnn := NULL;
--totProto := NULL;
--protoA := NULL;
--protoP := NULL;
--protoI := NULL;
-- END IF;
--end inserimento
END LOOP;
CLOSE c_protocolli;
--reset variabili:
protoAnn := NULL;
totProto := NULL;
protoA := NULL;
protoP := NULL;
protoI := NULL;
v_var_sede := '';
v_cha_tipo_proto := '';
v_proto_count := 0;
v_flag := 0;
existSede := 0;

END;  -------------------------------- CURSORE PER PROTOCOLLI A.I.P.ANNULLATI--------------------------

BEGIN -------------------------------- CURSORE PER I TOTALI creati -------------------------
OPEN c_totali_creati;
LOOP
FETCH c_totali_creati INTO v_proto_count, v_var_sede;
UPDATE DPA_PR_DOCXSEDE SET TOT_DOC = v_proto_count WHERE sede = v_var_sede AND anno = 'Creati'  AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
EXIT WHEN c_totali_creati%NOTFOUND;
END LOOP;
CLOSE c_totali_creati;
END; -------------------------------- CURSORE PER I TOTALI creati -------------------------

BEGIN -------------------------------START CONTA DOCUMENTI CLASSIFICATI ------------
-- GRIGI CLASSIFICATI
OPEN c_grigiClass;
LOOP
FETCH c_grigiClass INTO v_proto_count, v_var_sede;
EXIT WHEN c_grigiClass%NOTFOUND;
IF ((v_proto_count IS NOT NULL) AND (v_var_sede IS NOT NULL))THEN
INSERT INTO DPA_PR_DOCXSEDE (anno,sede,grigi,id_people,ts_stampa) VALUES ('Classificati',v_var_sede,v_proto_count,ID_PEOPLE_P,TS_STAMPA_P );
END IF;
END LOOP;
CLOSE c_grigiClass;
--- PROTOCOLLI CLASSIFICATI
OPEN c_protocolli_class;
LOOP
FETCH c_protocolli_class INTO v_proto_count, v_var_sede, v_cha_tipo_proto,v_flag;
EXIT WHEN c_protocolli_class%NOTFOUND;
SELECT COUNT(*) INTO existSede FROM DPA_PR_DOCXSEDE WHERE SEDE=v_var_sede AND id_people= ID_PEOPLE_P AND ts_stampa=TS_STAMPA_P ;
IF (existSede = 0) THEN
IF ((v_var_sede IS NOT NULL) AND (v_cha_tipo_proto IS NOT NULL) AND (v_proto_count IS NOT NULL) AND (v_flag = 0))
THEN
INSERT INTO DPA_PR_DOCXSEDE (anno,sede,id_people,ts_stampa) VALUES ('Classificati',v_var_sede,ID_PEOPLE_P,TS_STAMPA_P );
END IF;
END IF;

-- PROTO ARRIVO
IF ((v_cha_tipo_proto = 'A') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET arrivo = v_proto_count
WHERE sede = v_var_sede AND anno = 'Classificati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoA := v_proto_count;
END IF;

-- PROTO PARTENZA
IF ((v_cha_tipo_proto = 'P') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET partenza = v_proto_count
WHERE sede = v_var_sede AND anno = 'Classificati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoP := v_proto_count;
END IF;

-- PROTO INTERNI
IF ((v_cha_tipo_proto = 'I') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET interni = v_proto_count
WHERE sede = v_var_sede AND anno = 'Classificati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoI := v_proto_count;
END IF;

-- INSERISCO IL TOTALE PROTOCOLLI
IF ((v_proto_count > 0 ) AND (v_var_sede IS NOT NULL) AND (v_cha_tipo_proto IS NULL) AND (v_flag IS NULL)) THEN
UPDATE DPA_PR_DOCXSEDE SET prot = v_proto_count WHERE sede = v_var_sede AND anno = 'Classificati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
totProto := v_proto_count;
END IF;

-- PROTO ANNULLATI
--IF ((protoA IS NOT NULL) AND (protoP IS NOT NULL) AND (protoI IS NOT NULL) AND (totProto IS NOT NULL)) THEN
--protoAnn := totProto - (protoA+protoP+protoI);
--UPDATE DPA_PR_DOCXSEDE SET annull = protoAnn WHERE sede = v_var_sede AND anno = 'Classificati' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
--protoAnn := NULL;
--totProto := NULL;
--protoA := NULL;
--protoP := NULL;
--protoI := NULL;
-- END IF;
--PROTO ANNULLATI
IF ((v_proto_count > 0) AND (v_var_sede IS NOT NULL) AND (v_flag = 1)) THEN
UPDATE DPA_PR_DOCXSEDE SET annull = v_proto_count WHERE sede = v_var_sede AND anno = 'Classificati'  AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoAnn := NULL;
totProto := NULL;
protoA := NULL;
protoP := NULL;
protoI := NULL;
END IF;
END LOOP;
CLOSE c_protocolli_class;
--reset variabili:
protoAnn := NULL;
totProto := NULL;
protoA := NULL;
protoP := NULL;
protoI := NULL;
v_var_sede := '';
v_cha_tipo_proto := '';
v_proto_count := 0;
v_flag := 0;
existSede := 0;
BEGIN -------------------------------- CURSORE PER I TOTALI Classificati -------------------------
OPEN c_totali_classificati;
LOOP
FETCH c_totali_classificati INTO v_proto_count, v_var_sede;
UPDATE DPA_PR_DOCXSEDE SET TOT_DOC = v_proto_count WHERE sede = v_var_sede AND anno = 'Classificati'  AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
EXIT WHEN c_totali_classificati%NOTFOUND;
END LOOP;
CLOSE c_totali_classificati;
END; -------------------------------- CURSORE PER I TOTALI Classificati -------------------------
END;-------------------------------END CONTA DOCUMENTI CLASSIFICATI -----------------------------
BEGIN ------- START CONTA DOC SENZA IMMAGINI -----------------------
BEGIN ----------------------------------- DOC GRIGI SENZA IMG--------------------------------------
OPEN c_grigi_prof;
LOOP
FETCH c_grigi_prof INTO v_proto_count, v_var_sede;
EXIT WHEN c_grigi_prof%NOTFOUND;
-- CODICE DI LOOP
IF ((v_proto_count IS NOT NULL) AND (v_var_sede IS NOT NULL))THEN
INSERT INTO DPA_PR_DOCXSEDE (anno,sede,grigi,id_people,ts_stampa) VALUES ('Senza Img.',v_var_sede,v_proto_count,ID_PEOPLE_P,TS_STAMPA_P );
END IF;
-- END CODICE DI LOOP
END LOOP;
CLOSE c_grigi_prof;
-- RESET DELLE VARIABILI LOCALI
v_var_sede := '';
v_cha_tipo_proto := '';
v_proto_count := 0;
v_flag := 0;
existSede := 0;
END; ----------------------------------- DOC GRIGI SENZA IMG --------------------------------------
BEGIN -------------------------------- CURSORE PER PROTOCOLLI A.I.P.ANNULLATI senza IMG-------------------------
OPEN c_protocolli_prof;
LOOP
FETCH c_protocolli_prof INTO v_proto_count, v_var_sede, v_cha_tipo_proto,v_flag;
EXIT WHEN c_protocolli_prof%NOTFOUND;


SELECT COUNT(*) INTO existSede FROM DPA_PR_DOCXSEDE WHERE SEDE=v_var_sede AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
IF (existSede = 0) THEN
IF ((v_var_sede IS NOT NULL) AND (v_cha_tipo_proto IS NOT NULL) AND (v_proto_count IS NOT NULL) AND (v_flag = 0))
THEN
INSERT INTO DPA_PR_DOCXSEDE (anno,sede,id_people,ts_stampa) VALUES ('Senza Img.',v_var_sede,ID_PEOPLE_P,TS_STAMPA_P );
END IF;
END IF;

-- PROTO ARRIVO
IF ((v_cha_tipo_proto = 'A') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET arrivo = v_proto_count
WHERE sede = v_var_sede AND anno = 'Senza Img.' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoA := v_proto_count;
END IF;

-- PROTO PARTENZA
IF ((v_cha_tipo_proto = 'P') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET partenza = v_proto_count
WHERE sede = v_var_sede AND anno = 'Senza Img.' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoP := v_proto_count;
END IF;

-- PROTO INTERNI
IF ((v_cha_tipo_proto = 'I') AND (v_proto_count > 0) AND (v_flag = 0))
THEN
UPDATE DPA_PR_DOCXSEDE
SET interni = v_proto_count
WHERE sede = v_var_sede AND anno = 'Senza Img.' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoI := v_proto_count;
END IF;

-- INSERISCO IL TOTALE PROTOCOLLI
IF ((v_proto_count > 0 ) AND (v_var_sede IS NOT NULL) AND (v_cha_tipo_proto IS NULL) AND (v_flag IS NULL)) THEN
UPDATE DPA_PR_DOCXSEDE SET prot = v_proto_count WHERE sede = v_var_sede AND anno = 'Senza Img.' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
totProto := v_proto_count;
END IF;

-- PROTO ANNULLATI
--IF ((protoA IS NOT NULL) AND (protoP IS NOT NULL) AND (protoI IS NOT NULL) AND (totProto IS NOT NULL)) THEN
--protoAnn := totProto - (protoA+protoP+protoI);
--UPDATE DPA_PR_DOCXSEDE SET annull = protoAnn WHERE sede = v_var_sede AND anno = 'Senza Img.' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
--protoAnn := NULL;
--totProto := NULL;
--protoA := NULL;
--protoP := NULL;
--protoI := NULL;
--END IF;
IF ((v_proto_count > 0) AND (v_var_sede IS NOT NULL) AND (v_flag = 1)) THEN
UPDATE DPA_PR_DOCXSEDE SET annull = v_proto_count WHERE sede = v_var_sede AND anno = 'Senza Img.'  AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
protoAnn := NULL;
totProto := NULL;
protoA := NULL;
protoP := NULL;
protoI := NULL;
END IF;
--end inserimento
END LOOP;
CLOSE c_protocolli_prof;
--reset variabili:
protoAnn := NULL;
totProto := NULL;
protoA := NULL;
protoP := NULL;
protoI := NULL;
v_var_sede := '';
v_cha_tipo_proto := '';
v_proto_count := 0;
v_flag := 0;
existSede := 0;

END;  -------------------------------- CURSORE PER PROTOCOLLI A.I.P.ANNULLATI--------------------------

BEGIN -------------------------------- CURSORE PER I TOTALI creati -------------------------
OPEN c_totali_creati_prof;
LOOP
FETCH c_totali_creati_prof INTO v_proto_count, v_var_sede;
UPDATE DPA_PR_DOCXSEDE SET TOT_DOC = v_proto_count WHERE sede = v_var_sede AND anno = 'Senza Img.' AND ID_PEOPLE=ID_PEOPLE_P AND TS_STAMPA = TS_STAMPA_P ;
EXIT WHEN c_totali_creati_prof%NOTFOUND;
END LOOP;
CLOSE c_totali_creati_prof;
END; -------------------------------- CURSORE PER I TOTALI creati -------------------------
END; ------- end CONTA DOC SENZA IMMAGINI -----------------------

END; -- MAIN
EXCEPTION
WHEN OTHERS
THEN
RETURN;

END; --GENERALE;
/

SHOW ERRORS;


--
-- MIGRA_TEMPLATE_TRASM  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".migra_template_trasm
IS
id_modello_trasm       NUMBER        := 0;
id_modello_mitt_dest   NUMBER        := 0;
counter                NUMBER        := 0;
cast_counter           VARCHAR (255);
id_trasm               NUMBER;
id_amm                 NUMBER;
nome                   VARCHAR (255);
cha_tipo_oggetto       VARCHAR (1);
id_reg                 NUMBER;
var_note_generali      VARCHAR (255);
id_people              NUMBER;
idruolo_in_uo         NUMBER;
BEGIN                                                        -- BEGIN GENERALE
DBMS_OUTPUT.ENABLE (1000000);
DBMS_OUTPUT.put_line
('-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER DOCUMENTI PROTOCOLLATI-- '
);

DECLARE
CURSOR c_modelli_trasm (
id_trasm            NUMBER,
id_amm              NUMBER,
nome                VARCHAR,
cha_tipo_oggetto    VARCHAR,
id_reg              NUMBER,
var_note_generali   VARCHAR,
id_people           NUMBER,
idruolo_in_uo      NUMBER
)
IS
SELECT dt.system_id, der.id_amm, dtt.var_template,
dt.cha_tipo_oggetto, p.id_registro, dt.var_note_generali,
dt.id_people, dt.id_ruolo_in_uo
FROM dpa_templ_trasm dtt,
dpa_trasmissione dt,
dpa_el_registri der,
PROFILE p
WHERE dtt.id_trasmissione = dt.system_id
-- AND p.id_people_prot = dt.id_people
AND der.system_id = p.id_registro
AND dt.id_profile = p.system_id
;
BEGIN                                                         --1migrazione
OPEN c_modelli_trasm (id_trasm,
id_amm,
nome,
cha_tipo_oggetto,
id_reg,
var_note_generali,
id_people,
idruolo_in_uo
);

LOOP
FETCH c_modelli_trasm
INTO id_trasm, id_amm, nome, cha_tipo_oggetto, id_reg,
var_note_generali, id_people, idruolo_in_uo;

EXIT WHEN c_modelli_trasm%NOTFOUND;

BEGIN
counter := counter + 1;

SELECT TO_CHAR (counter)
INTO cast_counter
FROM DUAL;

DBMS_OUTPUT.put_line (   cast_counter
|| ' - Migrazione Template per Documento: '
|| nome
);

SELECT seq_dpa_modelli_trasm.NEXTVAL
INTO id_modello_trasm
FROM DUAL;

INSERT INTO dpa_modelli_trasm
(system_id, id_amm, nome, cha_tipo_oggetto,
id_registro, var_note_generali, id_people, SINGLE
)
VALUES (id_modello_trasm, id_amm, nome, cha_tipo_oggetto,
id_reg, var_note_generali, id_people, 0
);

SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp
)
VALUES (id_modello_mitt_dest, id_modello_trasm, 'M',
0, 0, '',
'', 'R'
);

SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp)
SELECT id_modello_mitt_dest, id_modello_trasm, 'D',
dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,
dts.var_note_sing, dts.cha_tipo_dest
FROM dpa_trasm_singola dts
WHERE id_trasmissione = id_trasm;


UPDATE dpa_modelli_mitt_dest
SET cha_tipo_urp = 'P'
WHERE id_modello = id_modello_trasm
AND cha_tipo_urp = 'U'
AND cha_tipo_mitt_dest = 'D';
END;
END LOOP;
EXCEPTION
WHEN OTHERS
THEN
BEGIN
DBMS_OUTPUT.put_line
(' --- Eccezione nella migrazione - eseguo il rollback ---');
ROLLBACK;
END;

id_modello_trasm := 0;
id_modello_mitt_dest := 0;
id_trasm := 0;
id_amm := 0;
nome := '';
cha_tipo_oggetto := '';
id_reg := 0;
var_note_generali := '';
id_people := 0;
idruolo_in_uo := 0;
cast_counter := '';

CLOSE c_modelli_trasm;

SAVEPOINT templdocprot;
END;                                                          --1migrazione

---------------------
DBMS_OUTPUT.put_line
('-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER FASCICOLI ASSOCIATI AL REGISTRO -- '
);

DECLARE
CURSOR c_modelli_trasm (
id_trasm            INT,
id_amm              INT,
nome                VARCHAR,
cha_tipo_oggetto    VARCHAR,
id_reg              INT,
var_note_generali   VARCHAR,
id_people           INT,
idruolo_in_uo      INT
)
IS
SELECT dt.system_id, p.id_amm, dtt.var_template,
dt.cha_tipo_oggetto, p.id_registro, dt.var_note_generali,
dt.id_people, dt.id_ruolo_in_uo
FROM dpa_templ_trasm dtt, dpa_trasmissione dt, project p
WHERE dtt.id_trasmissione = dt.system_id
AND dt.id_project = p.system_id
AND p.cha_tipo_proj = 'F'
AND p.cha_tipo_fascicolo = 'P'
AND p.id_registro IS NOT NULL
;
BEGIN                                                       -- 2 migrazione
OPEN c_modelli_trasm (id_trasm,
id_amm,
nome,
cha_tipo_oggetto,
id_reg,
var_note_generali,
id_people,
idruolo_in_uo
);

LOOP
FETCH c_modelli_trasm
INTO id_trasm, id_amm, nome, cha_tipo_oggetto, id_reg,
var_note_generali, id_people, idruolo_in_uo;

EXIT WHEN c_modelli_trasm%NOTFOUND;

BEGIN
counter := counter + 1;

SELECT TO_CHAR (counter)
INTO cast_counter
FROM DUAL;

DBMS_OUTPUT.put_line (   cast_counter
|| ' - Migrazione Template Per Fascicolo: '
|| nome
);

--1. inserisco i dati attualizzati nella dpa_modelli_trasm
SELECT seq_dpa_modelli_trasm.NEXTVAL
INTO id_modello_trasm
FROM DUAL;

INSERT INTO dpa_modelli_trasm
(system_id, id_amm, nome, cha_tipo_oggetto,
id_registro, var_note_generali, id_people, SINGLE
)
VALUES (id_modello_trasm, id_amm, nome, cha_tipo_oggetto,
id_reg, var_note_generali, id_people, 0
);

--2.inserisco i dati del mittente del modello
--inserisco  i dati in tabella dpa_modelli_mitt_dest
SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp
)
VALUES (id_modello_mitt_dest, id_modello_trasm, 'M',
0, 0, '',
'', 'R'
);

--3. inserisco i dati dei destinatari
SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp)
SELECT id_modello_mitt_dest, id_modello_trasm, 'D',
dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,
dts.var_note_sing, dts.cha_tipo_dest
FROM dpa_trasm_singola dts
WHERE id_trasmissione = id_trasm;

-- converto i valori del CHA_TIPO_DEST (U=UTENTE  in P=UTENTE )
UPDATE dpa_modelli_mitt_dest
SET cha_tipo_urp = 'P'
WHERE id_modello = id_modello_trasm
AND cha_tipo_urp = 'U'
AND cha_tipo_mitt_dest = 'D';
END;
END LOOP;
EXCEPTION
WHEN OTHERS
THEN
BEGIN
DBMS_OUTPUT.put_line
(' --- Eccezione nella migrazione - eseguo il rollback ---');
ROLLBACK;
END;

--RESET VARIABILI LOCALI
id_modello_trasm := 0;
id_modello_mitt_dest := 0;
id_trasm := 0;
id_amm := 0;
nome := '';
cha_tipo_oggetto := '';
id_reg := 0;
var_note_generali := '';
id_people := 0;
idruolo_in_uo := 0;
cast_counter := '';

CLOSE c_modelli_trasm;

SAVEPOINT templfascreg;
END;                                                    --end 2 migrazione;

-----------------------------
DBMS_OUTPUT.put_line
('-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER DOCUMENTI GRIGI-- ');

DECLARE
CURSOR c_modelli_trasm (
id_trasm            INT,
nome                VARCHAR,
cha_tipo_oggetto    VARCHAR,
var_note_generali   VARCHAR,
id_people           INT,
idruolo_in_uo      INT
)
IS
SELECT dt.system_id, dtt.var_template, dt.cha_tipo_oggetto,
dt.var_note_generali, dt.id_people, dt.id_ruolo_in_uo
FROM dpa_trasmissione dt, PROFILE p, dpa_templ_trasm dtt
WHERE p.system_id = dt.id_profile
AND p.cha_tipo_proto = 'G'
AND dtt.id_trasmissione = dt.system_id
;
BEGIN                                                       -- 3 migrazione
OPEN c_modelli_trasm (id_trasm,
nome,
cha_tipo_oggetto,
var_note_generali,
id_people,
idruolo_in_uo
);

LOOP
FETCH c_modelli_trasm
INTO id_trasm, nome, cha_tipo_oggetto, var_note_generali,
id_people, idruolo_in_uo;

EXIT WHEN c_modelli_trasm%NOTFOUND;

BEGIN
counter := counter + 1;

SELECT TO_CHAR (counter)
INTO cast_counter
FROM DUAL;

DBMS_OUTPUT.put_line
(   cast_counter
|| ' - Migrazione Template Documento Grigio: '
|| nome
);

--0. prelevo le info mancati
SELECT sys_id, amm
INTO id_reg, id_amm
FROM (SELECT der.system_id AS sys_id, der.id_amm AS amm
FROM dpa_l_ruolo_reg dlrr, dpa_el_registri der
WHERE dlrr.id_ruolo_in_uo = idruolo_in_uo
AND dlrr.id_registro = der.system_id)
WHERE ROWNUM = 1;

--1. inserisco i dati attualizzati nella dpa_modelli_trasm
SELECT seq_dpa_modelli_trasm.NEXTVAL
INTO id_modello_trasm
FROM DUAL;

INSERT INTO dpa_modelli_trasm
(system_id, id_amm, nome, cha_tipo_oggetto,
id_registro, var_note_generali, id_people, SINGLE
)
VALUES (id_modello_trasm, id_amm, nome, cha_tipo_oggetto,
id_reg, var_note_generali, id_people, 0
);

--2.inserisco i dati del mittente del modello
--inserisco  i dati in tabella dpa_modelli_mitt_dest
SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp
)
VALUES (id_modello_mitt_dest, id_modello_trasm, 'M',
0, 0, '',
'', 'R'
);

--3. inserisco i dati dei destinatari
SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp)
SELECT id_modello_mitt_dest, id_modello_trasm, 'D',
dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,
dts.var_note_sing, dts.cha_tipo_dest
FROM dpa_trasm_singola dts
WHERE id_trasmissione = id_trasm;

-- converto i valori del CHA_TIPO_DEST (U=UTENTE  in P=UTENTE )
UPDATE dpa_modelli_mitt_dest
SET cha_tipo_urp = 'P'
WHERE id_modello = id_modello_trasm
AND cha_tipo_urp = 'U'
AND cha_tipo_mitt_dest = 'D';
END;
END LOOP;
EXCEPTION
WHEN OTHERS
THEN
BEGIN
DBMS_OUTPUT.put_line
(' --- Eccezione nella migrazione - eseguo il rollback ---');
ROLLBACK;
END;

--RESET VARIABILI LOCALI
id_modello_trasm := 0;
id_modello_mitt_dest := 0;
id_trasm := 0;
id_amm := 0;
nome := '';
cha_tipo_oggetto := '';
id_reg := 0;
var_note_generali := '';
id_people := 0;
idruolo_in_uo := 0;
cast_counter := '';

CLOSE c_modelli_trasm;

SAVEPOINT templdocgrigi;
END;                                                    --end 3 migrazione;

-------------------------------
DBMS_OUTPUT.put_line
('-- START MIGRAZIONE TEMPLATE DI TRASMISSIONE PER FASCICOLI IN AMMINISTRAZIONE -- '
);

DECLARE
CURSOR c_modelli_trasm (
id_trasm            INT,
id_amm              INT,
nome                VARCHAR,
cha_tipo_oggetto    VARCHAR,
var_note_generali   VARCHAR,
id_people           INT,
idruolo_in_uo      INT
)
IS
SELECT dt.system_id, p.id_amm, dtt.var_template,
dt.cha_tipo_oggetto, dt.var_note_generali, dt.id_people,
dt.id_ruolo_in_uo
FROM dpa_templ_trasm dtt, dpa_trasmissione dt, project p
WHERE dtt.id_trasmissione = dt.system_id
AND dt.id_project = p.system_id
AND p.cha_tipo_proj = 'F'
AND p.cha_tipo_fascicolo = 'P'
AND p.id_registro IS NULL;
BEGIN                                                         --4migrazione
OPEN c_modelli_trasm (id_trasm,
id_amm,
nome,
cha_tipo_oggetto,
var_note_generali,
id_people,
idruolo_in_uo
);

LOOP
FETCH c_modelli_trasm
INTO id_trasm, id_amm, nome, cha_tipo_oggetto, var_note_generali,
id_people, idruolo_in_uo;

EXIT WHEN c_modelli_trasm%NOTFOUND;

BEGIN
counter := counter + 1;

SELECT TO_CHAR (counter)
INTO cast_counter
FROM DUAL;

DBMS_OUTPUT.put_line (   cast_counter
|| ' - Migrazione Template Fascicolo: '
|| nome
);

--0. prelevo le info mancati
SELECT reg
INTO id_reg
FROM (SELECT der.system_id AS reg
FROM dpa_l_ruolo_reg dlrr, dpa_el_registri der
WHERE dlrr.id_ruolo_in_uo = idruolo_in_uo
AND dlrr.id_registro = der.system_id)
WHERE ROWNUM = 1;

--1. inserisco i dati attualizzati nella dpa_modelli_trasm
SELECT seq_dpa_modelli_trasm.NEXTVAL
INTO id_modello_trasm
FROM DUAL;

INSERT INTO dpa_modelli_trasm
(system_id, id_amm, nome, cha_tipo_oggetto,
id_registro, var_note_generali, id_people, SINGLE
)
VALUES (id_modello_trasm, id_amm, nome, cha_tipo_oggetto,
id_reg, var_note_generali, id_people, 0
);

--2.inserisco i dati del mittente del modello
--inserisco  i dati in tabella dpa_modelli_mitt_dest
SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp
)
VALUES (id_modello_mitt_dest, id_modello_trasm, 'M',
0, 0, '',
'', 'R'
);

--3. inserisco i dati dei destinatari
SELECT seq_dpa_modelli_mitt_dest.NEXTVAL
INTO id_modello_mitt_dest
FROM DUAL;

INSERT INTO dpa_modelli_mitt_dest
(system_id, id_modello, cha_tipo_mitt_dest,
id_corr_globali, id_ragione, cha_tipo_trasm,
var_note_sing, cha_tipo_urp)
SELECT id_modello_mitt_dest, id_modello_trasm, 'D',
dts.id_corr_globale, dts.id_ragione, dts.cha_tipo_trasm,
dts.var_note_sing, dts.cha_tipo_dest
FROM dpa_trasm_singola dts
WHERE id_trasmissione = id_trasm;

-- converto i valori del CHA_TIPO_DEST (U=UTENTE  in P=UTENTE )
UPDATE dpa_modelli_mitt_dest
SET cha_tipo_urp = 'P'
WHERE id_modello = id_modello_trasm
AND cha_tipo_urp = 'U'
AND cha_tipo_mitt_dest = 'D';
END;
END LOOP;
EXCEPTION
WHEN OTHERS
THEN
BEGIN
DBMS_OUTPUT.put_line
(' --- Eccezione nella migrazione - eseguo il rollback ---');
ROLLBACK;
END;

--RESET VARIABILI LOCALI
id_modello_trasm := 0;
id_modello_mitt_dest := 0;
id_trasm := 0;
id_amm := 0;
nome := '';
cha_tipo_oggetto := '';
id_reg := 0;
var_note_generali := '';
id_people := 0;
idruolo_in_uo := 0;
cast_counter := '';

CLOSE c_modelli_trasm;

SAVEPOINT templfascamm;
END;                                                          --4migrazione
END;                                                           -- END GENERALE
/

SHOW ERRORS;


--
-- CLEAR_SECURITY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".Clear_Security (
retValue OUT NUMBER) IS

/*
--------------------------------------------------------
Pulisce i record duplicati nella tabella SECURITY.
--------------------------------------------------------
*/

fc_THING NUMBER;
fc_PERSONORGROUP NUMBER;
fc_ACCESSRIGHTS NUMBER;
fc_COUNT NUMBER;

f_THING NUMBER;
f_PERSONORGROUP NUMBER;
f_ACCESSRIGHTS NUMBER;
f_ID_GRUPPO_TRASM NUMBER;
f_CHA_TIPO_DIRITTO CHAR(1);

ok_select NUMBER;
ok_delete NUMBER;
ok_insert NUMBER;

CURSOR cursor_A IS
SELECT /*+ index(SECURITY) */ DISTINCT
THING,PERSONORGROUP,COUNT(*)
FROM SECURITY
GROUP BY THING, PERSONORGROUP
HAVING COUNT(*) > 1;

BEGIN
retValue := 0;

OPEN cursor_A;
LOOP
FETCH cursor_A INTO fc_THING,fc_PERSONORGROUP,fc_COUNT;
EXIT WHEN cursor_A%NOTFOUND;

ok_select := 1;
ok_delete := 1;
ok_insert := 1;

BEGIN
-- MEMORIZZA IL RECORD CON ACCESSRIGHTS MAGGIORE
SELECT
THING, PERSONORGROUP, ACCESSRIGHTS, ID_GRUPPO_TRASM, CHA_TIPO_DIRITTO
INTO
f_THING,f_PERSONORGROUP,f_ACCESSRIGHTS,f_ID_GRUPPO_TRASM,f_CHA_TIPO_DIRITTO
FROM (
SELECT *
FROM SECURITY
WHERE thing = fc_THING
AND PERSONORGROUP = fc_PERSONORGROUP
ORDER BY ACCESSRIGHTS DESC, CHA_TIPO_DIRITTO DESC
)
WHERE ROWNUM = 1;
EXCEPTION
WHEN OTHERS THEN
ok_select := 0;
END;

IF ok_select = 1 THEN
BEGIN
-- ELIMINA TUTTI I RECORD
DELETE FROM SECURITY
WHERE THING = fc_THING AND PERSONORGROUP = fc_PERSONORGROUP;
EXCEPTION
WHEN OTHERS THEN
ok_delete := 0;
END;

IF ok_delete = 1 THEN
BEGIN
-- QUINDI INSERISCE IL RECORD MEMORIZZATO PRIMA
INSERT  INTO SECURITY
(THING, PERSONORGROUP, ACCESSRIGHTS, ID_GRUPPO_TRASM, CHA_TIPO_DIRITTO)
VALUES
(f_THING,f_PERSONORGROUP,f_ACCESSRIGHTS,f_ID_GRUPPO_TRASM,f_CHA_TIPO_DIRITTO);
EXCEPTION
WHEN OTHERS THEN
ok_insert := 0;
END;
END IF;

IF ok_select = 1 AND ok_delete = 1 AND ok_insert = 1 THEN
COMMIT;
ELSE
ROLLBACK;
retValue := 1;
RETURN;
END IF;

END IF;

END LOOP;
CLOSE cursor_A;

END;
/

SHOW ERRORS;


--
-- CARICA_DPA_REG_FASC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_DPA_REG_FASC IS
BEGIN
DECLARE
sysRegistro number; -- systemId del registro
sysTitolario number;
sysRegistroNodoTit number;
Identity NUMBER;
countFasc NUMBER;

CURSOR currAmm IS
select system_id
from dpa_amministra ORDER BY system_id DESC;

CURSOR currTit(n_id_amm NUMBER) IS
select system_id, id_registro
from PROJECT
WHERE CHA_TIPO_PROJ = 'T'
AND ID_AMM = n_id_amm;

CURSOR currReg(n_id_amm NUMBER) IS
select system_id
from DPA_EL_REGISTRI
WHERE ID_AMM = n_id_amm and cha_rf = '0';

BEGIN
FOR currentAmm in currAmm
LOOP
FOR currentTit in currTit(currentAmm.system_id) LOOP

BEGIN

-- si il modo di titolario ha id_registro NULL allora nella tabella dpa_reg_fasc
--dovranno essere inseriti tanti record quanti sono i registri contentuti nella dpa_el_registri

IF currentTit.ID_REGISTRO IS NULL THEN

BEGIN

FOR currentReg in currReg(currentAmm.system_id) LOOP

SELECT MAX(NUM_FASCICOLO) INTO countFasc
FROM PROJECT WHERE ID_PARENT = currentTit.system_id and cha_tipo_fascicolo = 'P'
and anno_creazione = TO_CHAR(SYSDATE, 'yyyy') and id_registro = currentReg.SYSTEM_ID;

IF countFasc IS NULL THEN
countFasc := 0;
END IF;

INSERT INTO DPA_REG_FASC
(
SYSTEM_ID,
ID_TITOLARIO,
ID_REGISTRO,
NUM_RIF

)
VALUES
(
seq.NEXTVAL,
currentTit.system_id,
currentReg.SYSTEM_ID,
countFasc+1 -- QUI  mettiamo il MAX (NUM FASCICOLO) - dafault a 0 per il pregresso

);

END LOOP;


-- CASO DEL REGISTRO NULL
SELECT MAX(NUM_FASCICOLO) INTO countFasc
FROM PROJECT WHERE ID_PARENT = currentTit.system_id and cha_tipo_fascicolo = 'P'
and anno_creazione = TO_CHAR(SYSDATE, 'yyyy') and id_registro IS NULL;

IF countFasc IS NULL THEN
countFasc := 0;
END IF;

INSERT INTO DPA_REG_FASC
(
SYSTEM_ID,
ID_TITOLARIO,
ID_REGISTRO,
NUM_RIF

)
VALUES
(
seq.NEXTVAL,
currentTit.system_id,
NULL,
countFasc+1 -- QUI mettiamo IL MAX (NUM FASCICOLO)

);

END;


ELSE  -- SE IL NODO ? ASSOCIATO AD UN SOLO REGISTRO

BEGIN
SELECT MAX(NUM_FASCICOLO) INTO countFasc
FROM PROJECT WHERE ID_PARENT = currentTit.system_id and cha_tipo_fascicolo = 'P'
and anno_creazione = TO_CHAR(SYSDATE, 'yyyy') and id_registro = currentTit.id_registro;

IF countFasc IS NULL THEN
countFasc := 0;
END IF;

INSERT INTO DPA_REG_FASC
(
SYSTEM_ID,
ID_TITOLARIO,
ID_REGISTRO,
NUM_RIF

)
VALUES
(
seq.NEXTVAL,
currentTit.system_id,
currentTit.id_registro,
countFasc+1
);
END;
END IF;
END;
END LOOP;

END LOOP;
commit;
END;
END;
/

SHOW ERRORS;


--
-- CREATE_NEW_NODO_TITOLARIO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CREATE_NEW_NODO_TITOLARIO(p_idAmm number, p_livelloNodo number,
p_description varchar2, p_codiceNodo varchar2, p_idRegistroNodo number, p_idParent number,
p_varCodLiv1 varchar2, p_mesiConservazione number, p_chaRW char, p_idTipoFascicolo number, p_bloccaFascicolo varchar2, p_sysIdTitolario number, p_noteNodo varchar, p_idTitolario OUT number) IS
BEGIN
DECLARE CURSOR currReg IS
select system_id
from DPA_EL_REGISTRI
WHERE ID_AMM = p_idAmm and cha_rf = '0';

secProj NUMBER;
secFasc NUMBER;
secRoot NUMBER;
varChiaveTit varchar2(64);
varChiaveFasc varchar2(64);
varChiaveRoot varchar2(64);
BEGIN
p_idTitolario:=0;

SELECT SEQ.NEXTVAL INTO secProj FROM DUAL;
p_idTitolario:= secProj;

if(p_idRegistroNodo IS NULL or p_idRegistroNodo = '') then
varChiaveTit:= p_idamm ||'_'|| p_codiceNodo || '_' || p_idParent || '_0' ;
else
varChiaveTit:= p_codiceNodo || '_' || p_idParent || '_'  || p_idRegistroNodo;
end if;

BEGIN

INSERT INTO PROJECT
(
SYSTEM_ID,
DESCRIPTION,
ICONIZED,
CHA_TIPO_PROJ,
VAR_CODICE,
ID_AMM,
ID_REGISTRO,
NUM_LIVELLO,
CHA_TIPO_FASCICOLO,
ID_PARENT,
VAR_COD_LIV1,
DTA_APERTURA,
CHA_STATO,
ID_FASCICOLO,
CHA_RW,
NUM_MESI_CONSERVAZIONE,
VAR_CHIAVE_FASC,
ID_TIPO_FASC,
CHA_BLOCCA_FASC,
ID_TITOLARIO,
DTA_CREAZIONE,
VAR_NOTE
)
VALUES
(
secProj,
p_description,
'Y',
'T',
p_codiceNodo,
p_idAmm,
p_idRegistroNodo,
p_livelloNodo,
NULL,
p_idParent,
p_varCodLiv1,
sysdate ,
NULL,
NULL,
p_chaRW,
p_mesiConservazione,
varChiaveTit,
p_idTipoFascicolo,
p_bloccaFascicolo,
p_sysIdTitolario,
sysdate,
p_noteNodo
);


EXCEPTION
WHEN OTHERS THEN  p_idTitolario:=0;
RETURN;

END;

BEGIN

SELECT SEQ.NEXTVAL INTO secFasc FROM DUAL;

if(p_idRegistroNodo IS NULL or p_idRegistroNodo = '') then
varChiaveFasc:= p_codiceNodo || '_' || p_idTitolario || '_0' ;
else
varChiaveFasc:= p_codiceNodo || '_' || p_idTitolario || '_'  || p_idRegistroNodo;
end if;

INSERT INTO PROJECT
(
SYSTEM_ID,
DESCRIPTION,
ICONIZED,
CHA_TIPO_PROJ,
VAR_CODICE,
ID_AMM,
ID_REGISTRO,
NUM_LIVELLO,
CHA_TIPO_FASCICOLO,
ID_PARENT,
VAR_COD_LIV1,
DTA_APERTURA,
CHA_STATO,
ID_FASCICOLO,
CHA_RW,
NUM_MESI_CONSERVAZIONE,
VAR_CHIAVE_FASC,
ID_TIPO_FASC,
CHA_BLOCCA_FASC,
ID_TITOLARIO,
DTA_CREAZIONE,
VAR_NOTE
)
VALUES
(
secFasc,
p_description,
'Y',
'F',
p_codiceNodo,
P_idAmm,
p_idRegistroNodo,
NULL,
'G',
p_idTitolario,
NULL,
sysdate ,
'A',
NULL,
p_chaRW,
p_mesiConservazione,
varChiaveFasc,
p_idTipoFascicolo,
p_bloccaFascicolo,
p_sysIdTitolario,
sysdate,
p_noteNodo
);

EXCEPTION
WHEN OTHERS THEN  p_idTitolario:=0;
RETURN;
END;


BEGIN


if(p_idRegistroNodo IS NULL or p_idRegistroNodo = '') then
varChiaveRoot:= p_codiceNodo || '_' || secFasc || '_0' ;
else
varChiaveRoot:= p_codiceNodo || '_' || secFasc || '_'  || p_idRegistroNodo;
end if;

SELECT SEQ.NEXTVAL INTO secRoot FROM DUAL;

INSERT INTO PROJECT
(
SYSTEM_ID,
DESCRIPTION,
ICONIZED,
CHA_TIPO_PROJ,
VAR_CODICE,
ID_AMM,
ID_REGISTRO,
NUM_LIVELLO,
CHA_TIPO_FASCICOLO,
ID_PARENT,
VAR_COD_LIV1,
DTA_APERTURA,
CHA_STATO,
ID_FASCICOLO,
CHA_RW,
NUM_MESI_CONSERVAZIONE,
VAR_CHIAVE_FASC,
ID_TIPO_FASC,
CHA_BLOCCA_FASC,
ID_TITOLARIO,
DTA_CREAZIONE,
VAR_NOTE
)
VALUES
(
secRoot,
'Root Folder',
'Y',
'C',
NULL,
p_idAmm,
NULL,
NULL,
NULL,
secFasc,
NULL,
sysDate,
NULL,
secFasc,
p_chaRW,
p_mesiConservazione,
varChiaveRoot,
p_idTipoFascicolo,
p_bloccaFascicolo,
p_sysIdTitolario,
sysdate,
p_noteNodo
);
EXCEPTION
WHEN OTHERS THEN  p_idTitolario:=0;
RETURN;
END;

-- SE IL NODO HA REGISTRO NULL ALLORA DEVONO ESSERE CREATI TANTI RECORD NELLA
-- DPA_REG_FASC QUANTI SONO I REGISTRI INTERNI ALL'AMMINISTRAZIONE
IF(p_idRegistroNodo IS NULL or p_idRegistroNodo = '') THEN
FOR currentReg IN currReg
LOOP
BEGIN
INSERT INTO DPA_REG_FASC
(
system_id,
id_Titolario,
num_rif,
id_registro
)
VALUES
(
seq.nextval,
p_idTitolario,
1,
currentReg.system_id
);
EXCEPTION
WHEN OTHERS THEN  p_idTitolario:=0;
RETURN;
END;
END LOOP;

-- inoltre bisogna inserire un record nella dpa_reg_Fasc relativo al registro null
-- per tutte quelle amministrazioni che non hanno abilitata la funzione di fascicolazione
--multi registro
insert into dpa_reg_fasc
(
system_id,
id_Titolario,
num_rif,
id_registro
)
values
(
seq.nextval,
p_idTitolario,
1,
NULL	-- SE IL NODO ? COMUNE A TUTTI p_idRegistro = NULL
);

ELSE -- il nodo creato ? associato a uno solo registro

BEGIN
insert into dpa_reg_fasc
(
system_id,
id_Titolario,
num_rif,
id_registro
)
values
(
seq.nextval,
p_idTitolario,
1,
p_idRegistroNodo	-- REGISTRO SU CUI ? CRETO IL NODO
);
EXCEPTION
WHEN OTHERS THEN  p_idTitolario:=0;
RETURN;
END;
END IF;
end;

END CREATE_NEW_NODO_TITOLARIO;
/

SHOW ERRORS;


--
-- CREATEPROJECTSP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".createProjectSP(p_idpeople number, p_description varchar, p_projectId OUT number)
is

BEGIN

DECLARE
projId  number;


BEGIN

p_projectId:=0;

SELECT SEQ.NEXTVAL INTO projId FROM DUAL;

p_projectId:= projId;

<<INSERIMENTO_IN_PROJECT>>
BEGIN
INSERT INTO PROJECT
(
SYSTEM_ID,
DESCRIPTION,
ICONIZED
)
VALUES
(
p_projectId,
p_description,
'Y'
);
EXCEPTION
WHEN OTHERS THEN  p_projectId:=0;
RETURN;

END INSERIMENTO_IN_PROJECT;

<<INSERIMENTO_SECURITY>>
BEGIN
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
) VALUES (
p_projectId, p_idpeople, 0, NULL, NULL
)	;
EXCEPTION
WHEN OTHERS THEN p_projectId:=0;
return;
END INSERIMENTO_SECURITY;

END;

END;
/

SHOW ERRORS;


--
-- ADD_REGISTRO_IN_DPA_REG_FASC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".ADD_REGISTRO_IN_DPA_REG_FASC(p_newIdRegistro number, p_id_amm number, p_result OUT integer) IS
BEGIN
DECLARE


CURSOR currTit IS
SELECT system_id
FROM project
WHERE ID_AMM = p_id_amm
AND CHA_TIPO_PROJ= 'T' AND ID_REGISTRO IS NULL;
BEGIN
-- SE IL NODO HA REGISTRO NULL ALLORA DEVONO ESSERE CREATI TANTI RECORD NELLA
-- DPA_REG_FASC QUANTI SONO I REGISTRI INTERNI ALL'AMMINISTRAZIONE
p_result:=0;
FOR currentTit IN currTit
LOOP
begin

INSERT INTO DPA_REG_FASC
(
system_id,
id_titolario,
num_rif,
id_registro
)
VALUES
(
seq.nextval,
currentTit.system_id,
1,
p_newIdRegistro
);

EXCEPTION
WHEN OTHERS THEN
p_result := 1;
RETURN;
end;

END LOOP;

end;


END ADD_REGISTRO_IN_DPA_REG_FASC;
/

SHOW ERRORS;


--
-- SPSETDATAVISTASMISTAMENTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SPsetDataVistaSmistamento(
p_idPeople IN NUMBER,
p_idOggetto IN NUMBER,
p_idGruppo IN NUMBER,
p_tipoOggetto IN CHAR,
p_idTrasmissione IN NUMBER,
p_resultValue OUT number
) IS

/*
----------------------------------------------------------------------------------------
dpa_trasm_singola.cha_tipo_trasm = 'S''
-  se DPA_RAGIONE_TRASM.cha_tipo_ragione = 'N' OR  DPA_RAGIONE_TRASM.cha_tipo_ragione= 'I''
(ovvero senza WorkFlow): se accetta un utene in un ruolo sparisce a tutti nella ToDoList
-  se DPA_RAGIONE_TRASM.cha_tipo_ragione = 'W' : non deve sparire a nessuno, si setta solo la dta_vista
relativa all'utente corrente

dpa_trasm_singola.cha_tipo_trasm = 'T''
-  se DPA_RAGIONE_TRASM.cha_tipo_ragione = 'N' OR  DPA_RAGIONE_TRASM.cha_tipo_ragione = 'I''
(ovvero senza WorkFlow): se accetta un utene in un ruolo deve sparire solo all'utente che accetta, non a tutti
-  se DPA_RAGIONE_TRASM.cha_tipo_ragione = 'W' : non deve sparire a nessuno, si setta solo la dta_vista
relativa all'utente corrente

*/

p_cha_tipo_trasm CHAR(1) := NULL;
p_chaTipoDest NUMBER;


BEGIN
p_resultValue:=0;


DECLARE

CURSOR cursorTrasmSingolaDocumento IS

SELECT B.system_id, b.cha_tipo_trasm, c.cha_tipo_ragione, b.cha_tipo_dest
FROM dpa_trasmissione a, dpa_trasm_singola b,  DPA_RAGIONE_TRASM c
WHERE a.system_id = p_idTrasmissione and a.dta_invio is not null and a.system_id = b.id_trasmissione and (b.id_corr_globale =
(select system_id from dpa_corr_globali where id_gruppo = p_idGruppo)
OR b.id_corr_globale =
(SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_people = p_idPeople))
AND a.ID_PROFILE = p_idOggetto and
b.ID_RAGIONE = c.SYSTEM_ID;


BEGIN


IF(p_tipoOggetto='D') THEN

FOR currentTrasmSingola IN cursorTrasmSingolaDocumento
LOOP
BEGIN

IF (currentTrasmSingola.cha_tipo_ragione = 'N' OR currentTrasmSingola.cha_tipo_ragione = 'I') then
-- SE ¿ una trasmissione senza workFlow
begin

-- nella trasmissione utente relativa all'utente che sta vedendo il documento
-- setto la data di vista

UPDATE DPA_TRASM_UTENTE
SET DPA_TRASM_UTENTE.CHA_VISTA = '1',
DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  SYSDATE ELSE DTA_VISTA END),
DPA_TRASM_UTENTE.CHA_IN_TODOLIST = '0'
WHERE
DPA_TRASM_UTENTE.DTA_VISTA IS NULL
AND id_trasm_singola = (currentTrasmSingola.SYSTEM_ID)
and DPA_TRASM_UTENTE.ID_PEOPLE = p_idPeople;

EXCEPTION
WHEN OTHERS THEN  p_resultValue:=1;
RETURN;
end;

begin

IF (currentTrasmSingola.cha_tipo_trasm = 'S' and currentTrasmSingola.cha_tipo_dest= 'R') then
-- se ¿ una trasmissione ¿ di tipo SINGOLA a un RUOLO allora devo aggiornare
-- anche le trasmissioni singole relative agli altri utenti del ruolo
begin
-- nelle trasmissioni utente relative agli altri utenti del ruolo
-- non si setta la data di vista ma si eliminano semplicemente dalla ToDoList

UPDATE DPA_TRASM_UTENTE SET
DPA_TRASM_UTENTE.CHA_VISTA = '1',
DPA_TRASM_UTENTE.CHA_IN_TODOLIST = '0'
WHERE
DPA_TRASM_UTENTE.DTA_VISTA IS NULL
AND id_trasm_singola = (currentTrasmSingola.SYSTEM_ID)
AND DPA_TRASM_UTENTE.ID_PEOPLE != p_idPeople;

EXCEPTION
WHEN OTHERS THEN  p_resultValue:=1;
RETURN;
end;

end if;
end;
ELSE

BEGIN
-- la ragione di trasmissione prevede workflow
BEGIN

UPDATE DPA_TRASM_UTENTE
SET DPA_TRASM_UTENTE.CHA_VISTA = '1',
DPA_TRASM_UTENTE.DTA_VISTA = (CASE WHEN DTA_VISTA IS NULL THEN  sysdate ELSE DTA_VISTA END),
DTA_ACCETTATA = (CASE WHEN DTA_ACCETTATA IS NULL THEN  sysdate ELSE DTA_ACCETTATA END),
CHA_ACCETTATA = '1', CHA_IN_TODOLIST = '0'

WHERE
DPA_TRASM_UTENTE.CHA_ACCETTATA = '0'
AND id_trasm_singola = currentTrasmSingola.SYSTEM_ID
and DPA_TRASM_UTENTE.ID_PEOPLE = p_idPeople;

EXCEPTION
WHEN OTHERS THEN  p_resultValue:=1;
RETURN;

END;

BEGIN
-- se la trasm ¿ con WorkFlow ed ¿ di tipo UNO e il dest ¿ Ruolo allora levo la validit¿ della
-- trasmissione a tutti gli altri utenti del ruolo
IF (currentTrasmSingola.cha_tipo_trasm = 'S' and currentTrasmSingola.cha_tipo_dest= 'R') THEN

begin
UPDATE DPA_TRASM_UTENTE SET
DPA_TRASM_UTENTE.CHA_VALIDA= '0',
DPA_TRASM_UTENTE.CHA_IN_TODOLIST = '0'
WHERE
-- DPA_TRASM_UTENTE.DTA_VISTA IS NULL
id_trasm_singola =  currentTrasmSingola.SYSTEM_ID
AND DPA_TRASM_UTENTE.ID_PEOPLE !=p_idPeople;

EXCEPTION
WHEN OTHERS THEN  p_resultValue:=1;
RETURN;


end;
END IF;
END;

END;

END IF;

END;

END LOOP;
END IF;


END;
END SPsetDataVistaSmistamento;
/

SHOW ERRORS;


--
-- I_SMISTAMENTO_SMISTADOC_U  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".I_Smistamento_Smistadoc_U(
IDPeopleMittente IN NUMBER,
IDCorrGlobaleRuoloMittente IN NUMBER,
IDGruppoMittente IN NUMBER,
IDAmministrazioneMittente IN NUMBER,
IDCorrGlobaleDestinatario IN NUMBER,
IDDocumento IN NUMBER,
IDTrasmissione IN NUMBER,
IDTrasmissioneUtenteMittente IN NUMBER,
TrasmissioneConWorkflow IN CHAR,
NoteGeneraliDocumento IN VARCHAR2,
NoteIndividuali IN VARCHAR2,
DataScadenza IN DATE,
TipoTrasmissione IN CHAR,
TipoDiritto IN CHAR,
Rights IN NUMBER,
OriginalRights IN NUMBER,
IDRagioneTrasm IN NUMBER,
returnvalue OUT NUMBER) IS

/*
-------------------------------------------------------------------------------------------------------
-- SP per la gestione delle trasmissioni nello smistamento.
--
-- Valori di ritorno gestiti:
-- 0: Operazione andata a buon fine
-- -2: Non  stato inserito il RECORD IN tabella DPA_TRASMISSIONI
-- -3: Non  stato inserito il RECORD IN tabella DPA_TRASM_SINGOLE
-- -4: Non  stato inserito il RECORD IN tabella DPA_TRASM_UTENTE
-------------------------------------------------------------------------------------------------------
*/

IdentityTrasm NUMBER := NULL;
SysTrasmSing NUMBER := NULL;

ExistAccessRights CHAR(1) := 'Y';
AccessRights NUMBER:= NULL;
accessRightsValue NUMBER := NULL;

IDUtente NUMBER;
recordCorrente NUMBER;

IDGroups NUMBER := NULL;
IDGruppo NUMBER;
resultValue number;

TipoTrasmSingola CHAR(1) := NULL;


BEGIN

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasm FROM dual;
END;

BEGIN
SELECT seq.NEXTVAL INTO SysTrasmSing FROM dual;
END;

BEGIN
/* Inserimento in tabella DPA_TRASMISSIONE */
INSERT INTO DPA_TRASMISSIONE
(
SYSTEM_ID,
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
IdentityTrasm,
IDCorrGlobaleRuoloMittente,
IDPeopleMittente,
'D',
IDDocumento,
NULL,
SYSDATE(),
NoteGeneraliDocumento
);

EXCEPTION
WHEN OTHERS THEN  returnvalue := -2 ;
RETURN;
END;

BEGIN
/* Inserimento in tabella DPA_TRASM_SINGOLA */
INSERT INTO DPA_TRASM_SINGOLA
(
SYSTEM_ID,
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
VAR_NOTE_SING,
CHA_TIPO_TRASM,
DTA_SCADENZA,
ID_TRASM_UTENTE
)
VALUES
(
SysTrasmSing,
IDRagioneTrasm,
IdentityTrasm,
'R',
IDCorrGlobaleDestinatario,
NoteIndividuali,
TipoTrasmissione,
DataScadenza,
NULL
);

returnvalue := SysTrasmSing;

EXCEPTION
WHEN OTHERS THEN  returnvalue:= -3 ;
RETURN;

END;


-- Verifica se non vi sia gi una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
-- 1) se ACCESSRIGHT < Rights
--    viene fatto un'aggiornamento impostandone il valore a Rights
-- 2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = Rights
BEGIN
SELECT A.ID_GRUPPO INTO IDGroups
FROM DPA_CORR_GLOBALI A
WHERE A.SYSTEM_ID = IDCorrGlobaleDestinatario;
END;

IDGruppo := IDGroups;

BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT  ACCESSRIGHTS
FROM  SECURITY
WHERE  THING = IDDocumento
AND
PERSONORGROUP = IDGruppo
) WHERE ROWNUM = 1;

EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;

IF accessRightsValue < Rights THEN

BEGIN
/* aggiornamento a Rights */
UPDATE  SECURITY
SET  ACCESSRIGHTS = Rights
WHERE  THING = IDDocumento
AND
PERSONORGROUP = IDGruppo
AND ACCESSRIGHTS = accessRightsValue;

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;

END IF;

ELSE

BEGIN
/* inserimento a Rights */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
IDGruppo,
Rights,
IDGruppoMittente,
TipoDiritto
);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;

END IF;

/* Aggiornamento trasmissione del mittente */
IF TrasmissioneConWorkflow = '1' THEN
BEGIN
UPDATE  DPA_TRASM_UTENTE
SET
dta_vista = (case when dta_vista is null then sysdate else dta_vista end),
cha_vista  =  (case when dta_vista is null  then 1 else 0 end),
DTA_ACCETTATA = SYSDATE(),
CHA_ACCETTATA = '1',
VAR_NOTE_ACC = 'Documento accettato e smistato',
CHA_IN_TODOLIST = '0'
WHERE (SYSTEM_ID = IDTrasmissioneUtenteMittente
OR
SYSTEM_ID = (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
AND TS.CHA_TIPO_DEST= 'U')
)
AND CHA_VALIDA='1';

--update security se diritti è trasmssione in accettazione =20

UPDATE SECURITY S SET  S.ACCESSRIGHTS=OriginalRights,S.CHA_TIPO_DIRITTO='T'
WHERE S.PERSONORGROUP IN (IDPeopleMittente,IDGruppoMittente)
AND S.ACCESSRIGHTS=20;

END;

ELSE

BEGIN

SPsetDataVistaSmistamento (IDPeopleMittente, IDDocumento, IDGruppoMittente, 'D', IDTrasmissione , resultValue);

IF(resultValue=1) THEN

ReturnValue:= -4;
return ;

END IF;

END;

END IF;

/* verifica se la trasmissione singola  destinata a: "Tutti" (T) o a "Uno" (S) */
BEGIN
select * INTO TipoTrasmSingola from (
SELECT A.CHA_TIPO_TRASM
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE= IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =IDTrasmissioneUtenteMittente))
ORDER BY CHA_TIPO_DEST) where rownum = 1;
END;

IF TipoTrasmSingola = 'S' AND TrasmissioneConWorkflow = '1' THEN
/* se la trasmissione era destinata a SINGOLO, allora toglie la validit della trasmissione a tutti gli altri utenti del ruolo (tranne a quella del mittente) */
BEGIN
UPDATE  DPA_TRASM_UTENTE
SET  CHA_VALIDA = '0', cha_in_todolist = '0'
WHERE ID_TRASM_SINGOLA IN
(SELECT A.SYSTEM_ID
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =IDTrasmissioneUtenteMittente)))
AND SYSTEM_ID NOT IN( IDTrasmissioneUtenteMittente);

END;
END IF;

END;
/

SHOW ERRORS;


--
-- CARICA_FORMATO_DOCUMENTI  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_Formato_documenti IS

CURSOR currAmm IS
select system_id
from dpa_amministra ORDER BY system_id DESC;


BEGIN
FOR currentAmm in currAmm
LOOP

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='PDF');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES (seq.nextval, currentAmm.system_id, 1, 'Adobe Acrobat', 'PDF', 0, 2, 0, 0);
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='TXT');
IF ( cnt != 0 ) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	(seq.nextval, currentAmm.system_id, 1, 'File di testo', 'TXT', 0, 2, 0, 0);
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='P7M');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	(seq.nextval, currentAmm.system_id, 1, 'File firmati digitalmente', 'P7M', 0,	2, 	0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='BMP');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval, currentAmm.system_id, 1, 'Immagine Bitmap', 'BMP', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='JPG');
IF (cnt != 0)
THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval, currentAmm.system_id, 1, 'Immagine JPG', 'JPG', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='TIF');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval, currentAmm.system_id, 1, 'Immagine TIF', 'TIF', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='TIFF');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval, currentAmm.system_id, 1, 'Immagine TIFF', 'TIFF', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='PPT');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	(  seq.nextval, currentAmm.system_id, 1, 'Microsoft PowerPoint', 'PPT', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='DOC');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	(  seq.nextval,currentAmm.system_id, 1, 'Microsoft Word', 'DOC', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='XLS');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (	SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	(  seq.nextval, currentAmm.system_id, 1, 'Microsoft Excel',  'XLS', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='RTF');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (	SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval, currentAmm.system_id, 1, 'Rich Text Format', 'RTF', 0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='HTM');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (	SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval,currentAmm.system_id, 1, 'Web Publishing Browser (htm)', 'HTM',	0, 2, 0, 0 );
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FORMATI_DOCUMENTO WHERE (FILE_EXTENSION='HTML');
IF (cnt != 0) THEN
INSERT INTO DPA_FORMATI_DOCUMENTO (	SYSTEM_ID, ID_AMMINISTRAZIONE, FILE_TYPE_USED, DESCRIPTION, FILE_EXTENSION, MAX_FILE_SIZE, MAX_FILE_SIZE_ALERT_MODE, CONTAINS_FILE_MODEL, DOCUMENT_TYPE)
VALUES	( seq.nextval, currentAmm.system_id, 1, 'Web Publishing Browser (html)', 'HTML', 0, 2, 0, 0 );
END IF;
END;

END;






END LOOP;
commit;

END;
/

SHOW ERRORS;


--
-- ADDNUOVAVERSIONE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".addNuovaVersione
(p_subVersion  VARCHAR2,
p_idPeople NUMBER,
p_docNumber NUMBER,
p_descrizione VARCHAR2,
p_cartaceo INTEGER,
p_versionID OUT NUMBER)

IS

identityVersion NUMBER;
p_version NUMBER;

BEGIN

select VERSION INTO p_version from (
SELECT VERSION
FROM VERSIONS
WHERE DOCNUMBER = p_docNumber
ORDER BY VERSION DESC)
where rownum = 1;

p_version:=p_version+1;

SELECT SEQ.NEXTVAL INTO identityVersion FROM DUAL;

p_versionID := identityVersion ;

BEGIN

INSERT INTO VERSIONS
(
VERSION_ID,
DOCNUMBER,
VERSION,
SUBVERSION,
VERSION_LABEL,
AUTHOR,
TYPIST,
DTA_CREAZIONE,
COMMENTS,
CARTACEO
)
VALUES
(
p_versionID,
p_docNumber,
p_version,
p_subVersion,
p_version,
p_idPeople,
p_idPeople,
sysdate,
p_descrizione,
p_cartaceo
);
EXCEPTION
WHEN OTHERS THEN p_versionID:=0;

END;

BEGIN

INSERT INTO COMPONENTS
(
VERSION_ID,
DOCNUMBER,
FILE_SIZE
)
VALUES
(
p_versionID,
p_docNumber,
0
);
EXCEPTION
WHEN OTHERS THEN p_versionID:=0;


END;

END addNuovaVersione;
/

SHOW ERRORS;

CREATE OR REPLACE PROCEDURE "@db_user".SPsetDataVista(
   p_idpeople      IN       NUMBER,
   p_idoggetto     IN       NUMBER,
   p_idgruppo      IN       NUMBER,
   p_tipooggetto   IN       CHAR,
   p_iddelegato    IN       NUMBER,
   p_resultvalue   OUT      NUMBER
)
IS
 p_cha_tipo_trasm   CHAR (1) := NULL;
   p_chatipodest      NUMBER;
BEGIN
   p_resultvalue := 0;

   DECLARE
      CURSOR cursortrasmsingoladocumento
      IS
         SELECT b.system_id, b.cha_tipo_trasm, c.cha_tipo_ragione,
                b.cha_tipo_dest
           FROM dpa_trasmissione a, dpa_trasm_singola b, dpa_ragione_trasm c
          WHERE a.dta_invio IS NOT NULL
            AND a.system_id = b.id_trasmissione
            AND (   b.id_corr_globale = (SELECT system_id
                                           FROM dpa_corr_globali
                                          WHERE id_gruppo = p_idgruppo)
                 OR b.id_corr_globale = (SELECT system_id
                                           FROM dpa_corr_globali
                                          WHERE id_people = p_idpeople)
                )
            AND a.id_profile = p_idoggetto
            AND b.id_ragione = c.system_id;

      CURSOR cursortrasmsingolafascicolo
      IS
         SELECT b.system_id, b.cha_tipo_trasm, c.cha_tipo_ragione,
                b.cha_tipo_dest
           FROM dpa_trasmissione a, dpa_trasm_singola b, dpa_ragione_trasm c
          WHERE a.dta_invio IS NOT NULL
            AND a.system_id = b.id_trasmissione
            AND (   b.id_corr_globale = (SELECT system_id
                                           FROM dpa_corr_globali
                                          WHERE id_gruppo = p_idgruppo)
                 OR b.id_corr_globale = (SELECT system_id
                                           FROM dpa_corr_globali
                                          WHERE id_people = p_idpeople)
                )
            AND a.id_project = p_idoggetto
            AND b.id_ragione = c.system_id;
   BEGIN
      IF (p_tipooggetto = 'D')
      THEN
         FOR currenttrasmsingola IN cursortrasmsingoladocumento
         LOOP
            BEGIN
               IF (   currenttrasmsingola.cha_tipo_ragione = 'N'
                   OR currenttrasmsingola.cha_tipo_ragione = 'I'
                  )
               THEN
                  BEGIN
                     UPDATE dpa_trasm_utente
                        SET dpa_trasm_utente.cha_vista = '1',
                            dpa_trasm_utente.dta_vista =
                               (CASE
                                   WHEN dta_vista IS NULL
                                      THEN SYSDATE
                                   ELSE dta_vista
                                END
                               ),
                            dpa_trasm_utente.cha_in_todolist = '0'
                      WHERE dpa_trasm_utente.dta_vista IS NULL
                        AND id_trasm_singola =
                                              (currenttrasmsingola.system_id
                                              )
                        AND dpa_trasm_utente.id_people = p_idpeople;

                     UPDATE dpa_todolist
                        SET dta_vista = SYSDATE
                      WHERE id_trasm_singola = currenttrasmsingola.system_id
                        AND id_people_dest =
                               p_idpeople
                                         --and ID_RUOLO_DEST in (p_idGruppo,0)
                        AND id_profile = p_idoggetto;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        p_resultvalue := 1;
                        RETURN;
                  END;

                  BEGIN
                     IF (    currenttrasmsingola.cha_tipo_trasm = 'S'
                         AND currenttrasmsingola.cha_tipo_dest = 'R'
                        )
                     THEN
                        BEGIN
                           UPDATE dpa_trasm_utente
                              SET dpa_trasm_utente.cha_vista = '1',
                                  dpa_trasm_utente.cha_in_todolist = '0'
                            WHERE dpa_trasm_utente.dta_vista IS NULL
                              AND id_trasm_singola =
                                              (currenttrasmsingola.system_id
                                              )
                              AND dpa_trasm_utente.id_people != p_idpeople;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              p_resultvalue := 1;
                              RETURN;
                        END;
                     END IF;
                  END;
               ELSE
                  BEGIN
                     UPDATE dpa_trasm_utente
                        SET dpa_trasm_utente.cha_vista = '1',
                            dpa_trasm_utente.dta_vista =
                               (CASE
                                   WHEN dta_vista IS NULL
                                      THEN SYSDATE
                                   ELSE dta_vista
                                END
                               )
                      WHERE dpa_trasm_utente.dta_vista IS NULL
                        AND id_trasm_singola =
                                              (currenttrasmsingola.system_id
                                              )
                        AND dpa_trasm_utente.id_people = p_idpeople;
                     
                     UPDATE     dpa_trasm_utente
                     SET        cha_in_todolist = '0'
                     WHERE      id_trasm_singola = currenttrasmsingola.system_id 
                            AND NOT  dpa_trasm_utente.dta_vista IS NULL
                            AND (cha_accettata = '1' OR cha_rifiutata = '1')
                            AND dpa_trasm_utente.id_people = p_idpeople;

                     UPDATE dpa_todolist
                        SET dta_vista = SYSDATE
                      WHERE id_trasm_singola = currenttrasmsingola.system_id
                        AND id_people_dest =
                               p_idpeople
                        AND id_profile = p_idoggetto;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        p_resultvalue := 1;
                        RETURN;
                  END;
               END IF;
            END;
         END LOOP;
      END IF;

      IF (p_tipooggetto = 'F')
      THEN
         FOR currenttrasmsingola IN cursortrasmsingolafascicolo
         LOOP
            BEGIN
               IF (   currenttrasmsingola.cha_tipo_ragione = 'N'
                   OR currenttrasmsingola.cha_tipo_ragione = 'I'
                  )
               THEN
                  BEGIN
                     UPDATE dpa_trasm_utente
                        SET dpa_trasm_utente.cha_vista = '1',
                            dpa_trasm_utente.dta_vista =
                               (CASE
                                   WHEN dta_vista IS NULL
                                      THEN SYSDATE
                                   ELSE dta_vista
                                END
                               ),
                            dpa_trasm_utente.cha_in_todolist = '0'
                      WHERE dpa_trasm_utente.dta_vista IS NULL
                        AND id_trasm_singola =
                                              (currenttrasmsingola.system_id
                                              )
                        AND dpa_trasm_utente.id_people = p_idpeople;

                     UPDATE dpa_todolist
                        SET dta_vista = SYSDATE
                      WHERE id_trasm_singola = currenttrasmsingola.system_id
                        AND id_people_dest =
                               p_idpeople
                        AND id_project = p_idoggetto;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        p_resultvalue := 1;
                        RETURN;
                  END;

                  BEGIN
                     IF (    currenttrasmsingola.cha_tipo_trasm = 'S'
                         AND currenttrasmsingola.cha_tipo_dest = 'R'
                        )
                     THEN
                        BEGIN
                           UPDATE dpa_trasm_utente
                              SET dpa_trasm_utente.cha_vista = '1',
                                  dpa_trasm_utente.cha_in_todolist = '0'
                            WHERE dpa_trasm_utente.dta_vista IS NULL
                              AND id_trasm_singola =
                                              (currenttrasmsingola.system_id
                                              )
                              AND dpa_trasm_utente.id_people != p_idpeople;
                        EXCEPTION
                           WHEN OTHERS
                           THEN
                              p_resultvalue := 1;
                              RETURN;
                        END;
                     END IF;
                  END;
               ELSE
                  BEGIN
                     UPDATE dpa_trasm_utente
                        SET dpa_trasm_utente.cha_vista = '1',
                            dpa_trasm_utente.dta_vista =
                               (CASE
                                   WHEN dta_vista IS NULL
                                      THEN SYSDATE
                                   ELSE dta_vista
                                END
                               )
                      WHERE dpa_trasm_utente.dta_vista IS NULL
                        AND id_trasm_singola =
                                              (currenttrasmsingola.system_id
                                              )
                        AND dpa_trasm_utente.id_people = p_idpeople;

                     UPDATE     dpa_trasm_utente
                     SET        cha_in_todolist = '0'
                     WHERE      id_trasm_singola = currenttrasmsingola.system_id 
                            AND NOT  dpa_trasm_utente.dta_vista IS NULL
                            AND (cha_accettata = '1' OR cha_rifiutata = '1')
                            AND dpa_trasm_utente.id_people = p_idpeople;
                            
                     UPDATE dpa_todolist
                        SET dta_vista = SYSDATE
                      WHERE id_trasm_singola = currenttrasmsingola.system_id
                        AND id_people_dest =
                               p_idpeople
                                         --and ID_RUOLO_DEST in (p_idGruppo,0)
                        AND id_project = p_idoggetto;
                  EXCEPTION
                     WHEN OTHERS
                     THEN
                        p_resultvalue := 1;
                        RETURN;
                  END;
               END IF;
            END;
         END LOOP;
      END IF;
   END;
END SPsetDataVista;
/

SHOW ERRORS;


--
-- SETDATAREG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".setDataReg IS
BEGIN

DECLARE
CURSOR C IS select a.dta_open, b.num_rif, a.system_id AS SYSID
from dpa_el_registri a, dpa_reg_proto b where a.system_id=b.id_registro
and a.cha_automatico='1' and cha_stato='A';
C1 C%ROWTYPE;
BEGIN
OPEN C;
LOOP
FETCH C INTO C1;
EXIT WHEN C%NOTFOUND;
begin
--INSERT INTO DPA_REGISTRI_STO
insert into dpa_registro_sto(system_id,dta_open,dta_close,num_rif,id_registro,id_people,id_ruolo_in_uo)
SELECT (seq.nextval),a.dta_open,SYSDATE,b.num_rif,a.system_id,1,1
from dpa_el_registri a, dpa_reg_proto b where a.system_id=b.id_registro
and a.system_id = C1.SYSID;

update dpa_el_registri set dta_open =sysdate,cha_stato ='A',dta_close = null
WHERE SYSTEM_ID=C1.SYSID;

update dpa_reg_proto set num_rif=1 where to_char(sysdate,'dd/mm')='01/01';


EXCEPTION
WHEN OTHERS THEN
NULL;
END;

end loop;
close c;
COMMIT;
end;
END setDataReg;
/

SHOW ERRORS;


--
-- DPA_SETNUMFASC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".dpa_setNumFasc is
/*
questa procedura azzera il numero dei fasc, sotto i nodi di titolario elencati nell dpa_reg_fasc che hanno
il campo cha_automatico='1'. questo campo si rende necessario per gestire eventuali numerazioni  fasc sotto nodi
che non devono essere re.inizializzate ad inizio anno. per compatiilit¿ con gli altri clienti il valore di default del cmap o¿ '0'. a cura del PM p
porlo a '1' sotto i nodi interessati dall'azzeramento.
*/
begin

update dpa_reg_fasc set num_rif=1 where cha_automatico='1' and to_char(sysdate,'dd/mm')='01/01';
commit;
exception when others then null;



end dpa_setNumFasc;
/

SHOW ERRORS;


--
-- DPA_INS_TX_NEW_UT_RUOLO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".dpa_ins_tx_new_ut_ruolo (
p_idpeople      IN      integer,
p_idcorrglob     IN    integer,
p_returnvalue     OUT   integer
)
IS
/******************************************************************************
NAME:       DPA_INS_TX_NEW_UT_RUOLO
PURPOSE:

REVISIONS:
Ver        Date        Author           Description
---------  ----------  ---------------  ------------------------------------
1.0        20/02/2008          1. Created this procedure.

NOTES:

******************************************************************************/
BEGIN
DECLARE
CURSOR trasm (idpeople integer, idcorrglob integer)
IS
SELECT  distinct b.system_id AS ID, a.system_id AS idtrasm,
a.id_people AS idpeopletx, a.id_ruolo_in_uo AS ruolo_in_uo,
a.dta_invio AS dtainvio, a.var_note_generali AS note_gen,
b.id_ragione AS idragione, a.id_project AS idproj,
a.id_profile AS idprof, b.var_note_sing AS note_sing,
b.dta_scadenza AS scadenza, b.cha_tipo_dest AS cha_tipodest,
b.id_corr_globale AS idtscorrglob
FROM dpa_trasmissione a,
dpa_trasm_singola b,
dpa_trasm_utente c,
dpa_ragione_trasm d
WHERE a.system_id = b.id_trasmissione
AND b.system_id = c.id_trasm_singola
--AND c.cha_valida = '1'
AND a.dta_invio IS NOT NULL
AND b.id_corr_globale = idcorrglob and b.cha_tipo_dest='R'
AND (a.cha_tipo_oggetto = 'D' OR a.cha_tipo_oggetto = 'F')
AND b.id_ragione = d.system_id
--AND (   (    d.cha_tipo_ragione = 'W'
--          AND c.cha_accettata = '0'
--          AND c.cha_rifiutata = '0'
--          AND c.cha_valida = '1'
--         )
--      OR (    (d.cha_tipo_ragione = 'N' OR d.cha_tipo_ragione = 'I'
--              )
--          AND c.cha_vista = '0'
--         )
--      )
AND c.id_people  not IN (idpeople)  and c.cha_in_todolist='1';

id_trasmutente   NUMBER;
tmpvar           NUMBER;
sysidtxut        NUMBER;
--  sysidtx          NUMBER;
dtainvio         DATE;
idpeoplemitt     NUMBER;
idruolomitt      NUMBER;
idprofile        NUMBER;
idproject        NUMBER;
notegen          VARCHAR2 (250);
idreg number;
BEGIN
p_returnvalue := 0;

FOR currenttrasm IN trasm (p_idpeople, p_idcorrglob)
LOOP
BEGIN
--D_DPA_TRASM_UTENTE_ID_TRASM_SINGOLA
SELECT system_id
INTO id_trasmutente
FROM dpa_trasm_utente
WHERE id_trasm_singola = currenttrasm.ID
AND id_people = p_idpeople;
EXCEPTION
WHEN OTHERS
THEN --se non c'¿ alcuna.
null;
end;
begin

DELETE FROM dpa_trasm_utente
WHERE id_trasm_singola = currenttrasm.ID
AND id_people = p_idpeople;
EXCEPTION
WHEN OTHERS
THEN
p_returnvalue := -1;
END;

BEGIN
--D_dpa_todolist
if(id_trasmutente=null)
then
begin
DELETE FROM dpa_todolist
WHERE id_trasm_utente = id_trasmutente;

EXCEPTION
WHEN OTHERS
THEN
p_returnvalue := -2;
END;
end if;
end;
BEGIN
SELECT seq.NEXTVAL
INTO sysidtxut
FROM DUAL;
-- I dpa_trasm_utente
INSERT INTO dpa_trasm_utente
(system_id, id_people, id_trasm_singola, cha_vista,
cha_accettata, cha_rifiutata, cha_valida,cha_in_todolist
)
VALUES (sysidtxut, p_idpeople, currenttrasm.ID, '0',
'0', '0', '1','1'
);
EXCEPTION
WHEN OTHERS
THEN
p_returnvalue := -3;
END;
--commit;


BEGIN
-- I dpa_todolist
idreg:=null;
if(currenttrasm.idprof is not null)
then
idreg:= TO_NUMBER (vardescribe (currenttrasm.idprof, 'PROF_IDREG'));
end if;
INSERT INTO dpa_todolist
(id_trasmissione, id_trasm_singola, id_trasm_utente,
dta_invio, id_people_mitt, id_ruolo_mitt,
id_people_dest, id_ragione_trasm, var_note_gen,
var_note_sing, dta_scadenza, id_profile, id_project,
id_ruolo_dest, id_registro, cha_tipo_trasm)
values
( currenttrasm.idTrasm, currenttrasm.ID,sysidtxut,
currenttrasm.dtainvio,currenttrasm.idpeopletx, currenttrasm.ruolo_in_uo,
p_idpeople, currenttrasm.idragione, currenttrasm.note_gen,
currenttrasm.note_sing, currenttrasm.scadenza, currenttrasm.idprof,
currenttrasm.idproj,
TO_NUMBER (vardescribe (currenttrasm.idtscorrglob,
'ID_GRUPPO')
)
,idreg,
currenttrasm.cha_tipodest  );


EXCEPTION
WHEN OTHERS
THEN
p_returnvalue := -4;
END;
END LOOP;
p_returnvalue :=1;
END;
END dpa_ins_tx_new_ut_ruolo;
/

SHOW ERRORS;


--
-- SP_RIMUOVI_DOCUMENTI  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_RIMUOVI_DOCUMENTI(idProfile IN number, ReturnValue OUT NUMBER) IS
BEGIN

DELETE FROM DPA_TRASM_UTENTE WHERE id_trasm_singola in
(SELECT system_id FROM DPA_TRASM_SINGOLA WHERE id_trasmissione in
(select	t.system_id  from dpa_trasmissione t where t.id_profile =idProfile));

DELETE FROM DPA_TRASM_SINGOLA WHERE id_trasmissione in
(select	t.system_id  from dpa_trasmissione t where t.id_profile =idProfile);


DELETE FROM DPA_TRASMISSIONE WHERE id_profile=idProfile;

DELETE FROM project_components where LINK =idProfile ;
DELETE FROM VERSIONS WHERE DOCNUMBER = idProfile;
DELETE FROM COMPONENTS WHERE DOCNUMBER = idProfile;
DELETE FROM DPA_AREA_LAVORO WHERE ID_PROFILE = idProfile;
DELETE FROM DPA_PROF_PAROLE WHERE ID_PROFILE = idProfile;
DELETE FROM PROFILE WHERE DOCNUMBER = idProfile;
DELETE FROM SECURITY WHERE THING = idProfile;
delete from dpa_todolist where id_profile = idProfile;


DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_ASSOCIAZIONE_TEMPLATES
WHERE DOC_NUMBER = idProfile;
IF (cnt != 0) THEN
DELETE FROM DPA_ASSOCIAZIONE_TEMPLATES
WHERE DOC_NUMBER = idProfile;
END IF;
END;
ReturnValue:=1;
END;
/

SHOW ERRORS;


--
-- DPA_UPD_TODOLIST_DOC_CESTINO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".dpa_upd_todolist_doc_cestino(p_idProfile IN number
,p_returnvalue     OUT   integer) IS

BEGIN
declare

cursor    cTodolist  is    select
id_trasmissione,id_people_dest,id_trasm_utente
from dpa_todolist where id_profile=p_idProfile;

v_todolist cTodolist%rowtype;
begin
open cTodolist;
loop
fetch cTodolist into v_todolist;
exit when cTodolist%notfound;


UPDATE dpa_trasm_utente
SET  CHA_IN_TODOLIST = '0',
CHA_VISTA  = (CASE WHEN DTA_VISTA IS NULL THEN 1 ELSE 0 END)
WHERE SYSTEM_ID = v_todolist.id_trasm_utente;


end loop;
close cTodolist;
p_returnvalue:=1;


EXCEPTION
WHEN OTHERS THEN
p_returnvalue:=0;
end;
END dpa_upd_todolist_doc_cestino;
/

SHOW ERRORS;


--
-- UPDATE_CODLIV1  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".update_codliv1(v_id_amm in number)
IS

v_id_parent number;
v_system_id number;
v_id_parent_2 number;
v_num_livello  number;
v_var_cod_liv1 varchar2(32);
cont2 number;
maxliv number;

cursor c2 (v_num_livello NUMBER) is
SELECT system_id, id_parent from project where num_livello = v_num_livello
and id_amm=v_id_amm and cha_tipo_proj= 'T'  ORDER BY ID_PARENT, system_id;

BEGIN


UPDATE PROJECT SET VAR_COD_LIV1 = '0000'
WHERE ID_AMM=v_id_amm
AND cha_tipo_proj= 'T'
AND num_livello = 0;

FOR CNT IN 1 .. 7 LOOP

BEGIN


OPEN c2(CNT);
cont2 := 0;
FETCH c2 INTO v_system_id, v_id_parent;
v_id_parent_2:= v_id_parent;

LOOP

IF v_id_parent_2 <> v_id_parent then
cont2 := 0;
v_id_parent_2 := v_id_parent ;

END IF;


cont2 := cont2 + 1;

IF (CNT = 1) THEN

BEGIN

IF cont2 <= 9 THEN
update project set var_cod_liv1 = '000' || TO_CHAR(cont2) where num_livello = 1 and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;
IF cont2 > 9 AND cont2 <= 99 THEN
update project set var_cod_liv1 = '00' || TO_CHAR(cont2) where num_livello = 1 and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;
IF cont2 > 99 AND cont2 <= 999 THEN
update project set var_cod_liv1 = '0' || TO_CHAR(cont2) where num_livello = 1 and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;
IF cont2 > 999 THEN
update project set var_cod_liv1 = TO_CHAR(cont2) where num_livello = 1 and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;

END;

ELSE
BEGIN

select var_cod_liv1 into v_var_cod_liv1
from project
where system_id = v_id_parent
and id_amm=v_id_amm
and cha_tipo_proj= 'T' and num_livello = CNT - 1;

IF cont2 <= 9 THEN
update project set var_cod_liv1 = v_var_cod_liv1 || '000' || TO_CHAR(cont2) where num_livello = CNT and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;
IF cont2 > 9 AND cont2 <= 99 THEN
update project set var_cod_liv1 = v_var_cod_liv1 || '00' || TO_CHAR(cont2) where num_livello = CNT and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;
IF cont2 > 99 AND cont2 <= 999 THEN
update project set var_cod_liv1 = v_var_cod_liv1 || '0' || TO_CHAR(cont2) where num_livello = CNT and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;
IF cont2 > 999 THEN
update project set var_cod_liv1 = v_var_cod_liv1 || TO_CHAR(cont2) where num_livello = CNT and id_amm=v_id_amm and cha_tipo_proj= 'T' and system_id=v_system_id;
END IF;

END;

END IF;


FETCH c2 INTO v_system_id, v_id_parent;
EXIT WHEN c2%NOTFOUND;
END LOOP;
close c2;
commit;
END;


END LOOP;

END;
/

SHOW ERRORS;


--
-- CARICA_TIPO_DOC_RIS  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_TIPO_DOC_RIS IS

CURSOR currAmm IS
select system_id
from dpa_amministra ORDER BY system_id DESC;


BEGIN
FOR currentAmm in currAmm
LOOP
BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_TIPO_FUNZIONE WHERE VAR_COD_TIPO='DOC_RIS';
IF (cnt != 0) THEN
INSERT INTO DPA_TIPO_FUNZIONE ( SYSTEM_ID, VAR_COD_TIPO, VAR_DESC_TIPO_FUN, CHA_VIS, ID_AMM)
VALUES (seq.nextval, 'DOC_RIS', 'DOCUMENTAZIONE RISERVATA', '1', currentAmm.system_id);
END IF;
END;
END;
END LOOP;
commit;

END;
/

SHOW ERRORS;


--
-- CARICA_DOCUMENTI_RISERVATI  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_DOCUMENTI_RISERVATI IS

CURSOR currAmm IS
select system_id
from dpa_amministra ORDER BY system_id DESC;


BEGIN
FOR currentAmm in currAmm
LOOP


BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FUNZIONI WHERE (COD_FUNZIONE='DO_FASC_PRIVATO' AND ID_AMM IS NULL);
IF (cnt != 0) THEN
INSERT INTO DPA_FUNZIONI ( ID_AMM, SYSTEM_ID, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (currentAmm.system_id, seq.nextval, 'DO_FASC_PRIVATO', 'DO_FASC_PRIVATO', (SELECT SYSTEM_ID FROM DPA_TIPO_FUNZIONE WHERE VAR_COD_TIPO='DOC_RIS' AND ID_AMM=currentAmm.system_id));
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FUNZIONI WHERE (COD_FUNZIONE='DO_PROTO_PRIVATO'AND ID_AMM IS NULL);
IF (cnt != 0) THEN
INSERT INTO DPA_FUNZIONI ( ID_AMM, SYSTEM_ID, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (currentAmm.system_id, seq.nextval, 'DO_PROTO_PRIVATO', 'DO_PROTO_PRIVATO', (SELECT SYSTEM_ID FROM DPA_TIPO_FUNZIONE WHERE VAR_COD_TIPO='DOC_RIS' AND ID_AMM=currentAmm.system_id));
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FUNZIONI WHERE (COD_FUNZIONE='DO_CREA_PRIVATO' AND ID_AMM IS NULL);
IF (cnt != 0) THEN
INSERT INTO DPA_FUNZIONI ( ID_AMM, SYSTEM_ID, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (currentAmm.system_id, seq.nextval, 'DO_CREA_PRIVATO', 'DO_CREA_PRIVATO', (SELECT SYSTEM_ID FROM DPA_TIPO_FUNZIONE WHERE VAR_COD_TIPO='DOC_RIS' AND ID_AMM=currentAmm.system_id));
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_FUNZIONI WHERE (COD_FUNZIONE='DO_PROTO_PRIVATO_SEMPL' AND ID_AMM IS NULL);
IF (cnt != 0) THEN
INSERT INTO DPA_FUNZIONI ( ID_AMM, SYSTEM_ID, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_TIPO_FUNZIONE )
VALUES (currentAmm.system_id, seq.nextval, 'DO_PROTO_PRIVATO_SEMPL', 'DO_PROTO_PRIVATO_SEMPL', (SELECT SYSTEM_ID FROM DPA_TIPO_FUNZIONE WHERE VAR_COD_TIPO='DOC_RIS' AND ID_AMM=currentAmm.system_id));
END IF;
END;
END;

END LOOP;
commit;

END;
/

SHOW ERRORS;


--
-- DPA_SETDIRITTORUOLOPROP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".dpa_setdirittoruoloprop (
p_idprofile     IN       NUMBER,
p_idcorrGlobRuolo  IN       NUMBER,
p_returnvalue   OUT      NUMBER
)
IS
BEGIN
DECLARE
rtn      NUMBER;
gruppo   NUMBER;
BEGIN
SELECT id_gruppo
INTO gruppo
FROM dpa_corr_globali
WHERE system_id = p_idcorrGlobRuolo;

SELECT COUNT (*)
INTO rtn
FROM security s
WHERE s.personorgroup = gruppo AND s.thing = p_idprofile;

IF (rtn = 0)
THEN
INSERT INTO security s
(s.accessrights, s.cha_tipo_diritto, s.personorgroup,
s.thing
)
VALUES (255, 'P', gruppo,
p_idprofile
);
ELSE
IF (rtn > 0)
THEN
UPDATE security s
SET s.accessrights = 255,
s.cha_tipo_diritto = 'P'
WHERE s.thing = p_idprofile AND s.personorgroup = gruppo;
END IF;
END IF;
EXCEPTION
WHEN OTHERS
THEN
p_returnvalue := -1;
END;

p_returnvalue := 1;

END dpa_setdirittoruoloprop;
/

SHOW ERRORS;


--
-- SETSECURITYRUOLOREG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".setsecurityRuoloReg
(idCorrGlobali IN NUMBER, idProfile IN NUMBER,diritto IN NUMBER, ReturnValue OUT NUMBER) IS

idGruppo dpa_corr_globali.id_gruppo%TYPE;

BEGIN

SELECT ID_GRUPPO INTO idGruppo FROM DPA_CORR_GLOBALI WHERE SYSTEM_ID =
idCorrGlobali;

IF (idGruppo IS NOT NULL) THEN
BEGIN
SELECT MAX(accessrights) INTO ReturnValue from security  where thing =
idProfile and personorgroup = idGruppo;
END;
--
IF (ReturnValue < diritto ) THEN
BEGIN
update security set accessrights = diritto where thing = idProfile and
personorgroup = idGruppo;
END;
END IF;

IF (ReturnValue IS NULL) THEN
BEGIN
insert into security values(idProfile,idGruppo,diritto,null,'A');
ReturnValue := diritto;
END;
END IF;

END IF;


EXCEPTION
WHEN NO_DATA_FOUND THEN ReturnValue:=0;
WHEN OTHERS THEN ReturnValue := -1;

END setsecurityRuoloReg;
/

SHOW ERRORS;


--
-- SP_INS_MODELLI_DEST_NOTIFICA  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INS_MODELLI_DEST_NOTIFICA IS
VAR_ID_MITT_DEST NUMBER;
VAR_ID_PEOPLE NUMBER;
VAR_ID_MODELLO NUMBER;

CURSOR cursorINS IS
SELECT
MMD.SYSTEM_ID,
PG.PEOPLE_SYSTEM_ID,
MMD.ID_MODELLO
FROM DPA_CORR_GLOBALI CG, DPA_MODELLI_MITT_DEST MMD, PEOPLEGROUPS PG
WHERE CG.SYSTEM_ID = MMD.ID_CORR_GLOBALI
AND CG.ID_GRUPPO = PG.GROUPS_SYSTEM_ID
AND MMD.CHA_TIPO_MITT_DEST = 'D'
AND MMD.CHA_TIPO_URP = 'R'
AND PG.DTA_FINE IS NULL
AND MMD.SYSTEM_ID NOT IN (SELECT DISTINCT ID_MODELLO_MITT_DEST FROM DPA_MODELLI_DEST_CON_NOTIFICA)
ORDER BY MMD.ID_MODELLO;

BEGIN

OPEN cursorINS;
LOOP
FETCH cursorINS INTO VAR_ID_MITT_DEST,VAR_ID_PEOPLE,VAR_ID_MODELLO;
EXIT WHEN cursorINS%NOTFOUND;

BEGIN

INSERT INTO DPA_MODELLI_DEST_CON_NOTIFICA
(SYSTEM_ID,
ID_MODELLO_MITT_DEST,
ID_PEOPLE,
ID_MODELLO)
VALUES
(SEQ.NEXTVAL,
VAR_ID_MITT_DEST,
VAR_ID_PEOPLE,
VAR_ID_MODELLO);

END;

END LOOP;


END SP_INS_MODELLI_DEST_NOTIFICA;
/

SHOW ERRORS;


--
-- CARICA_DEL_DOC_IN_FASC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_DEL_DOC_IN_FASC IS
VAR_ID_AMM NUMBER;
VAR_TIPO_FUNZ NUMBER;

CURSOR cursorINS2 IS
SELECT
ID_AMM,
ID_TIPO_FUNZIONE
FROM DPA_FUNZIONI
WHERE COD_FUNZIONE ='FASC_MOD_FASCICOLO'
ORDER BY ID_AMM;

BEGIN

OPEN cursorINS2;
LOOP
FETCH cursorINS2 INTO VAR_ID_AMM,VAR_TIPO_FUNZ;
EXIT WHEN cursorINS2%NOTFOUND;

BEGIN
INSERT INTO DPA_FUNZIONI ( SYSTEM_ID, ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_PARENT,
CHA_TIPO_FUNZ, ID_PESO, CHA_FLAG_PARENT, ID_TIPO_FUNZIONE ) VALUES (
SEQ.NEXTVAL, VAR_ID_AMM,  'DO_DEL_DOC_FASC', 'DO_DEL_DOC_FASC', NULL, NULL, NULL, NULL, VAR_TIPO_FUNZ);
END;
END LOOP;

END CARICA_DEL_DOC_IN_FASC;
/

SHOW ERRORS;


--
-- CARICA_FUNZ_OGGETTARIO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_FUNZ_OGGETTARIO IS
VAR_ID_AMM NUMBER;
VAR_TIPO_FUNZ NUMBER;

CURSOR cursorINS IS
SELECT
ID_AMM,
ID_TIPO_FUNZIONE
FROM DPA_FUNZIONI
WHERE COD_FUNZIONE ='DO_PROT_OG_OGGETTARIO'
ORDER BY ID_AMM;

BEGIN

OPEN cursorINS;
LOOP
FETCH cursorINS INTO VAR_ID_AMM,VAR_TIPO_FUNZ;
EXIT WHEN cursorINS%NOTFOUND;

BEGIN
INSERT INTO DPA_FUNZIONI ( SYSTEM_ID, ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_PARENT, CHA_TIPO_FUNZ, ID_PESO, CHA_FLAG_PARENT, ID_TIPO_FUNZIONE )
VALUES ( SEQ.NEXTVAL, VAR_ID_AMM, 'DO_CANCELLA_OGGETTARIO', 'DO_CANCELLA_OGGETTARIO', NULL, NULL, NULL, NULL, VAR_TIPO_FUNZ);
END;
BEGIN
INSERT INTO DPA_FUNZIONI ( SYSTEM_ID, ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_PARENT,
CHA_TIPO_FUNZ, ID_PESO, CHA_FLAG_PARENT, ID_TIPO_FUNZIONE ) VALUES (
SEQ.NEXTVAL, VAR_ID_AMM,'DO_INSERISCI_OGGETTARIO', 'DO_INSERISCI_OGGETTARIO', NULL, NULL, NULL
, NULL,  VAR_TIPO_FUNZ);
END;
BEGIN
INSERT INTO DPA_FUNZIONI ( SYSTEM_ID, ID_AMM, COD_FUNZIONE, VAR_DESC_FUNZIONE, ID_PARENT,
CHA_TIPO_FUNZ, ID_PESO, CHA_FLAG_PARENT, ID_TIPO_FUNZIONE ) VALUES (
SEQ.NEXTVAL, VAR_ID_AMM, 'DO_MODIFICA_OGGETTARIO', 'DO_MODIFICA_OGGETTARIO', NULL, NULL, NULL, NULL
,VAR_TIPO_FUNZ);
END;
END LOOP;

END CARICA_FUNZ_OGGETTARIO;
/

SHOW ERRORS;


--
-- CARICA_RAG_SMISTAMENTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_RAG_SMISTAMENTO
IS
CURSOR currAmm
IS
SELECT   system_id
FROM DPA_AMMINISTRA
ORDER BY system_id DESC;
BEGIN
FOR currentAmm IN currAmm
LOOP
BEGIN
DECLARE
cnt   INT;
BEGIN
SELECT COUNT (*)
INTO cnt
FROM DPA_AMMINISTRA
WHERE ID_RAGIONE_COMPETENZA IS NULL;

IF (cnt != 0)
THEN
UPDATE DPA_AMMINISTRA SET ID_RAGIONE_COMPETENZA = (SELECT SYSTEM_ID FROM DPA_RAGIONE_TRASM WHERE VAR_DESC_RAGIONE = 'COMPETENZA' AND ID_AMM = currentAmm.system_id);
END IF;
END;
END;

BEGIN
DECLARE
cnt   INT;
BEGIN
SELECT COUNT (*)
INTO cnt
FROM DPA_AMMINISTRA
WHERE ID_RAGIONE_CONOSCENZA IS NULL;

IF (cnt != 0)
THEN
UPDATE DPA_AMMINISTRA SET ID_RAGIONE_CONOSCENZA = (SELECT SYSTEM_ID FROM DPA_RAGIONE_TRASM WHERE VAR_DESC_RAGIONE = ' CONOSCENZA' AND ID_AMM = currentAmm.system_id);
END IF;
END;
END;
END LOOP;

COMMIT;
END;
/

SHOW ERRORS;


--
-- CARICA_DPA_AMMINISTRA  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".CARICA_DPA_AMMINISTRA IS

CURSOR currAmm IS
select SYSTEM_ID
from DPA_AMMINISTRA ORDER BY SYSTEM_ID DESC;


BEGIN
FOR currentAmm in currAmm
LOOP

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (FONTCOLOR IS NULL OR FONTCOLOR = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set FONTCOLOR = '255^255^255';
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (ID_CARAT_DF IS NULL OR ID_CARAT_DF = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set ID_CARAT_DF = '1';
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (ID_COLORE_DF IS NULL OR ID_COLORE_DF = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set ID_COLORE_DF = '1';
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (ID_POS_DF IS NULL OR ID_POS_DF = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set ID_POS_DF = '1';
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (ORIENTAMENTO IS NULL OR ORIENTAMENTO = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set ORIENTAMENTO = 'Orizzontale';
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (NUM_RECORD IS NULL OR NUM_RECORD = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set NUM_RECORD = '500';
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (VAR_FORMATO_TIMBRO IS NULL OR VAR_FORMATO_TIMBRO = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set VAR_FORMATO_TIMBRO = VAR_FORMATO_SEGNATURA;
END IF;
END;
END;

BEGIN
DECLARE cnt INT;
BEGIN
SELECT COUNT(*) INTO cnt FROM DPA_AMMINISTRA WHERE (PULS_COLOR IS NULL OR PULS_COLOR = '0') and system_id = currentAmm.system_id;
IF (cnt != 0) THEN
UPDATE  DPA_AMMINISTRA set PULS_COLOR = '129^14^06';
END IF;
END;
END;

END LOOP;
commit;

END;
/

SHOW ERRORS;


--
-- CREATEALLEGATO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".createAllegato
(
p_idDocumentoPrincipale int,
p_idPeople int,
p_comments nvarchar2,
p_numeroPagine int,
p_idProfile out int,
p_versionId out int
)
IS returnvalue NUMBER;
idDocType INT := 0;

BEGIN
returnvalue := 0;
SELECT DOCUMENTTYPE INTO idDocType
FROM PROFILE WHERE SYSTEM_ID = p_idDocumentoPrincipale;

SELECT SEQ.nextval INTO p_idProfile FROM dual;

INSERT INTO Profile
(
SYSTEM_ID,
DOCNUMBER,
TYPIST,
AUTHOR,
CHA_TIPO_PROTO,
CHA_DA_PROTO,
DOCUMENTTYPE,
CREATION_DATE,
CREATION_TIME,
ID_DOCUMENTO_PRINCIPALE
)
VALUES
(
p_idProfile,
p_idProfile,
p_idpeople,
p_idpeople,
'G',
'0',
idDocType,
SYSDATE,
SYSDATE,
p_idDocumentoPrincipale
);

returnvalue := SQL%ROWCOUNT;

IF (returnvalue > 0) THEN

SELECT SEQ.nextval INTO p_versionId FROM dual;

INSERT INTO VERSIONS
(
VERSION_ID,
DOCNUMBER,
VERSION,
SUBVERSION,
VERSION_LABEL,
AUTHOR,
TYPIST,
COMMENTS,
NUM_PAG_ALLEGATI,
DTA_CREAZIONE,
CHA_DA_INVIARE
)
VALUES
(
p_versionId,
p_idProfile,
1,
'!',
'1',
p_idPeople,
p_idPeople,
p_comments,
p_numeroPagine,
SYSDATE,
'1'
);

INSERT INTO COMPONENTS
(
VERSION_ID,
DOCNUMBER,
FILE_SIZE
)
VALUES
(
p_versionId,
p_idProfile,
0
);

END IF;

END createAllegato;
/

SHOW ERRORS;


--
-- PUTFILE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".putFile
(
p_versionId int,
p_filePath nvarchar2,
p_fileSize int,
p_printThumb nvarchar2,
p_iscartaceo smallint
)
IS retValue NUMBER;
docNum int := 0;

BEGIN
retValue := 0;

select docnumber into docNum from versions where version_id = p_versionId;
update 	versions
set 	subversion = 'A',
cartaceo = p_iscartaceo
where 	version_id = p_versionId;

retValue := SQL%ROWCOUNT;
if (retValue > 0) then

update components
set 	path = p_filePath,
file_size = p_fileSize,
var_impronta = p_printThumb
where 	version_id = p_versionId;

retValue := SQL%ROWCOUNT;
end if;

if (retValue > 0) then
update 	profile
set 	cha_img = '1'
where	docnumber = docNum;

retValue := SQL%ROWCOUNT;
end if;

END putFile;
/

SHOW ERRORS;


--
-- SP_INSERT_ORDINAMENTO_ORG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INSERT_ORDINAMENTO_ORG IS

recordCorrC1 NUMBER;
idParent NUMBER;

recordCorrC2 NUMBER;
idUO NUMBER;

recordCorrC3 NUMBER;
idRuolo NUMBER;

contatoreUO NUMBER;
contatoreRUOLO NUMBER;

--cursore UO (prende id_parent)
CURSOR cursor_IDParent IS
select distinct id_parent
from dpa_corr_globali
where cha_tipo_urp = 'U' and
cha_tipo_ie = 'I' and
dta_fine is null and
id_parent not in (0)
order by id_parent;

-- cursore uo per id_parent
CURSOR cursor_UO (ID_PARENT_UO NUMBER) IS
select system_id
from dpa_corr_globali
where id_parent = ID_PARENT_UO and
cha_tipo_urp = 'U' and
cha_tipo_ie = 'I' and
dta_fine is null;

-- cursore ruoli per uo
CURSOR cursor_RUOLI (ID_UO_PADRE NUMBER) IS
select system_id
from dpa_corr_globali
where id_uo = ID_UO_PADRE and
cha_tipo_urp = 'R' and
cha_tipo_ie = 'I' and
dta_fine is null;

BEGIN

OPEN cursor_IDParent;

LOOP

FETCH cursor_IDParent INTO recordCorrC1;
EXIT WHEN cursor_IDParent%NOTFOUND;
idParent := recordCorrC1;

BEGIN

OPEN cursor_UO(idParent);

contatoreUO := 0;

LOOP

FETCH cursor_UO INTO recordCorrC2;
EXIT WHEN cursor_UO%NOTFOUND;
idUO := recordCorrC2;

BEGIN

contatoreUO := contatoreUO + 1;
UPDATE DPA_CORR_GLOBALI SET ID_PESO_ORG = contatoreUO WHERE SYSTEM_ID = idUO;

OPEN cursor_RUOLI(idUO);

contatoreRUOLO := 0;

LOOP

FETCH cursor_RUOLI INTO recordCorrC3;
EXIT WHEN cursor_RUOLI%NOTFOUND;
idRuolo := recordCorrC3;

BEGIN

contatoreRUOLO := contatoreRUOLO + 1;
UPDATE DPA_CORR_GLOBALI SET ID_PESO_ORG = contatoreRUOLO WHERE SYSTEM_ID = idRuolo;

END;

END LOOP;

CLOSE cursor_RUOLI;

END;

END LOOP;

CLOSE cursor_UO;

END;

END LOOP;

CLOSE cursor_IDParent;

END SP_INSERT_ORDINAMENTO_ORG;
/

SHOW ERRORS;


--
-- DPA3_GET_CHILDREN  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".dpa3_get_children (
p_id_amm in varchar,
p_cha_tipo_ie in varchar,
p_var_cod_rubrica in varchar,
p_res_cursor in out pkgrubrica.r_cursor,
p_corr_types in int default 7)
-- p_corr_types è una bitmask che indica quali tipi di nodi figli restituire
-- (default: tutti)
-- 1 = UO, 2 = Ruoli, 4 = Utenti
as

begin
declare
v_tipo varchar(2);
v_system_id int;
v_id_gruppo int;

begin

select
cha_tipo_urp, system_id, id_gruppo into v_tipo, v_system_id, v_id_gruppo
from
dpa_corr_globali
where
id_amm = p_id_amm and
cha_tipo_ie = p_cha_tipo_ie and
var_cod_rubrica = p_var_cod_rubrica and
dta_fine is null;

if (v_tipo = 'U') then
open p_res_cursor for
SELECT
var_cod_rubrica, var_desc_corr, (case when CHA_TIPO_IE='I' then 1 else 0 end) AS interno, cha_tipo_urp
FROM
dpa_corr_globali
where
id_parent = v_system_id and
dta_fine is null and
(bitand(p_corr_types, 1) > 0)
union
SELECT
var_cod_rubrica, var_desc_corr, (case when CHA_TIPO_IE='I' then 1 else 0 end) AS interno, cha_tipo_urp
FROM
dpa_corr_globali
where
cha_tipo_urp='R' and id_uo = v_system_id and
dta_fine is null and
(bitand(p_corr_types, 2) > 0);

else
open p_res_cursor for
SELECT DISTINCT
var_cod_rubrica, var_desc_corr, (case when CHA_TIPO_IE='I' then 1 else 0 end) AS interno, cha_tipo_urp
FROM
dpa_corr_globali
where
id_people in (
select people_system_id from peoplegroups where groups_system_id = v_id_gruppo and dta_fine is null)
and dta_fine is null and CHA_TIPO_URP != 'L' and
(bitand(p_corr_types, 4) > 0);
end if;


end;
end;
/

SHOW ERRORS;


--
-- DPA3_GET_HIERARCHY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".dpa3_get_hierarchy (
p_id_amm in varchar,
p_cod in varchar,
p_tipo_ie in varchar,
p_codes out varchar)

as

begin
declare
v_c_type varchar(2);
v_p_cod varchar(64);
v_system_id int;
v_id_parent int;
v_id_uo int;
v_id_utente int;

begin

p_codes := '';
v_p_cod := p_cod;

select
id_parent, system_id, id_uo, id_people, cha_tipo_urp
into
v_id_parent, v_system_id, v_id_uo, v_id_utente, v_c_type
from
dpa_corr_globali
where
var_cod_rubrica = v_p_cod and
cha_tipo_ie = p_tipo_ie and
id_amm = p_id_amm and
dta_fine is null;


while (1 > 0) loop
if v_c_type = 'U' then
if (v_id_parent is null or v_id_parent = 0) then
exit;
end if;

select var_cod_rubrica, system_id into v_p_cod, v_system_id from dpa_corr_globali where system_id = v_id_parent and id_amm = p_id_amm and dta_fine is null;
end if;

if v_c_type = 'R' then
if (v_id_uo is null or v_id_uo = 0) then
exit;
end if;

select var_cod_rubrica, system_id into v_p_cod, v_system_id from dpa_corr_globali where system_id = v_id_uo and id_amm = p_id_amm and dta_fine is null ;
end if;

if v_c_type = 'P' then
select var_cod_rubrica into v_p_cod from dpa_corr_globali where id_gruppo =
(
case when exists
(select groups_system_id from peoplegroups where people_system_id = v_id_utente and cha_preferito = 1)
then
(select groups_system_id from peoplegroups where people_system_id = v_id_utente  and cha_preferito = 1)
else
(select max(groups_system_id) from peoplegroups where people_system_id = v_id_utente and dta_fine is null)
end
) and id_amm = p_id_amm and dta_fine is null;
end if;
if v_p_cod is null then
exit;
end if;

select
id_parent, system_id, id_uo, cha_tipo_urp
into
v_id_parent, v_system_id, v_id_uo, v_c_type
from
dpa_corr_globali
where
var_cod_rubrica = v_p_cod and
id_amm = p_id_amm and
dta_fine is null;

p_codes := v_p_cod || ':' || p_codes;
end loop;

p_codes := p_codes || p_cod;

end;
end;
/

SHOW ERRORS;


--
-- I_SMISTAMENTO_SETVISIBSUP  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".I_Smistamento_Setvisibsup (
IDCorrGlobaleRuolo IN NUMBER,
IDGruppoMittente IN NUMBER,
LivelloRuoloMittente IN NUMBER,
IDDocumento IN NUMBER,
PariLivello IN NUMBER,
DirittoDaEred IN NUMBER,
ReturnValue OUT NUMBER)	IS
/*
-------------------------------------------------------------------------------------------------------
-- SP per la gestione della visibilità dei ruoli superiori gerarchici
-- nello smistamento di un documento.
-- Valori di ritorno gestiti:
-- 0: Operazione andata a buon fine
-- 1: Altrimenti
-------------------------------------------------------------------------------------------------------
*/

ExistIDGruppiSuperiori CHAR(1) := 'Y';
recordCorrente NUMBER;
idGruppoSuperiore NUMBER;
ExistAccessRights CHAR(1) := 'Y';
AccessRights NUMBER:= NULL;
accessRightsValue NUMBER := NULL;
MyUo NUMBER := NULL;
IDParent NUMBER := NULL;
IDUnitaOrganizzativa NUMBER := NULL;
LivelloRuolo NUMBER := NULL;
IDRegistro NUMBER := NULL;

/* prende tutti i ruoli di livello superiore a quello passato (REGISTRO ESISTENTE) */
CURSOR cursor_IDGruppiSuperioriReg (IDUOValue NUMBER, LivelloRuoloMittente NUMBER) IS
SELECT 		CG.ID_GRUPPO
FROM		DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR,
DPA_L_RUOLO_REG RR
WHERE		CG.ID_UO = IDUOValue
AND
CG.CHA_TIPO_URP = 'R'
AND
CG.DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
CG.SYSTEM_ID = RR.ID_RUOLO_IN_UO
AND
RR.ID_REGISTRO = IDRegistro
AND
TR.NUM_LIVELLO < LivelloRuoloMittente;

/* prende tutti i ruoli di livello superiore e uguale a quello passato (REGISTRO ESISTENTE) */
CURSOR cursor_IDGruppiSup_PariLivReg (IDUOValue NUMBER, LivelloRuoloMittente NUMBER) IS
SELECT 		CG.ID_GRUPPO
FROM		DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR,
DPA_L_RUOLO_REG RR
WHERE		CG.ID_UO = IDUOValue
AND
CG.CHA_TIPO_URP = 'R'
AND
CG.DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
CG.SYSTEM_ID = RR.ID_RUOLO_IN_UO
AND
RR.ID_REGISTRO = IDRegistro
AND
TR.NUM_LIVELLO <= LivelloRuoloMittente;

/* prende tutti i ruoli di livello superiore a quello passato (NO REGISTRO) */
CURSOR cursor_IDGruppiSuperiori (IDUOValue NUMBER, LivelloRuoloMittente NUMBER) IS
SELECT 		CG.ID_GRUPPO
FROM		DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR
WHERE		ID_UO = IDUOValue
AND
CHA_TIPO_URP = 'R'
AND
DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
TR.NUM_LIVELLO < LivelloRuoloMittente;

/* prende tutti i ruoli di livello superiore e uguale a quello passato (NO REGISTRO) */
CURSOR cursor_IDGruppiSup_PariLiv (IDUOValue NUMBER, LivelloRuoloMittente NUMBER) IS
SELECT 		CG.ID_GRUPPO
FROM		DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR
WHERE		ID_UO = IDUOValue
AND
CHA_TIPO_URP = 'R'
AND
DTA_FINE IS NULL
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID
AND
TR.NUM_LIVELLO <= LivelloRuoloMittente;

BEGIN
/* prende il registro del documento */
BEGIN
SELECT ID_REGISTRO INTO IDRegistro
FROM PROFILE
WHERE SYSTEM_ID = IDDocumento;
EXCEPTION
WHEN NO_DATA_FOUND THEN
IDRegistro := NULL;
END;

/* visibilita' ai ruoli superiori della stessa UO ------------------------------------------ */
BEGIN
SELECT id_uo INTO MyUO
FROM DPA_CORR_GLOBALI
WHERE system_id = IDCorrGlobaleRuolo;
END;

BEGIN
SELECT TR.NUM_LIVELLO INTO LivelloRuolo
FROM DPA_CORR_GLOBALI CG,
DPA_TIPO_RUOLO TR
WHERE CG.SYSTEM_ID = IDCorrGlobaleRuolo
AND
CG.ID_TIPO_RUOLO = TR.SYSTEM_ID;
END;

BEGIN
IF IDRegistro = NULL THEN
BEGIN
/* SENZA REGISTRO (DOC. GRIGIO) */
OPEN cursor_IDGruppiSuperiori(MyUO,LivelloRuolo);
LOOP
FETCH cursor_IDGruppiSuperiori INTO recordCorrente;
EXIT WHEN cursor_IDGruppiSuperiori%NOTFOUND;
idGruppoSuperiore := recordCorrente;

-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un'aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT 	ACCESSRIGHTS
FROM 	SECURITY
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
ORDER BY ACCESSRIGHTS DESC
) WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;

IF accessRightsValue < DirittoDaEred THEN
BEGIN
/* aggiornamento a Diritto */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = DirittoDaEred
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
AND ACCESSRIGHTS = accessRightsValue;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;
ELSE
BEGIN
/* inserimento a Diritto */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
idGruppoSuperiore,
DirittoDaEred,
IDGruppoMittente,
'A'
);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;

END LOOP;
CLOSE cursor_IDGruppiSuperiori;
END;

ELSE

BEGIN
/* ESISTE UN REGISTRO (DOC. PROTOCOLLATO) */
OPEN cursor_IDGruppiSuperioriReg(MyUO,LivelloRuolo);
LOOP
FETCH cursor_IDGruppiSuperioriReg INTO recordCorrente;
EXIT WHEN cursor_IDGruppiSuperioriReg%NOTFOUND;
idGruppoSuperiore := recordCorrente;

-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un'aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT 	ACCESSRIGHTS
FROM 	SECURITY
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
ORDER BY ACCESSRIGHTS DESC
) WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;

IF accessRightsValue < DirittoDaEred THEN
BEGIN
/* aggiornamento a Diritto */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = DirittoDaEred
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
AND ACCESSRIGHTS = accessRightsValue;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;
ELSE
BEGIN
/* inserimento a Diritto */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
idGruppoSuperiore,
DirittoDaEred,
IDGruppoMittente,
'A'
);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;

END LOOP;
CLOSE cursor_IDGruppiSuperioriReg;
END;

END IF;
END;


/* visibilita' ai ruoli superiori delle UO superiori ------------------------------------*/
LOOP
BEGIN
SELECT id_parent INTO IDUnitaOrganizzativa
FROM DPA_CORR_GLOBALI
WHERE system_id = MyUO;
END;

IF IDUnitaOrganizzativa = 0 THEN
EXIT;
ELSE
MyUO := IDUnitaOrganizzativa;
END IF;

IF PariLivello = 0 THEN
BEGIN
---------------------------------------------------------------------
---------------------------------------------------------------------
--			INVIA AI GRUPPI DI LIVELLO SUPERIORE
---------------------------------------------------------------------
---------------------------------------------------------------------
IF IDRegistro = NULL THEN
BEGIN
/* SENZA REGISTRO (DOC. GRIGIO) */
OPEN cursor_IDGruppiSuperiori(IDUnitaOrganizzativa,LivelloRuolo);
LOOP
FETCH cursor_IDGruppiSuperiori INTO recordCorrente;
EXIT WHEN cursor_IDGruppiSuperiori%NOTFOUND;
idGruppoSuperiore := recordCorrente;

-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un'aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT 	ACCESSRIGHTS
FROM 	SECURITY
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
ORDER BY ACCESSRIGHTS DESC
) WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;


IF accessRightsValue < DirittoDaEred THEN
BEGIN
/* aggiornamento a DirittoDaEred */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = DirittoDaEred
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
AND ACCESSRIGHTS = accessRightsValue;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;
ELSE
BEGIN
/* inserimento a DirittoDaEred */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
idGruppoSuperiore,
DirittoDaEred,
IDGruppoMittente,
'A'
);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;

END LOOP;
CLOSE cursor_IDGruppiSuperiori;
END;
ELSE
BEGIN
/* ESISTE UN REGISTRO (DOC. PROTOCOLLATO) */
OPEN cursor_IDGruppiSuperioriReg(IDUnitaOrganizzativa,LivelloRuolo);
LOOP
FETCH cursor_IDGruppiSuperioriReg INTO recordCorrente;
EXIT WHEN cursor_IDGruppiSuperioriReg%NOTFOUND;
idGruppoSuperiore := recordCorrente;

-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un'aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT 	ACCESSRIGHTS
FROM 	SECURITY
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
ORDER BY ACCESSRIGHTS DESC
) WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;


IF accessRightsValue < DirittoDaEred THEN
BEGIN
/* aggiornamento a DirittoDaEred */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = DirittoDaEred
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
AND ACCESSRIGHTS = accessRightsValue;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;
ELSE
BEGIN
/* inserimento a DirittoDaEred */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
idGruppoSuperiore,
DirittoDaEred,
IDGruppoMittente,
'A'
);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;

END LOOP;
CLOSE cursor_IDGruppiSuperioriReg;
END;
END IF;
END;
ELSE
BEGIN
---------------------------------------------------------------------
---------------------------------------------------------------------
--			INVIA AI GRUPPI DI LIVELLO UGUALE / SUPERIORE
---------------------------------------------------------------------
---------------------------------------------------------------------
IF IDRegistro = NULL THEN
BEGIN
/* SENZA REGISTRO (DOC. GRIGIO) */
OPEN cursor_IDGruppiSup_PariLiv(IDUnitaOrganizzativa,LivelloRuolo);
LOOP
FETCH cursor_IDGruppiSup_PariLiv INTO recordCorrente;
EXIT WHEN cursor_IDGruppiSup_PariLiv%NOTFOUND;
idGruppoSuperiore := recordCorrente;

-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un'aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT 	ACCESSRIGHTS
FROM 	SECURITY
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
ORDER BY ACCESSRIGHTS DESC
) WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;


IF accessRightsValue < DirittoDaEred THEN
BEGIN
/* aggiornamento a DirittoDaEred */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = DirittoDaEred
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
AND ACCESSRIGHTS = accessRightsValue;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;
ELSE
BEGIN
/* inserimento a DirittoDaEred */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
idGruppoSuperiore,
DirittoDaEred,
IDGruppoMittente,
'A'
);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;

END LOOP;
CLOSE cursor_IDGruppiSup_PariLiv;
END;
ELSE
BEGIN
/* ESISTE UN REGISTRO (DOC. PROTOCOLLATO) */
OPEN cursor_IDGruppiSup_PariLivReg(IDUnitaOrganizzativa,LivelloRuolo);
LOOP
FETCH cursor_IDGruppiSup_PariLivReg INTO recordCorrente;
EXIT WHEN cursor_IDGruppiSup_PariLivReg%NOTFOUND;
idGruppoSuperiore := recordCorrente;

-- Verifica se non vi sia già una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--	1) se ACCESSRIGHT < DirittoDaEred (parametro passato)
--	   viene fatto un'aggiornamento impostandone il valore al parametro passato
--	2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = DirittoDaEred (parametro passato)
BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT 	ACCESSRIGHTS
FROM 	SECURITY
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
ORDER BY ACCESSRIGHTS DESC
) WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;


IF accessRightsValue < DirittoDaEred THEN
BEGIN
/* aggiornamento a DirittoDaEred */
UPDATE 	SECURITY
SET 	ACCESSRIGHTS = DirittoDaEred
WHERE 	THING = IDDocumento
AND
PERSONORGROUP = idGruppoSuperiore
AND
CHA_TIPO_DIRITTO = 'A'
AND ACCESSRIGHTS = accessRightsValue;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;
ELSE
BEGIN
/* inserimento a DirittoDaEred */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
idGruppoSuperiore,
DirittoDaEred,
IDGruppoMittente,
'A'
);
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;
END IF;

END LOOP;
CLOSE cursor_IDGruppiSup_PariLivReg;
END;
END IF;

END;
END IF;

END LOOP;

ReturnValue := 0;

END;
/

SHOW ERRORS;


--
-- I_SMISTAMENTO_DOCVISTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".I_Smistamento_DocVisto(
IDTrasmissioneUtenteMittente IN NUMBER,
TrasmissioneConWorkflow IN CHAR,
ReturnValue OUT NUMBER)	IS

/*
-------------------------------------------------------------------------------------------------------
-- SP per la gestione del tasto "VISTO" nello smistamento: imposta il documento come VISTO e lo toglie
-- dalla lista delle COSE DA FARE (Todo-List).
-- Valori di ritorno gestiti:
-- 0: Operazione andata a buon fine
-- 1: Altrimenti
-------------------------------------------------------------------------------------------------------
*/

TipoTrasmSingola CHAR(1) := NULL;

BEGIN
/* Aggiornamento trasmissione del mittente */
IF TrasmissioneConWorkflow = '1' THEN
BEGIN
UPDATE 	DPA_TRASM_UTENTE
SET 	DTA_VISTA = SYSDATE(),
CHA_VISTA = '1',
DTA_ACCETTATA = SYSDATE(),
CHA_ACCETTATA = '1',
CHA_IN_TODOLIST = '0'
WHERE	SYSTEM_ID = IDTrasmissioneUtenteMittente;
END;
ELSE
BEGIN
UPDATE 	DPA_TRASM_UTENTE
SET 	DTA_VISTA = SYSDATE(),
CHA_VISTA = '1',
CHA_IN_TODOLIST = '0'
WHERE	SYSTEM_ID = IDTrasmissioneUtenteMittente;
END;
END IF;

/* verifica se la trasmissione singola ¿ destinata a: "Tutti" (T) o a "Uno" (S) */
BEGIN
SELECT    CHA_TIPO_TRASM INTO TipoTrasmSingola
FROM 	   DPA_TRASM_SINGOLA
WHERE 	   SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID = IDTrasmissioneUtenteMittente);
END;

IF TipoTrasmSingola = 'S' AND TrasmissioneConWorkflow = '1' THEN
/* se la trasmissione era destinata a SINGOLO, allora toglie la validit¿ della trasmissione a tutti gli altri utenti del ruolo (tranne a quella del mittente) */
BEGIN
UPDATE 	DPA_TRASM_UTENTE
SET 	CHA_VALIDA = '0',
CHA_IN_TODOLIST = '0'
WHERE	ID_TRASM_SINGOLA = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID = IDTrasmissioneUtenteMittente)
AND		SYSTEM_ID NOT IN (IDTrasmissioneUtenteMittente);
END;
END IF;

ReturnValue := 0;

END;
/

SHOW ERRORS;


--
-- I_SMISTAMENTO_SMISTADOC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".I_Smistamento_Smistadoc (
IDPeopleMittente IN NUMBER,
IDCorrGlobaleRuoloMittente IN NUMBER,
IDGruppoMittente IN NUMBER,
IDAmministrazioneMittente IN NUMBER,
IDPeopleDestinatario IN NUMBER,
IDCorrGlobaleDestinatario IN NUMBER,
IDDocumento IN NUMBER,
IDTrasmissione IN NUMBER,
IDTrasmissioneUtenteMittente IN NUMBER,
TrasmissioneConWorkflow IN CHAR,
NoteGeneraliDocumento IN VARCHAR2,
NoteIndividuali IN VARCHAR2,
DataScadenza IN DATE,
TipoDiritto IN CHAR,
Rights IN NUMBER,
IDRagioneTrasm IN NUMBER,
ReturnValue OUT NUMBER)    IS

/*
-------------------------------------------------------------------------------------------------------
-- SP per la gestione delle trasmissioni nello smistamento.
--
-- Valori di ritorno gestiti:
-- 0: Operazione andata a buon fine
-- -2: Non  stato inserito il RECORD IN tabella DPA_TRASMISSIONI
-- -3: Non  stato inserito il RECORD IN tabella DPA_TRASM_SINGOLE
-- -4: Non  stato inserito il RECORD IN tabella DPA_TRASM_UTENTE
-- -5: Errore in SPsetDataVistaSmistamento
-------------------------------------------------------------------------------------------------------
*/

IdentityTrasm NUMBER := NULL;
IdentityTrasmSing NUMBER := NULL;

ExistAccessRights CHAR(1) := 'Y';
AccessRights NUMBER:= NULL;
accessRightsValue NUMBER := NULL;

TipoTrasmSingola CHAR(1) := NULL;

resultValue number;

BEGIN

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasm FROM dual;
END;

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasmSing FROM dual;
END;

BEGIN
/* Inserimento in tabella DPA_TRASMISSIONE */
INSERT INTO DPA_TRASMISSIONE
(
SYSTEM_ID,
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
IdentityTrasm,
IDCorrGlobaleRuoloMittente,
IDPeopleMittente,
'D',
IDDocumento,
NULL,
SYSDATE(),
NoteGeneraliDocumento
);

EXCEPTION
WHEN OTHERS THEN  returnvalue:= -2 ;
RETURN;

END;

BEGIN
/* Inserimento in tabella DPA_TRASM_SINGOLA */
INSERT INTO DPA_TRASM_SINGOLA
(
SYSTEM_ID,
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
VAR_NOTE_SING,
CHA_TIPO_TRASM,
DTA_SCADENZA,
ID_TRASM_UTENTE
)
VALUES
(
IdentityTrasmSing,
IDRagioneTrasm,
IdentityTrasm,
'U',
IDCorrGlobaleDestinatario,
NoteIndividuali,
'S',
DataScadenza,
NULL
);

EXCEPTION
WHEN OTHERS THEN  returnvalue:= -3 ;
RETURN;
END;

BEGIN
/* Inserimento in tabella DPA_TRASM_UTENTE */
INSERT INTO DPA_TRASM_UTENTE
(
SYSTEM_ID,
ID_TRASM_SINGOLA,
ID_PEOPLE,
DTA_VISTA,
DTA_ACCETTATA,
DTA_RIFIUTATA,
DTA_RISPOSTA,
CHA_VISTA,
CHA_ACCETTATA,
CHA_RIFIUTATA,
VAR_NOTE_ACC,
VAR_NOTE_RIF,
CHA_VALIDA,
ID_TRASM_RISP_SING

)
VALUES
(
seq.NEXTVAL,
IdentityTrasmSing,
IDPeopleDestinatario,
NULL,
NULL,
NULL,
NULL,
'0',
'0',
'0',
NULL,
NULL,
'1',
NULL
);

EXCEPTION
WHEN OTHERS THEN  returnvalue:= -4 ;
RETURN;

END;

BEGIN

--per la gestione nuova dpa_todolist il trigger scatta solo se update dta_invio
update dpa_trasmissione set dta_invio=sysdate() where system_id=IdentityTrasm;


SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT     ACCESSRIGHTS
FROM     SECURITY
WHERE     THING = IDDocumento
AND
PERSONORGROUP = IDPeopleDestinatario
) WHERE ROWNUM = 1;

EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';
END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;

IF accessRightsValue < Rights THEN
BEGIN
/* aggiornamento a Rights */
UPDATE     SECURITY
SET     ACCESSRIGHTS = Rights
WHERE     THING = IDDocumento
AND
PERSONORGROUP = IDPeopleDestinatario
AND ACCESSRIGHTS = accessRightsValue;

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;

END IF;

ELSE

BEGIN
/* inserimento a Rights */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
IDPeopleDestinatario,
Rights,
IDGruppoMittente,
TipoDiritto
);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;

END IF;

/* Aggiornamento trasmissione del mittente */
IF TrasmissioneConWorkflow = '1' THEN
BEGIN
UPDATE     DPA_TRASM_UTENTE
SET
dta_vista = (case when dta_vista is null then sysdate else dta_vista end),
cha_vista  =  (case when dta_vista is null  then 1 else 0 end),
DTA_ACCETTATA = SYSDATE(),
CHA_ACCETTATA = '1',
VAR_NOTE_ACC = 'Documento accettato e smistato',
CHA_IN_TODOLIST = '0'
WHERE (SYSTEM_ID = IDTrasmissioneUtenteMittente
OR
SYSTEM_ID = (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
AND TS.CHA_TIPO_DEST= 'U')
)
AND CHA_VALIDA='1';
END;

ELSE

BEGIN

-- se la trasmissione e senza workflow allora richiamo solo il setDataVista

SPsetDataVistaSmistamento (IDPeopleMittente, IDDocumento, IDGruppoMittente, 'D', IDTrasmissione , resultValue);

IF(resultValue=1) THEN
ReturnValue := -5;
return ;
END IF;

END;

END IF;

/* verifica se la trasmissione singola  destinata a: "Tutti" (T) o a "Uno" (S) */
BEGIN

select * INTO TipoTrasmSingola from (
SELECT A.CHA_TIPO_TRASM
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE= IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =IDTrasmissioneUtenteMittente))
ORDER BY CHA_TIPO_DEST) where rownum = 1;

END;

IF TipoTrasmSingola = 'S' AND TrasmissioneConWorkflow = '1' THEN
/* se la trasmissione era destinata a SINGOLO, allora toglie la validit della trasmissione a tutti gli altri utenti del ruolo (tranne a quella del mittente) */
BEGIN
UPDATE     DPA_TRASM_UTENTE
SET     CHA_VALIDA = '0',  cha_in_todolist = '0'
WHERE ID_TRASM_SINGOLA IN
(SELECT A.SYSTEM_ID
FROM DPA_TRASM_SINGOLA A, DPA_TRASM_UTENTE B
WHERE A.SYSTEM_ID=B.ID_TRASM_SINGOLA
AND B.SYSTEM_ID IN (SELECT TU.SYSTEM_ID FROM
DPA_TRASM_UTENTE TU,DPA_TRASMISSIONE TX,DPA_TRASM_SINGOLA TS WHERE TU.ID_PEOPLE=IDPeopleMittente AND
TX.SYSTEM_ID=TS.ID_TRASMISSIONE AND TX.SYSTEM_ID=IDTrasmissione AND TS.SYSTEM_ID=TU.ID_TRASM_SINGOLA
and TS.SYSTEM_ID = (SELECT ID_TRASM_SINGOLA FROM DPA_TRASM_UTENTE WHERE SYSTEM_ID =IDTrasmissioneUtenteMittente)))
AND SYSTEM_ID NOT IN( IDTrasmissioneUtenteMittente);
END;
END IF;

ReturnValue := 0;

END;
/

SHOW ERRORS;


--
-- I_SMISTAMENTO_SMISTADOC_R_2  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".I_Smistamento_Smistadoc_R_2(
IDPeopleMittente IN NUMBER,
IDCorrGlobaleRuoloMittente IN NUMBER,
IDGruppoMittente IN NUMBER,
IDAmministrazioneMittente IN NUMBER,
IDCorrGlobaleDestinatario IN NUMBER,
IDDocumento IN NUMBER,
TipoDiritto IN CHAR,
Rights IN NUMBER,
IDRagioneTrasm IN NUMBER,
ReturnValue OUT NUMBER)    IS
/*
-------------------------------------------------------------------------------------------------------
-- SP per la gestione delle trasmissioni a ruolo nella protocollazione semplificata
--
-- Valori di ritorno gestiti:
-- 0: Operazione andata a buon fine
-------------------------------------------------------------------------------------------------------
*/

IdentityTrasm NUMBER := NULL;
IdentityTrasmSing NUMBER := NULL;

ExistAccessRights CHAR(1) := 'Y';
AccessRights NUMBER:= NULL;
accessRightsValue NUMBER := NULL;

IDUtente NUMBER;
recordCorrente NUMBER;

IDGroups NUMBER := NULL;
IDGruppo NUMBER;

/* Prende gli utenti del ruolo */
CURSOR cursor_IDUtenti (ID_CORR_GLOB_RUOLO NUMBER) IS
SELECT     P.SYSTEM_ID
FROM     GROUPS G,
PEOPLEGROUPS PG,
PEOPLE P,
DPA_CORR_GLOBALI CG
WHERE     PG.GROUPS_SYSTEM_ID=G.SYSTEM_ID AND
PG.PEOPLE_SYSTEM_ID=P.SYSTEM_ID AND
G.SYSTEM_ID = (SELECT A.ID_GRUPPO FROM DPA_CORR_GLOBALI A WHERE A.SYSTEM_ID = ID_CORR_GLOB_RUOLO) AND
P.DISABLED NOT IN ('Y') AND
P.SYSTEM_ID=CG.ID_PEOPLE
AND CG.CHA_TIPO_URP != 'L'
AND CG.DTA_FINE IS NULL
AND PG.DTA_FINE IS NULL;

BEGIN

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasm FROM dual;
END;

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasmSing FROM dual;
END;

BEGIN
/* Inserimento in tabella DPA_TRASMISSIONE */
INSERT INTO DPA_TRASMISSIONE
(
SYSTEM_ID,
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
IdentityTrasm,
IDCorrGlobaleRuoloMittente,
IDPeopleMittente,
'D',
IDDocumento,
NULL,
SYSDATE(),
NULL
);
END;

BEGIN
INSERT INTO DPA_TRASM_SINGOLA
(
SYSTEM_ID,
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
VAR_NOTE_SING,
CHA_TIPO_TRASM,
DTA_SCADENZA,
ID_TRASM_UTENTE
)
VALUES
(
IdentityTrasmSing,
IDRagioneTrasm,
IdentityTrasm,
'R',
IDCorrGlobaleDestinatario,
NULL,
'S',
NULL,
NULL
);
END;

BEGIN

OPEN cursor_IDUtenti(IDCorrGlobaleDestinatario);

LOOP

FETCH cursor_IDUtenti INTO recordCorrente;
EXIT WHEN cursor_IDUtenti%NOTFOUND;
IDUtente := recordCorrente;

BEGIN
-- Inserimento in tabella DPA_TRASM_UTENTE
INSERT INTO DPA_TRASM_UTENTE
(
SYSTEM_ID,
ID_TRASM_SINGOLA,
ID_PEOPLE,
DTA_VISTA,
DTA_ACCETTATA,
DTA_RIFIUTATA,
DTA_RISPOSTA,
CHA_VISTA,
CHA_ACCETTATA,
CHA_RIFIUTATA,
VAR_NOTE_ACC,
VAR_NOTE_RIF,
CHA_VALIDA,
ID_TRASM_RISP_SING
)
VALUES
(
seq.NEXTVAL,
IdentityTrasmSing,
IDUtente,
NULL,
NULL,
NULL,
NULL,
'0',
'0',
'0',
NULL,
NULL,
'1',
NULL
);
END;

END LOOP;

CLOSE cursor_IDUtenti;

END;

-- Verifica se non vi sia gia una trasmissione per il documento:
-- - se presente, si distinguono 2 casi:
--    1) se ACCESSRIGHT < Rights
--       viene fatto un'aggiornamento impostandone il valore a Rights
--    2) altrimenti non fa nulla
-- - se non presente viene fatta in ogni caso la insert con
--   valore di ACCESSRIGHT = Rights
BEGIN

--per la gestione nuova dpa_todolist il trigger scatta solo se update dta_invio.!!!
update dpa_trasmissione set dta_invio=sysdate() where system_id=IdentityTrasm;

SELECT A.ID_GRUPPO INTO IDGroups
FROM DPA_CORR_GLOBALI A
WHERE A.SYSTEM_ID = IDCorrGlobaleDestinatario;

END;

IDGruppo := IDGroups;

BEGIN
SELECT ACCESSRIGHTS INTO AccessRights FROM (
SELECT   ACCESSRIGHTS
FROM     SECURITY
WHERE    THING = IDDocumento
AND      PERSONORGROUP = IDGruppo
) WHERE ROWNUM = 1;

EXCEPTION
WHEN NO_DATA_FOUND THEN
ExistAccessRights := 'N';

END;

IF ExistAccessRights = 'Y' THEN

accessRightsValue := AccessRights;

IF accessRightsValue < Rights THEN

BEGIN
/* aggiornamento a Rights */
UPDATE     SECURITY
SET     ACCESSRIGHTS = Rights
WHERE     THING = IDDocumento
AND
PERSONORGROUP = IDGruppo
AND ACCESSRIGHTS = accessRightsValue;

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;

END IF;

ELSE

BEGIN
/* inserimento a Rights */
INSERT INTO SECURITY
(
THING,
PERSONORGROUP,
ACCESSRIGHTS,
ID_GRUPPO_TRASM,
CHA_TIPO_DIRITTO
)
VALUES
(
IDDocumento,
IDGruppo,
Rights,
IDGruppoMittente,
TipoDiritto
);

EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN
NULL;
END;

END IF;

ReturnValue := 0;

END;
/

SHOW ERRORS;


--
-- SP_DPA_UO_REG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".Sp_Dpa_Uo_Reg (
idUO IN NUMBER,
returnValue OUT NUMBER) IS

record_corr_ruolo NUMBER;
record_corr_registro NUMBER;

record_trovato NUMBER;
rec NUMBER;

CURSOR cursor_ruoli(system_id_uo NUMBER) IS
SELECT system_id
FROM DPA_CORR_GLOBALI
WHERE
cha_tipo_urp = 'R'
AND cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0
AND id_uo = system_id_uo;

CURSOR cursor_registri(system_id_ruolo NUMBER) IS
-- MODIFICATO PER INTRODUZIONE GESTIONE RF
SELECT id_registro
FROM DPA_L_RUOLO_REG A, DPA_EL_REGISTRI B
WHERE A.ID_REGISTRO = B.SYSTEM_ID AND  A.id_ruolo_in_uo = system_id_ruolo
AND B.CHA_RF = '0';

BEGIN

BEGIN
DELETE FROM DPA_UO_REG WHERE id_uo = idUO;
EXCEPTION
WHEN OTHERS THEN
ReturnValue := 1;
RETURN;
END;

-- cicla per tutti i ruoli validi della UO passata
OPEN cursor_ruoli(idUO);
LOOP
FETCH cursor_ruoli INTO record_corr_ruolo;
EXIT WHEN cursor_ruoli%NOTFOUND;

BEGIN

-- cicla per tutti i registri associati al ruolo in UO
OPEN cursor_registri(record_corr_ruolo);
LOOP
FETCH cursor_registri INTO record_corr_registro;
EXIT WHEN cursor_registri%NOTFOUND;

BEGIN

record_trovato := 0;

BEGIN

SELECT
system_id INTO rec
FROM
DPA_UO_REG
WHERE
ID_UO = idUO
AND ID_REGISTRO = record_corr_registro;

EXCEPTION
WHEN NO_DATA_FOUND THEN
record_trovato := 1;
WHEN OTHERS THEN
ReturnValue := 1;
RETURN;
END;

IF record_trovato = 1 THEN
BEGIN
INSERT INTO DPA_UO_REG
(SYSTEM_ID, ID_UO, ID_REGISTRO)
VALUES
(seq.NEXTVAL, idUO, record_corr_registro);
EXCEPTION
WHEN OTHERS THEN
ReturnValue := 1;
RETURN;
END;
END IF;

END;

END LOOP;
CLOSE cursor_registri;

END;

END LOOP;
CLOSE cursor_ruoli;

ReturnValue := 0;

END;
/

SHOW ERRORS;


--
-- SP_FILL_DPA_UO_REG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".Sp_Fill_Dpa_Uo_Reg IS

record_corr_uo NUMBER;
record_corr_ruolo NUMBER;
record_corr_registro NUMBER;

record_trovato NUMBER;
rec NUMBER;

CURSOR cursor_uo IS
SELECT system_id
FROM DPA_CORR_GLOBALI
WHERE
cha_tipo_urp = 'U'
AND cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0;

CURSOR cursor_ruoli(system_id_uo NUMBER) IS
SELECT system_id
FROM DPA_CORR_GLOBALI
WHERE
cha_tipo_urp = 'R'
AND cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0
AND id_uo = system_id_uo;

CURSOR cursor_registri(system_id_ruolo NUMBER) IS
SELECT id_registro
FROM DPA_L_RUOLO_REG A, DPA_EL_REGISTRI B
WHERE A.id_ruolo_in_uo = system_id_ruolo AND A.ID_REGISTRO = B.SYSTEM_ID AND CHA_RF= '0';


BEGIN

--ReturnValue := 0;

-- cicla per tutte le UO valide
OPEN cursor_uo;
LOOP
FETCH cursor_uo INTO record_corr_uo;
EXIT WHEN cursor_uo%NOTFOUND;

BEGIN

-- cicla per tutti i ruoli validi di questa UO
OPEN cursor_ruoli(record_corr_uo);
LOOP
FETCH cursor_ruoli INTO record_corr_ruolo;
EXIT WHEN cursor_ruoli%NOTFOUND;

BEGIN

-- cicla per tutti i registri associati al ruolo in UO
OPEN cursor_registri(record_corr_ruolo);
LOOP
FETCH cursor_registri INTO record_corr_registro;
EXIT WHEN cursor_registri%NOTFOUND;

BEGIN

record_trovato := 0;

BEGIN

SELECT
system_id INTO rec
FROM
DPA_UO_REG
WHERE
ID_UO = record_corr_uo
AND ID_REGISTRO = record_corr_registro;

EXCEPTION
WHEN NO_DATA_FOUND THEN
record_trovato := 1;
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERRORE NELLA SELECT DPA_UO_REG!');
RETURN;
END;

IF record_trovato = 1 THEN
BEGIN
INSERT INTO DPA_UO_REG
(SYSTEM_ID, ID_UO, ID_REGISTRO)
VALUES
(seq.NEXTVAL, record_corr_uo, record_corr_registro);
EXCEPTION
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERRORE IN INSERIMENTO PER ID_UO: '||record_corr_uo);
RETURN;
END;
END IF;

END;

END LOOP;
CLOSE cursor_registri;

END;

END LOOP;
CLOSE cursor_ruoli;

END;

END LOOP;
CLOSE cursor_uo;

DBMS_OUTPUT.PUT_LINE('TERMINATA!');
END;
/

SHOW ERRORS;


--
-- SP_TRASM_RIF_TORNA_MITT  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".Sp_Trasm_Rif_Torna_Mitt (
IDPeopleMitt IN NUMBER,
IDRuoloGlobMitt IN NUMBER,
IDAmministrazioneMittente IN NUMBER,
IDTrasmUtente IN NUMBER,
ReturnValue OUT NUMBER) IS

IdentityTrasm NUMBER := NULL;
IdentityTrasmSing NUMBER := NULL;

IDRagioneTrasm NUMBER := NULL;
TipoOggetto CHAR(1) := NULL;
IDProfile NUMBER := NULL;
IDProject NUMBER := NULL;
IDPeopleDest NUMBER := NULL;
IDCorrGlobaleDestinatario NUMBER := NULL;
IDCorrGlobaleMittente NUMBER := NULL;
NomeCognomeDest VARCHAR2(128) := NULL;
IDUtente NUMBER := NULL;
CHAValida VARCHAR2(3) := NULL;
NoteRif Varchar2(250):=' ';
recordCorrente NUMBER;

CURSOR cursor_IDUtenti (ID_CORR_GLOB_RUOLO NUMBER) IS
SELECT  P.SYSTEM_ID
FROM  GROUPS G,
PEOPLEGROUPS PG,
PEOPLE P,
DPA_CORR_GLOBALI CG
WHERE  PG.GROUPS_SYSTEM_ID=G.SYSTEM_ID AND
PG.PEOPLE_SYSTEM_ID=P.SYSTEM_ID AND
G.SYSTEM_ID = (SELECT A.ID_GRUPPO FROM DPA_CORR_GLOBALI A WHERE A.SYSTEM_ID = ID_CORR_GLOB_RUOLO) AND
P.DISABLED NOT IN ('Y') AND
P.SYSTEM_ID=CG.ID_PEOPLE AND CG.CHA_TIPO_URP != 'L'
AND CG.DTA_FINE IS NULL AND PG.DTA_FINE IS NULL;

BEGIN


BEGIN

SELECT SYSTEM_ID INTO IDRagioneTrasm
FROM  DPA_RAGIONE_TRASM
WHERE  ID_AMM = IDAmministrazioneMittente
AND
VAR_DESC_RAGIONE = 'RIFIUTO';
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 1;
RETURN;
END;


BEGIN

SELECT
cha_tipo_oggetto INTO TipoOggetto
FROM
DPA_TRASMISSIONE
WHERE
system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = IDTrasmUtente));
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 2;
RETURN;
END;

BEGIN

SELECT
id_profile INTO IDProfile
FROM
DPA_TRASMISSIONE
WHERE
system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = IDTrasmUtente));
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 3;
RETURN;
END;

BEGIN

SELECT
id_project INTO IDProject
FROM
DPA_TRASMISSIONE
WHERE
system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = IDTrasmUtente));
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 4;
RETURN;
END;

BEGIN

SELECT
id_people INTO IDPeopleDest
FROM
DPA_TRASMISSIONE
WHERE
system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = IDTrasmUtente));
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 5;
RETURN;
END;

BEGIN

SELECT
id_ruolo_in_uo INTO IDCorrGlobaleMittente
FROM
DPA_TRASMISSIONE
WHERE
system_id =
(SELECT id_trasmissione FROM DPA_TRASM_SINGOLA WHERE system_id =
(SELECT id_trasm_singola FROM DPA_TRASM_UTENTE WHERE system_id = IDTrasmUtente));
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 6;
RETURN;
END;

BEGIN

SELECT
var_desc_corr INTO NomeCognomeDest
FROM
DPA_CORR_GLOBALI
WHERE
ID_PEOPLE = IDPeopleMitt and cha_tipo_urp!='L';
EXCEPTION
WHEN NO_DATA_FOUND THEN
ReturnValue := 6;
RETURN;
END;

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasm FROM dual;
END;

BEGIN
SELECT seq.NEXTVAL INTO IdentityTrasmSing FROM dual;
END;

BEGIN

SELECT var_note_rif into NoteRif
FROM DPA_TRASM_UTENTE
WHERE system_id = IDTrasmUtente;

INSERT INTO DPA_TRASMISSIONE
(
SYSTEM_ID,
ID_RUOLO_IN_UO,
ID_PEOPLE,
CHA_TIPO_OGGETTO,
ID_PROFILE,
ID_PROJECT,
DTA_INVIO,
VAR_NOTE_GENERALI
)
VALUES
(
IdentityTrasm,
IDRuoloGlobMitt,
IDPeopleMitt,
''||TipoOggetto||'',
IDProfile,
IDProject,
SYSDATE(),
'Trasmissione rifiutata da '||REPLACE(NomeCognomeDest,'','''')||' in data '||to_date(sysdate,'dd/mm/yyyy')  );

EXCEPTION
WHEN OTHERS THEN
ReturnValue := 7;
RETURN;
END;

BEGIN

INSERT INTO DPA_TRASM_SINGOLA
(
SYSTEM_ID,
ID_RAGIONE,
ID_TRASMISSIONE,
CHA_TIPO_DEST,
ID_CORR_GLOBALE,
CHA_TIPO_TRASM,
var_note_sing
)
VALUES
(
IdentityTrasmSing,
IDRagioneTrasm,
IdentityTrasm,
'R',
IDCorrGlobaleMittente,
'S',
REPLACE(NoteRif,'','''')
);
EXCEPTION
WHEN OTHERS THEN
ReturnValue := 8;
RETURN;
END;

BEGIN
OPEN cursor_IDUtenti(IDCorrGlobaleMittente);
LOOP
FETCH cursor_IDUtenti INTO recordCorrente;
EXIT WHEN cursor_IDUtenti%NOTFOUND;
IDUtente := recordCorrente;

BEGIN

IF IDUtente = IDPeopleDest THEN
CHAValida := '1';
ELSE
CHAValida := '0';
END IF;


INSERT INTO DPA_TRASM_UTENTE
(
SYSTEM_ID,
ID_TRASM_SINGOLA,
ID_PEOPLE,
CHA_VISTA,
CHA_ACCETTATA,
CHA_RIFIUTATA,
CHA_VALIDA,
var_note_rif,
dta_rifiutata
)
VALUES
(
seq.NEXTVAL,
IdentityTrasmSing,
IDUtente,
'0',
'0',
'0',
CHAValida,
null,--REPLACE(NoteRif,'',''''),
null--sysdate
);
EXCEPTION
WHEN OTHERS THEN
ReturnValue := 9;
RETURN;
END;

END LOOP;
CLOSE cursor_IDUtenti;

update dpa_trasmissione set dta_invio=sysdate() where system_id=IdentityTrasm;
END;

ReturnValue := 0;
END;
/

SHOW ERRORS;


--
-- SP_CLEAN_DPA_T_CANALE_CORR  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_CLEAN_DPA_T_CANALE_CORR

IS

sysCorrente NUMBER;
IdentityDpaTcanaleCorr NUMBER;

CURSOR sysCursor IS
select system_id from DPA_CORR_GLOBALI
WHERE cha_tipo_ie = 'E' AND CHA_TIPO_URP IN ('U', 'P', 'R')
and system_id
not in (select id_corr_globale from dpa_t_canale_corr);
BEGIN
DELETE FROM dpa_t_canale_corr
WHERE id_corr_globale IN (
SELECT system_id
FROM dpa_corr_globali
WHERE cha_tipo_ie = 'I');

OPEN sysCursor;
LOOP
FETCH sysCursor INTO sysCorrente;
EXIT WHEN sysCursor%NOTFOUND;

BEGIN
SELECT seq.NEXTVAL INTO IdentityDpaTcanaleCorr FROM dual;

INSERT INTO DPA_T_CANALE_CORR
(
SYSTEM_ID,
ID_CORR_GLOBALE
)
VALUES
(
IdentityDpaTcanaleCorr,
sysCorrente
);
END;

END LOOP;
CLOSE sysCursor;

COMMIT;
END;
/

SHOW ERRORS;


--
-- SP_DELETE_CORR_ESTERNO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_DELETE_CORR_ESTERNO (IDCorrGlobale IN NUMBER, liste IN NUMBER, ReturnValue OUT NUMBER)  IS

/*
-------------------------------------------------------------------------------------------------------
SP per la Cancellazione corrispondente

Valori di ritorno gestiti:

0: CANCELLAZIONE EFFETTUATA - operazione andata a buon fine
1: DISABILITAZIONE EFFETTUATA - il corrispondente è presente nella DPA_DOC_ARRIVO_PAR, quindi non viene cancellato

2: CORRISPONDENTE NON RIMOSSO - il corrispondente è presente nella lista di distribuzione e non posso rimuoverlo

3: ERRORE: la DELETE sulla dpa_corr_globali NON è andata a buon fine
4: ERRORE: la DELETE sulla dpa_dett_globali NON è andata a buon fine
5: ERRORE: l' UPDATE sulla dpa_corr_globali NON è andata a buon fine
6: ERRORE: la DELETE sulla dpa_liste_distr NON è andata a buon fine
-------------------------------------------------------------------------------------------------------

*/

countDoc number; -- variabile usata per contenere il numero di documenti che hanno IL CORRISPONDENTE come
cha_tipo_urp VARCHAR2(1);
var_inLista VARCHAR2(1); -- valore 'N' (il corr non è presente in nessuna lista di sistribuzione), 'Y' altrimenti

countLista number;

BEGIN

select cha_tipo_urp INTO cha_tipo_urp from dpa_corr_globali where system_id = IDCorrGlobale;

var_inLista := 'N'; -- di default si assume che il corr nn sia nella DPA_LISTE_DISTR

SELECT count(SYSTEM_ID) into countLista FROM DPA_LISTE_DISTR WHERE ID_DPA_CORR = IDCorrGlobale;

IF (countLista > 0) THEN -- se il corrispondente è contenuto nelle liste di distribuzione
BEGIN
IF (liste = 1) THEN
--- CASO 1 - Le liste di distribuzione SONO abilitate: verifico se il corrispondente è in una lista di distibuzione, in caso affermativo non posso rimuoverlo
BEGIN
-- CASO 1.1 - Il corrispondente è predente in almeno una lista, quindi esco senza poterlo rimuoverere (VALORE RITORNATO = 2).
ReturnValue := 2;
RETURN;
END;
ELSE
-- CASO 2 - Le liste di distribuzione NON SONO abilitate

BEGIN
var_inLista := 'Y';
END;

END IF;

END;
END IF;


-- Se la procedura va avanti, cio' significa che:
-- Le liste di distribuzione non sono abilitate (liste = 0), oppure sono abilitate (liste=1) ma il corrispondente che si tenta di rimuovere non è contenuto in una lista

SELECT count(ID_PROFILE) INTO countDoc  FROM DPA_DOC_ARRIVO_PAR WHERE ID_MITT_DEST = IDCorrGlobale;

IF (countDoc = 0) THEN
-- CASO 3 -  il corrispondente non è stato mai utilizzato come mitt/dest di protocolli
BEGIN

-- CAS0 3.1 - lo rimuovo dalla DPA_CORR_GLOBALI
DELETE FROM DPA_CORR_GLOBALI WHERE  SYSTEM_ID = IDCorrGlobale;

EXCEPTION
WHEN OTHERS THEN
ReturnValue:=3;-- CAS0 3.1.1 - la rimozione da DPA_CORR_GLOBALI NON va a buon fine  (VALORE RITORNATO = 3).

END;
IF (ReturnValue=3) THEN
RETURN; --ESCO DALLA PROCEDURA

ELSE
BEGIN

ReturnValue:=0;

DELETE FROM DPA_T_CANALE_CORR WHERE  ID_CORR_GLOBALE = IDCorrGlobale;

-- per i RUOLI non deve essere cancellata la DPA_DETT_GLOBALI poichè in fase di creazione di un ruolo
-- non viene fatta la insert in tale tabella
IF(cha_tipo_urp != 'R') THEN

BEGIN

-- CAS0 3.1.2 - la rimozione da DPA_CORR_GLOBALI va a buon fine
DELETE FROM DPA_DETT_GLOBALI WHERE  ID_CORR_GLOBALI = IDCorrGlobale;

EXCEPTION
WHEN OTHERS THEN
ReturnValue:=4;-- CAS0 3.1.2.1 - la rimozione da DPA_DETT_GLOBALI NON va a buon fine  (VALORE RITORNATO = 4).
END;

IF (ReturnValue=4) THEN

RETURN; -- ESCO DALLA PROCEDURA

ELSE

ReturnValue:=0; -- CANCELLAZIONE ANDATA A BUON FINE

END IF;

END IF;

IF (ReturnValue=0 AND liste = 0 AND var_inLista = 'Y')	THEN

BEGIN
--se:
-- 1) sono andate bene le DELETE precedenti
-- 2) sono disabilitate le liste di distribuzione
-- 3) il corrispondente è nella DPA_LISTE_DISTR

-- rimuovo il corrispondente dalla DPA_LISTE_DISTR
-- rimuovo il corrispondente dalla DPA_LISTE_DISTR
DELETE FROM DPA_LISTE_DISTR WHERE ID_DPA_CORR = IDCorrGlobale;

EXCEPTION
WHEN OTHERS THEN
ReturnValue:=6;-- la rimozione da DPA_LISTE_DISTR NON va a buon fine  (VALORE RITORNATO = 6).

END;

END IF;

END;
END IF;


ELSE

-- CASO 4 -  il corrispondente è  stato utilizzato come mitt/dest di protocolli
BEGIN
-- 4.1) disabilitazione del corrispondente
UPDATE DPA_CORR_GLOBALI SET DTA_FINE = SYSDATE() WHERE SYSTEM_ID = IDCorrGlobale;


EXCEPTION
WHEN OTHERS THEN
ReturnValue:=5;-- CAS0 4.1.1- la disabilitazione NON va a buon fine  (VALORE RITORNATO = 5).

END;

IF(ReturnValue=5) THEN

RETURN;

ELSE

ReturnValue:=1;	-- CAS0 4.1.1- la disabilitazione VA a buon fine  (VALORE RITORNATO = 1).

END IF;



END IF;

END;
/

SHOW ERRORS;


--
-- SP_INSERT_DPA_DETT_GLOBALI  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INSERT_DPA_DETT_GLOBALI

IS

sysCorrente NUMBER;
IdentityDettGlobali NUMBER;

CURSOR sysCursor IS
select system_id from DPA_CORR_GLOBALI
WHERE cha_tipo_ie = 'E' AND CHA_TIPO_URP IN ('U', 'P') AND DTA_FINE IS NULL
and system_id
not in (select id_corr_globali from dpa_dett_globali);
BEGIN

OPEN sysCursor;
LOOP
FETCH sysCursor INTO sysCorrente;
EXIT WHEN sysCursor%NOTFOUND;

BEGIN
SELECT seq.NEXTVAL INTO IdentityDettGlobali FROM dual;

INSERT INTO DPA_DETT_GLOBALI
(
SYSTEM_ID,
ID_CORR_GLOBALI
)
VALUES
(
IdentityDettGlobali,
sysCorrente
);
END;

END LOOP;
CLOSE sysCursor;

COMMIT;
END;
/

SHOW ERRORS;


--
-- SP_MODIFY_CORR_ESTERNO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".sp_modify_corr_esterno (
idcorrglobale     IN       NUMBER,
desc_corr         IN       VARCHAR2,
nome              IN       VARCHAR2,
cognome           IN       VARCHAR2,
codice_aoo        IN       VARCHAR2,
codice_amm        IN       VARCHAR2,
email             IN       VARCHAR2,
indirizzo         IN       VARCHAR2,
cap               IN       VARCHAR2,
provincia         IN       VARCHAR2,
nazione           IN       VARCHAR2,
citta             IN       VARCHAR2,
cod_fiscale       IN       VARCHAR2,
telefono          IN       VARCHAR2,
telefono2         IN       VARCHAR2,
note              IN       VARCHAR2,
fax               IN       VARCHAR2,
var_iddoctype              NUMBER,
inrubricacomune   IN       CHAR,
newid             OUT      NUMBER,
returnvalue       OUT      NUMBER
)
IS
BEGIN
DECLARE
cod_rubrica              VARCHAR2 (128);
id_reg                   NUMBER;
idamm                    NUMBER;
new_var_cod_rubrica      VARCHAR2 (128);
cha_dettaglio            CHAR (1)       := '0';
cha_tipo_urp             CHAR (1);
myprofile                NUMBER;
new_idcorrglobale        NUMBER;
identitydettglobali      NUMBER;
outvalue                 NUMBER         := 1;
rtn                      NUMBER;
v_id_doctype             NUMBER;
identitydpatcanalecorr   NUMBER;
cha_tipo_corr            CHAR (1);
BEGIN

<<reperimento_dati>>
BEGIN
SELECT var_cod_rubrica, cha_tipo_urp, id_registro, id_amm
INTO cod_rubrica, cha_tipo_urp, id_reg, idamm
FROM dpa_corr_globali
WHERE system_id = idcorrglobale;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
outvalue := 0;
RETURN;
END reperimento_dati;

<<dati_canale_utente>>
BEGIN
SELECT id_documenttype
INTO v_id_doctype
FROM dpa_t_canale_corr
WHERE id_corr_globale = idcorrglobale;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
outvalue := 0;
END dati_canale_utente;

IF /* 0 */ outvalue = 1
THEN
IF /* 1 */ cha_tipo_urp = 'U' OR cha_tipo_urp = 'P'
THEN
cha_dettaglio := '1';
END IF;                                                       /* 1 */

--VERIFICO se il corrisp ¿ stato utilizzato come dest/mitt di protocolli
SELECT COUNT (id_profile)
INTO myprofile
FROM dpa_doc_arrivo_par
WHERE id_mitt_dest = idcorrglobale;

-- 1) non ¿ stato mai utilizzato come corrisp in un protocollo
IF /* 2 */ (myprofile = 0)
THEN
BEGIN
UPDATE dpa_corr_globali
SET var_codice_aoo = codice_aoo,
var_codice_amm = codice_amm,
var_email = email,
var_desc_corr = desc_corr,
var_nome = nome,
var_cognome = cognome
WHERE system_id = idcorrglobale;
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END;

/* SE L'UPDATE SU DPA_CORR_GLOBALI ¿ ANDTATA A BUON FINE
PER UTENTI E UO DEVO AGGIORNARE IL RECORD SULLA DPA_DETT_GLOBALI
*/
IF /* 3 */ cha_tipo_urp = 'U' OR cha_tipo_urp = 'P'
THEN

<<update_dpa_dett_globali>>
BEGIN
UPDATE dpa_dett_globali
SET var_indirizzo = indirizzo,
var_cap = cap,
var_provincia = provincia,
var_nazione = nazione,
var_cod_fiscale = cod_fiscale,
var_telefono = telefono,
var_telefono2 = telefono2,
var_note = note,
var_citta = citta,
var_fax = fax
WHERE id_corr_globali = idcorrglobale;
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END update_dpa_dett_globali;
END IF;                                                    /* 3 */

--METTI QUI UPDATE SU DPA_T_CANALE_CORR
IF /* 5 */ var_iddoctype != v_id_doctype
THEN
-- SE ENTRO QUI VUOL DIRE CHE IL TIPO_CANALE DEL CORRISP
--ESTERNO ¿ STATO CAMBIATO, QUINDI AGGIORNO LA DPA_T_CANALE_CORR
BEGIN
UPDATE dpa_t_canale_corr
SET id_documenttype = var_iddoctype
WHERE id_corr_globale = idcorrglobale;
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END;
END IF;                                                    /* 5 */
ELSE
-- caso 2) Il corrisp ¿ stato utilizzato come corrisp in un protocollo
-- NUOVO CODICE RUBRICA
new_var_cod_rubrica :=
cod_rubrica || '_' || TO_CHAR (idcorrglobale);

<<storicizzazione_corrisp>>
BEGIN
UPDATE dpa_corr_globali
SET dta_fine = SYSDATE (),
var_cod_rubrica = new_var_cod_rubrica,
var_codice = new_var_cod_rubrica
WHERE system_id = idcorrglobale;
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END storicizzazione_corrisp;

SELECT seq.NEXTVAL
INTO newid
FROM DUAL;

/* DOPO LA STORICIZZAZIONE DEL VECCHIO CORRISPONDENTE POSSO
INSERIRE IL NUOVO CORRISPONDENTE NELLA DPA_CORR_GLOBALI */
<<inserimento_nuovo_corrisp>>
BEGIN
IF (inrubricacomune = '1')
THEN
cha_tipo_corr := 'C';
ELSE
cha_tipo_corr := 'S';
END IF;

INSERT INTO dpa_corr_globali
(system_id, num_livello, cha_tipo_ie, id_registro,
id_amm, var_desc_corr, var_nome, var_cognome,
id_old, dta_inizio, id_parent, var_codice,
cha_tipo_corr, cha_tipo_urp,
var_codice_aoo, var_cod_rubrica, cha_dettagli,
var_email, var_codice_amm
)
VALUES (newid, '0', 'E', id_reg,
idamm, desc_corr, nome, cognome,
idcorrglobale, SYSDATE (), '0', cod_rubrica,
cha_tipo_corr, cha_tipo_urp,
codice_aoo, cod_rubrica, cha_dettaglio,
email, codice_amm
);
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END inserimento_nuovo_corrisp;

/* DOPO L'INSERIMENTO DEL NUOVO CORRISPONDENTE POSSO INSERIRE IL
RELATIVO RECORD NELLA DPA_DETT_GLOBALI, MA SOLO PER CORRISPONDENTI UTENTI
E UNITA' ORGANIZZATIVE */
IF /* 4 */ cha_tipo_urp = 'U' OR cha_tipo_urp = 'P'
THEN
--PRENDO LA SYSTEM_ID APPENA INSERITA
SELECT seq.NEXTVAL
INTO identitydettglobali
FROM DUAL;

<<inserimento_dettaglio_corrisp>>
BEGIN
INSERT INTO dpa_dett_globali
(system_id, id_corr_globali, var_indirizzo,
var_cap, var_provincia, var_nazione,
var_cod_fiscale, var_telefono, var_telefono2,
var_note, var_citta, var_fax
)
VALUES (identitydettglobali, newid, indirizzo,
cap, provincia, nazione,
cod_fiscale, telefono, telefono2,
note, citta, fax
);
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END inserimento_dettaglio_corrisp;
END IF;                                                    /* 4 */

--INSERISCO IL CANALE PREFERITO DEL NUOVO CORRISP ESTERNO SIA ESSO UO, RUOLO, PERSONA
<<inserimento_dpa_t_canale_corr>>
BEGIN
SELECT seq.NEXTVAL
INTO identitydpatcanalecorr
FROM DUAL;

INSERT INTO dpa_t_canale_corr
(system_id, id_corr_globale, id_documenttype,
cha_preferito
)
VALUES (identitydpatcanalecorr, newid, var_iddoctype,
'1'
);
EXCEPTION
WHEN OTHERS
THEN
outvalue := 0;
RETURN;
END inserimento_dpa_t_canale_corr;
END IF;                                                       /* 2 */
END IF /* 0 */;

returnvalue := outvalue;
END;
END;
/

SHOW ERRORS;


--
-- INS_OCC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".INS_OCC
(p_ID_REG in integer,
p_IDAMM in integer,
p_Prefix_cod_rub in VARCHAR,
p_DESC_CORR in VARCHAR,
p_CHA_DETTAGLI in VARCHAR,
p_RESULT OUT integer)
as
BEGIN
declare sysid integer;

BEGIN
-- verifica preesistenza dell'occ corrente
-- per sviluppi futuri .....
/*

select system_id into p_RESULT
from ( select system_id  from DPA_CORR_GLOBALI
where UPPER (var_desc_corr) = UPPER (p_DESC_CORR) and  CHA_TIPO_CORR = 'O' AND ID_AMM=P_IDAMM)
where rownum =1;


EXCEPTION WHEN NO_DATA_FOUND THEN
*/
--inserisco il nuovo occ_
begin
select seq.nextval into sysid from dual;
if(p_id_reg=0) then

INSERT INTO
DPA_CORR_GLOBALI (system_id,ID_REGISTRO,ID_AMM,VAR_COD_RUBRICA,VAR_DESC_CORR,ID_OLD,DTA_INIZIO,ID_PARENT,
VAR_CODICE,CHA_TIPO_CORR,CHA_DETTAGLI)
VALUES (sysid,null,p_idamm,p_Prefix_cod_rub||to_char(sysid),p_desc_corr,0,sysdate,0,p_Prefix_cod_rub||to_char(sysid),'O',0)
returning system_id into p_RESULT;
else
INSERT INTO
DPA_CORR_GLOBALI (system_id,id_registro,ID_AMM,VAR_COD_RUBRICA,VAR_DESC_CORR,ID_OLD,DTA_INIZIO,ID_PARENT,
VAR_CODICE,CHA_TIPO_CORR,CHA_DETTAGLI)
VALUES (sysid,p_ID_REG,p_idamm,p_Prefix_cod_rub||to_char(sysid),p_desc_corr,0,sysdate,0,p_Prefix_cod_rub||to_char(sysid),'O',0)
returning system_id into p_RESULT;
end if;

END;
END;

end;
/

SHOW ERRORS;


--
-- SP_EREDITA_VIS_FASC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".sp_eredita_vis_fasc (
idcorrglobaleuo      IN       NUMBER,
idcorrglobaleruolo   IN       NUMBER,
idgruppo             IN       NUMBER,
livelloruolo         IN       NUMBER,
idregistro           IN       NUMBER,
parilivello          IN       NUMBER,
returnvalue          OUT      NUMBER
)
IS
BEGIN
returnvalue := 0;

BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto
FROM (SELECT          /*+ index (a) */
DISTINCT a.system_id AS thing,
idgruppo AS personorgroup,
255 AS accessrights, NULL AS id_gruppo_trasm,
'P' AS cha_tipo_diritto
FROM project a
WHERE not exists (select 'x' from security s1 where s1.PERSONORGROUP=IDGruppo and s1.THING=a.system_id)
AND (   (    a.cha_tipo_proj = 'T'
AND (   a.id_registro = idregistro
OR a.id_registro IS NULL
)
)
OR (    a.cha_tipo_proj = 'F'
AND a.cha_tipo_fascicolo = 'G'
AND (   a.id_registro = idregistro
OR a.id_registro IS NULL
)
)
))
UNION
(SELECT          /*+ index (b) */
DISTINCT b.system_id AS thing, idgruppo AS personorgroup,
255 AS accessrights, NULL AS id_gruppo_trasm,
'P' AS cha_tipo_diritto
FROM project b
WHERE not exists (select 'x' from security s1 where s1.PERSONORGROUP=IDGruppo and s1.THING=b.system_id)
AND b.cha_tipo_proj = 'C'
AND id_parent IN (
SELECT /*+ index (project) */
system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND cha_tipo_fascicolo = 'G'
AND (   id_registro = idregistro
OR id_registro IS NULL
)));
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 1;
RETURN;
END;

IF parilivello = 0
THEN
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
OR s.cha_tipo_diritto = 'F'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL, 'A'
FROM security s, project p
WHERE not exists (select 'x' from security s1 where s1.PERSONORGROUP=IDGruppo and s1.THING=p.system_id)
AND p.system_id = s.thing
AND p.system_id IN (
SELECT *
FROM (SELECT /*+ index (a ) */
a.system_id
FROM project a
WHERE (    (    a.cha_tipo_proj = 'F'
AND a.cha_tipo_fascicolo =
'P'
)
AND (   a.id_registro =
idregistro
OR a.id_registro IS NULL
)
))
UNION
(SELECT /*+ index (b )  */
b.system_id
FROM project b
WHERE b.cha_tipo_proj = 'C'
AND b.id_parent IN (
SELECT /*+ index (project) */
system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND cha_tipo_fascicolo = 'P'
AND (   id_registro = idregistro
OR id_registro IS NULL
))))
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello > livelloruolo
AND b.id_uo = idcorrglobaleuo
AND d.id_registro = idregistro);
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 2;
RETURN;
END;
ELSE
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
OR s.cha_tipo_diritto = 'F'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL, 'A'
FROM security s, project p
WHERE not exists (select 'x' from security s1 where s1.PERSONORGROUP=IDGruppo and s1.THING=p.system_id)
AND p.system_id = s.thing
AND p.system_id IN (
SELECT *
FROM (SELECT /*+ index (a ) */
a.system_id
FROM project a
WHERE (    (    a.cha_tipo_proj = 'F'
AND a.cha_tipo_fascicolo =
'P'
)
AND (   a.id_registro =
idregistro
OR a.id_registro IS NULL
)
))
UNION
(SELECT /*+ index (b )  */
b.system_id
FROM project b
WHERE b.cha_tipo_proj = 'C'
AND b.id_parent IN (
SELECT /*+ index (project) */
system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND cha_tipo_fascicolo = 'P'
AND (   id_registro = idregistro
OR id_registro IS NULL
))))
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello >= livelloruolo
AND b.id_uo = idcorrglobaleuo
AND d.id_registro = idregistro);
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 3;
RETURN;
END;
END IF;

IF parilivello = 0
THEN
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
OR s.cha_tipo_diritto = 'F'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL, 'A'
FROM security s, project p
WHERE not exists (select 'x' from security s1 where s1.PERSONORGROUP=IDGruppo and s1.THING=p.system_id)
AND p.system_id = s.thing
AND p.system_id IN (
SELECT *
FROM (SELECT /*+ index (a ) */
a.system_id
FROM project a
WHERE (    (    a.cha_tipo_proj = 'F'
AND a.cha_tipo_fascicolo =
'P'
)
AND (   a.id_registro =
idregistro
OR a.id_registro IS NULL
)
))
UNION
(SELECT /*+ index (b )  */
b.system_id
FROM project b
WHERE b.cha_tipo_proj = 'C'
AND b.id_parent IN (
SELECT /*+ index (project) */
system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND cha_tipo_fascicolo = 'P'
AND (   id_registro = idregistro
OR id_registro IS NULL
))))
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello > livelloruolo
AND d.id_registro = idregistro
AND b.id_uo IN (
SELECT     system_id
FROM dpa_corr_globali
WHERE cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0
START WITH id_parent =
idcorrglobaleuo
CONNECT BY PRIOR system_id =
id_parent));
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 4;
RETURN;
END;
ELSE
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
OR s.cha_tipo_diritto = 'F'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL, 'A'
FROM security s, project p
WHERE not exists (select 'x' from security s1 where s1.PERSONORGROUP=IDGruppo and s1.THING=p.system_id)
AND p.system_id = s.thing
AND p.system_id IN (
SELECT *
FROM (SELECT /*+ index (a ) */
a.system_id
FROM project a
WHERE (    (    a.cha_tipo_proj = 'F'
AND a.cha_tipo_fascicolo =
'P'
)
AND (   a.id_registro =
idregistro
OR a.id_registro IS NULL
)
))
UNION
(SELECT /*+ index (b )  */
b.system_id
FROM project b
WHERE b.id_parent IN (
SELECT /*+ index (project) */
system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND cha_tipo_fascicolo = 'P'
AND (   id_registro = idregistro
OR id_registro IS NULL
))))
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello >= livelloruolo
AND d.id_registro = idregistro
AND b.id_uo IN (
SELECT     system_id
FROM dpa_corr_globali
WHERE cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0
START WITH id_parent =
idcorrglobaleuo
CONNECT BY PRIOR system_id =
id_parent));
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 5;
RETURN;
END;
END IF;
END;
/

SHOW ERRORS;


--
-- SP_EREDITA_VIS_DOC  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".sp_eredita_vis_doc (
idcorrglobaleuo      IN       NUMBER,
idcorrglobaleruolo   IN       NUMBER,
idgruppo             IN       NUMBER,
livelloruolo         IN       NUMBER,
idregistro           IN       NUMBER,
parilivello          IN       NUMBER,
returnvalue          OUT      NUMBER
)
IS
BEGIN
returnvalue := 0;

IF parilivello = 0
THEN
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL,                --  SABRI s.ID_GRUPPO_TRASM,
'A'
FROM security s, PROFILE p
WHERE p.system_id = s.thing
AND p.cha_privato = '0'
AND (   p.id_registro = idregistro
OR p.id_registro IS NULL
)
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello > livelloruolo
AND b.id_uo = idcorrglobaleuo
AND d.id_registro = idregistro)
AND NOT EXISTS (
SELECT 'x'
FROM security s1
WHERE s1.personorgroup = idgruppo
AND s1.thing = p.system_id);
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 1;
RETURN;
END;
ELSE
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL,                --  SABRI s.ID_GRUPPO_TRASM,
'A'
FROM security s, PROFILE p
WHERE p.system_id = s.thing
AND p.cha_privato = '0'
AND (   p.id_registro = idregistro
OR p.id_registro IS NULL
)
AND s.personorgroup IN (
SELECT DISTINCT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello >= livelloruolo
AND b.id_uo = idcorrglobaleuo
AND d.id_registro = idregistro)
AND NOT EXISTS (
SELECT 'x'
FROM security s1
WHERE s1.personorgroup = idgruppo
AND s1.thing = p.system_id);
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 1;
RETURN;
END;
END IF;

/* UO INFERIORI */
IF parilivello = 0
THEN
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL,                --  SABRI s.ID_GRUPPO_TRASM,
'A'
FROM security s, PROFILE p
WHERE p.system_id = s.thing
AND p.cha_privato = '0'
AND (   p.id_registro = idregistro
OR p.id_registro IS NULL
)
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello > livelloruolo
AND d.id_registro = idregistro
AND b.id_uo IN (
SELECT     system_id
FROM dpa_corr_globali
WHERE cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0
START WITH id_parent =
idcorrglobaleuo
CONNECT BY PRIOR system_id =
id_parent))
AND NOT EXISTS (
SELECT 'x'
FROM security s1
WHERE s1.personorgroup = idgruppo
AND s1.thing = p.system_id);
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 1;
RETURN;
END;
ELSE
BEGIN
INSERT INTO security
(thing, personorgroup, accessrights, id_gruppo_trasm,
cha_tipo_diritto)
SELECT          /*+ index(s) index(p) */
DISTINCT s.thing, idgruppo,
(CASE
WHEN (    s.accessrights = 255
AND (   s.cha_tipo_diritto = 'P'
OR s.cha_tipo_diritto = 'A'
)
)
THEN 63
ELSE s.accessrights
END
) AS acr,
NULL,                --  SABRI s.ID_GRUPPO_TRASM,
'A'
FROM security s, PROFILE p
WHERE p.system_id = s.thing
AND p.cha_privato = '0'
AND (   p.id_registro = idregistro
OR p.id_registro IS NULL
)
AND s.personorgroup IN (
SELECT c.system_id
FROM dpa_tipo_ruolo a,
dpa_corr_globali b,
GROUPS c,
dpa_l_ruolo_reg d
WHERE a.system_id = b.id_tipo_ruolo
AND b.id_gruppo = c.system_id
AND d.id_ruolo_in_uo = b.system_id
AND b.cha_tipo_urp = 'R'
AND b.cha_tipo_ie = 'I'
AND b.dta_fine IS NULL
AND a.num_livello >= livelloruolo
AND d.id_registro = idregistro
AND b.id_uo IN (
SELECT     system_id
FROM dpa_corr_globali
WHERE cha_tipo_ie = 'I'
AND dta_fine IS NULL
AND id_old = 0
START WITH id_parent =
idcorrglobaleuo
CONNECT BY PRIOR system_id =
id_parent))
AND NOT EXISTS (
SELECT 'x'
FROM security s1
WHERE s1.personorgroup = idgruppo
AND s1.thing = p.system_id);
EXCEPTION
WHEN DUP_VAL_ON_INDEX
THEN
NULL;
WHEN OTHERS
THEN
returnvalue := 1;
RETURN;
END;
END IF;
END;
/

SHOW ERRORS;


--
-- DEL_REC_DUPL_SECURITY  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".Del_Rec_Dupl_Security (
retValue OUT NUMBER) IS

/*
--------------------------------------------------------
Pulisce i record duplicati nella tabella SECURITY.
--------------------------------------------------------
*/

fc_THING NUMBER;
fc_PERSONORGROUP NUMBER;
fc_ACCESSRIGHTS NUMBER;
fc_COUNT NUMBER;

f_THING NUMBER;
f_PERSONORGROUP NUMBER;
f_ACCESSRIGHTS NUMBER;
f_ID_GRUPPO_TRASM NUMBER;
f_CHA_TIPO_DIRITTO CHAR(1);

ok_select NUMBER;
ok_delete NUMBER;
ok_insert NUMBER;

CURSOR cursor_A IS
SELECT /*+ index(SECURITY) */ DISTINCT
THING,ACCESSRIGHTS,PERSONORGROUP,COUNT(*)
FROM SECURITY
GROUP BY THING,ACCESSRIGHTS,PERSONORGROUP
HAVING COUNT(*) > 1;

BEGIN
retValue := 0;

OPEN cursor_A;
LOOP
FETCH cursor_A INTO fc_THING,fc_ACCESSRIGHTS,fc_PERSONORGROUP,fc_COUNT;
EXIT WHEN cursor_A%NOTFOUND;

ok_select := 1;
ok_delete := 1;
ok_insert := 1;

BEGIN
-- MEMORIZZA IL RECORD CON ACCESSRIGHTS MAGGIORE
SELECT
THING, PERSONORGROUP, ACCESSRIGHTS, ID_GRUPPO_TRASM, CHA_TIPO_DIRITTO
INTO
f_THING,f_PERSONORGROUP,f_ACCESSRIGHTS,f_ID_GRUPPO_TRASM,f_CHA_TIPO_DIRITTO
FROM (
SELECT *
FROM SECURITY
WHERE thing = fc_THING
AND PERSONORGROUP = fc_PERSONORGROUP
AND ACCESSRIGHTS = fc_ACCESSRIGHTS
ORDER BY ACCESSRIGHTS DESC, CHA_TIPO_DIRITTO DESC
)
WHERE ROWNUM = 1;
EXCEPTION
WHEN OTHERS THEN
ok_select := 0;
END;

IF ok_select = 1 THEN
BEGIN
-- ELIMINA TUTTI I RECORD
DELETE FROM SECURITY
WHERE THING = fc_THING AND PERSONORGROUP = fc_PERSONORGROUP;
EXCEPTION
WHEN OTHERS THEN
ok_delete := 0;
END;

IF ok_delete = 1 THEN
BEGIN
-- QUINDI INSERISCE IL RECORD MEMORIZZATO PRIMA
INSERT  INTO SECURITY
(THING, PERSONORGROUP, ACCESSRIGHTS, ID_GRUPPO_TRASM, CHA_TIPO_DIRITTO)
VALUES
(f_THING,f_PERSONORGROUP,f_ACCESSRIGHTS,f_ID_GRUPPO_TRASM,f_CHA_TIPO_DIRITTO);
EXCEPTION
WHEN OTHERS THEN
ok_insert := 0;
END;
END IF;

IF ok_select = 1 AND ok_delete = 1 AND ok_insert = 1 THEN
COMMIT;
ELSE
ROLLBACK;
retValue := 1;
RETURN;
END IF;

END IF;

END LOOP;
CLOSE cursor_A;

END;
/

SHOW ERRORS;


--
-- SP_INSERT_DOC_CORRENTE  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INSERT_DOC_CORRENTE
(p_idProfile NUMBER, p_serie NUMBER, p_result OUT NUMBER) IS
inFasc number:=0;
inSerie number := 0;
docNumber number := 0;
BEGIN

      select docnumber into docNumber from profile where system_id = p_idProfile;

      SELECT count(*) INTO inFasc FROM PROJECT A
      WHERE A.CHA_TIPO_PROJ = 'F' AND
      A.SYSTEM_ID IN
      (SELECT A.ID_FASCICOLO FROM PROJECT A, PROJECT_COMPONENTS B
      WHERE A.SYSTEM_ID=B.PROJECT_ID AND B.LINK=p_idProfile)
      and cha_in_archivio>0;

      select count(*) into inSerie
      from profile, dpa_associazione_templates, dpa_oggetti_custom
      where
      profile.docnumber = dpa_associazione_templates.doc_number
      and
      dpa_associazione_templates.id_oggetto = dpa_oggetti_custom.system_id
      and
      profile.docnumber = docNumber
      and
      dpa_oggetti_custom.repertorio = 1
      and
      UPPER(dpa_oggetti_custom.FORMATO_CONTATORE) like UPPER('%ANNO%')
      and
      dpa_associazione_templates.valore_oggetto_db is not null
      and profile.cha_in_archivio > 0;

    if ( (p_serie=1 and (inFasc>0 or inSerie>1)) or (p_serie=0 and (inFasc>1 or p_serie>0)) ) then
        begin
           UPDATE PROFILE SET  CHA_IN_ARCHIVIO='2' WHERE SYSTEM_ID = p_idProfile;
           p_result:=2;
        end;
    else
        begin
           UPDATE PROFILE SET  CHA_IN_ARCHIVIO='0' WHERE SYSTEM_ID = p_idProfile;
           p_result:=1;
        end;
    end if;
exception when others then p_result:=-1;
END SP_INSERT_DOC_CORRENTE;
/

SHOW ERRORS;


--
-- SP_INSERT_DPA_SUPPORTO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_INSERT_DPA_SUPPORTO
(
p_copia             number,
p_collFisica        VARCHAR,
p_dataUltimaVer     DATE,
p_dataEliminazione  DATE,
p_esitoUltimaVer    NUMBER,
p_numeroVer         NUMBER,
p_dataProxVer       DATE,
p_dataAppoMarca     DATE,
p_dataScadMarca     DATE,
p_marca             VARCHAR,
p_idCons            NUMBER,
p_tipoSupp          NUMBER,
p_stato             CHAR,
p_note              VARCHAR,
p_query             CHAR,
p_idSupp            NUMBER,
p_result        OUT NUMBER
)

IS
id_cons NUMBER:=0;
numSuppProd NUMBER:=0;
numSuppTotali NUMBER:=0;

BEGIN

SELECT SEQ_SUPPORTO.nextval into id_cons from dual;

IF(p_query='I') THEN

INSERT INTO DPA_SUPPORTO (
SYSTEM_ID,
COPIA,
DATA_PRODUZIONE,
VAR_COLLOCAZIONE_FISICA,
DATA_ULTIMA_VERIFICA,
DATA_ELIMINAZIONE,
ESITO_ULTIMA_VERIFICA,
VERIFICHE_EFFETTUATE,
DATA_PROX_VERIFICA,
DATA_APPO_MARCA,
DATA_SCADENZA_MARCA,
VAR_MARCA_TEMPORALE,
ID_CONSERVAZIONE,
ID_TIPO_SUPPORTO,
CHA_STATO,
VAR_NOTE
)
VALUES(
id_cons,
p_copia,
SYSDATE,
p_collFisica,
p_dataUltimaVer,
p_dataEliminazione,
p_esitoUltimaVer,
p_numeroVer,
p_dataProxVer,
p_dataAppoMarca,
p_dataScadMarca,
p_marca,
p_idCons,
p_tipoSupp,
p_stato,
p_note
);

SELECT COUNT(*) INTO numSuppProd  FROM DPA_SUPPORTO WHERE (CHA_STATO='P' OR CHA_STATO='E' OR CHA_STATO='V') AND ID_CONSERVAZIONE=p_idCons;

SELECT COUNT(*) INTO numSuppTotali  FROM DPA_SUPPORTO WHERE ID_CONSERVAZIONE=p_idCons;

IF(numSuppProd=numSuppTotali) THEN

UPDATE DPA_AREA_CONSERVAZIONE SET CHA_STATO='C' WHERE SYSTEM_ID=p_idCons;

UPDATE DPA_ITEMS_CONSERVAZIONE SET CHA_STATO='C' WHERE ID_CONSERVAZIONE=p_idCons;

p_result:=1;
ELSE
p_result:=0;
END IF;


ELSE

UPDATE DPA_SUPPORTO SET DATA_PRODUZIONE=SYSDATE, VAR_COLLOCAZIONE_FISICA=p_collFisica,
DATA_PROX_VERIFICA=p_dataProxVer, CHA_STATO= p_stato, VAR_NOTE=p_note, DATA_ULTIMA_VERIFICA=SYSDATE, VERIFICHE_EFFETTUATE=p_numeroVer, ESITO_ULTIMA_VERIFICA=p_esitoUltimaVer WHERE SYSTEM_ID=p_idSupp;

SELECT COUNT(*) INTO numSuppProd  FROM DPA_SUPPORTO WHERE (CHA_STATO='P' OR CHA_STATO='E' OR CHA_STATO='V') AND ID_CONSERVAZIONE=
(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=p_idSupp);

SELECT COUNT(*) INTO numSuppTotali  FROM DPA_SUPPORTO WHERE ID_CONSERVAZIONE=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=p_idSupp);

IF(numSuppProd=numSuppTotali) THEN

UPDATE DPA_AREA_CONSERVAZIONE SET CHA_STATO='C' WHERE SYSTEM_ID=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=p_idSupp);

UPDATE DPA_ITEMS_CONSERVAZIONE SET CHA_STATO='C' WHERE ID_CONSERVAZIONE=(SELECT ID_CONSERVAZIONE FROM DPA_SUPPORTO WHERE SYSTEM_ID=p_idSupp);

p_result:=1;
ELSE
p_result:=0;
END IF;


END IF;


END SP_INSERT_DPA_SUPPORTO;
/

SHOW ERRORS;


--
-- SP_GET_RUOLO_RESP_UO_FROM_UO  (Procedure) 
--
CREATE OR REPLACE PROCEDURE "@db_user".SP_GET_RUOLO_RESP_UO_FROM_UO
(
p_id_UO  in number,
p_result out number
)

as

begin
declare

v_isIdParentNull number;
v_noRuoloResponsabile number;
v_numeroResponsabili number;
v_idparent number;
v_id_Uo number;



BEGIN

v_isIdParentNull:=0;
v_noRuoloResponsabile:=0;
v_numeroResponsabili:=0;
v_idparent:=0;
v_id_Uo:=p_id_UO;


while(v_isIdParentNull=0 and v_noRuoloResponsabile=0) loop


select count(*) into v_numeroResponsabili from DPA_CORR_GLOBALI where ID_UO=v_id_Uo and CHA_TIPO_URP='R' and CHA_RESPONSABILE=1;

if(v_numeroResponsabili>0) then

select SYSTEM_ID into p_result from DPA_CORR_GLOBALI where ID_UO=v_id_Uo and CHA_TIPO_URP='R' and CHA_RESPONSABILE=1;

v_noRuoloResponsabile:=1;

else

select ID_PARENT into v_idparent from DPA_CORR_GLOBALI where SYSTEM_ID=v_id_Uo;

if(v_idparent>0) then

v_id_Uo:=v_idparent;

else

p_result:=0;

v_isIdParentNull:=1;

end if;

end if;

end loop;

END;
end;
/

SHOW ERRORS;


--
-- GETDTAINVIO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getDtaInvio (idprofile number)
RETURN date IS risultato date;
BEGIN
select max(dta_invio) into risultato from dpa_trasmissione where id_profile=idprofile;
RETURN risultato;
END getDtaInvio;
/

SHOW ERRORS;


--
-- DPA_GETMAXDTAINVIOFASC  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".dpa_getMaxdtaInvioFAsc(id_fasc number) RETURN date IS
BEGIN
declare
tmpVar date;
begin

select max(dta_invio) into tmpVar from dpa_trasmissione where id_project=id_fasc;
RETURN tmpVar;
EXCEPTION
WHEN others THEN
RETURN tmpVar;
end;
END dpa_getMaxdtaInvioFAsc;
/

SHOW ERRORS;


--
-- GETIDAMM  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".Getidamm(idPeople NUMBER)
RETURN NUMBER IS risultato NUMBER;

BEGIN

SELECT ID_AMM INTO risultato FROM PEOPLE WHERE SYSTEM_ID = idPeople;

RETURN risultato;
END Getidamm;
/

SHOW ERRORS;


--
-- VARDESCRIBE  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".vardescribe (sysid INT, typetable VARCHAR)
RETURN VARCHAR2
IS
risultato   VARCHAR2 (8000);
tmpvar      VARCHAR2 (8000);
tipo        CHAR;
num_proto   NUMBER;
BEGIN
BEGIN
tmpvar := NULL;

--MAIN
IF (typetable = 'PEOPLENAME')
THEN
SELECT var_desc_corr
INTO risultato
FROM dpa_corr_globali
WHERE id_people = sysid AND cha_tipo_urp = 'P' AND cha_tipo_ie = 'I';
END IF;

IF (typetable = 'GROUPNAME')
THEN
SELECT var_desc_corr
INTO risultato
FROM dpa_corr_globali
WHERE system_id = sysid AND cha_tipo_urp = 'R';
END IF;

IF (typetable = 'DESC_RUOLO')
THEN
SELECT var_desc_corr
INTO risultato
FROM dpa_corr_globali
WHERE id_gruppo = sysid AND cha_tipo_urp = 'R';
END IF;

IF (typetable = 'RAGIONETRASM')
THEN
SELECT var_desc_ragione
INTO risultato
FROM dpa_ragione_trasm
WHERE system_id = sysid;
END IF;

IF (typetable = 'TIPO_RAGIONE')
THEN
SELECT cha_tipo_ragione
INTO risultato
FROM dpa_ragione_trasm
WHERE system_id = sysid;
END IF;

IF (typetable = 'DATADOC')
THEN
BEGIN
SELECT cha_tipo_proto, NVL (num_proto, 0)
INTO tipo, num_proto
FROM PROFILE
WHERE system_id = sysid;

IF (    tipo IS NOT NULL
AND (tipo IN ('A', 'P', 'I') AND num_proto != 0)
)
THEN
SELECT TO_CHAR (dta_proto, 'dd/mm/yyyy')
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
ELSE
SELECT TO_CHAR (creation_date, 'dd/mm/yyyy')
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
END IF;
END;
END IF;

IF (typetable = 'CHA_TIPO_PROTO')
THEN
SELECT cha_tipo_proto
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
END IF;

IF (typetable = 'NUMPROTO')
THEN
SELECT num_proto
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
END IF;

IF (typetable = 'CODFASC')
THEN
SELECT var_codice
INTO risultato
FROM project
WHERE system_id = sysid;
END IF;

IF (typetable = 'DESC_OGGETTO')
THEN
SELECT var_prof_oggetto
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
END IF;

IF (typetable = 'DESC_FASC')
THEN
BEGIN
SELECT description
INTO risultato
FROM project
WHERE system_id = sysid;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
risultato := '';
END;
END IF;

IF (typetable = 'PROF_IDREG')
THEN
BEGIN
IF sysid IS NOT NULL
THEN
BEGIN
SELECT id_registro
INTO risultato
FROM PROFILE
WHERE system_id = sysid;

IF (risultato IS NULL)
THEN
risultato := '0';
END IF;
END;
ELSE
risultato := '0';
END IF;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
risultato := '0';
END;
END IF;

IF (typetable = 'ID_GRUPPO')
THEN
BEGIN
IF sysid IS NOT NULL
THEN
BEGIN
SELECT id_gruppo
INTO risultato
FROM dpa_corr_globali
WHERE system_id = sysid;

IF (risultato IS NULL)
THEN
risultato := '0';
END IF;
END;
ELSE
risultato := '0';
END IF;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
risultato := '0';
END;
END IF;

IF (typetable = 'SEGNATURA_DOCNUMBER')
THEN
BEGIN
SELECT var_segnatura
INTO risultato
FROM PROFILE
WHERE system_id = sysid;

IF (risultato IS NULL)
THEN
SELECT docnumber
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
END IF;
END;
END IF;

IF (typetable = 'OGGETTO_MITTENTE')
THEN
BEGIN
-- OGGETTO
SELECT var_prof_oggetto
INTO risultato
FROM PROFILE
WHERE system_id = sysid;

--MITTENTE
BEGIN
SELECT var_desc_corr
INTO tmpvar
FROM (SELECT var_desc_corr
FROM dpa_corr_globali a, dpa_doc_arrivo_par b
WHERE b.id_mitt_dest = a.system_id
AND b.cha_tipo_mitt_dest = 'M'
AND b.id_profile = sysid)
WHERE ROWNUM = 1;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
tmpvar := '';
END;

IF (tmpvar IS NOT NULL)
THEN
risultato := risultato || '@@' || tmpvar;
END IF;
END;
END IF;

IF (typetable = 'PROFILE_CHA_IMG')
THEN
SELECT getchaimg (docnumber)
INTO risultato
FROM PROFILE
WHERE system_id = sysid;
END IF;
--ENDMAIN
EXCEPTION
WHEN NO_DATA_FOUND
THEN
NULL;
WHEN OTHERS
THEN
RAISE;
END;

RETURN risultato;
END vardescribe;
/

SHOW ERRORS;


--
-- ISALLEGATO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isAllegato(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
     (A.CHA_TIPO_PROTO IN ('G')  AND NOT A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '0');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
     
END isAllegato;
/

SHOW ERRORS;


--
-- ISNONPROT  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isNonProt(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
    (A.CHA_TIPO_PROTO IN ('G')  AND A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '0');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
      END isNonProt;
/

SHOW ERRORS;


--
-- ISPREDISPOSTO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isPredisposto(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
  ( A.CHA_TIPO_PROTO IN ('A','P','I')  AND A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '1');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
      
END isPredisposto;
/

SHOW ERRORS;


--
-- ISPROTOCOLLO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isProtocollo(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin
   tmpVar := 0;
   
   
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
   (A.CHA_TIPO_PROTO IN ('A','P','I')  AND A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '0');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
      
END isProtocollo;
/

SHOW ERRORS;


--
-- ISPROTOCOLLOARRIVO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isProtocolloArrivo(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
   (A.CHA_TIPO_PROTO IN ('A')  AND A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '0');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
      
END isProtocolloArrivo;
/

SHOW ERRORS;


--
-- ISPROTOCOLLOINTERNO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isProtocolloInterno(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
   (A.CHA_TIPO_PROTO IN ('I')  AND A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '0');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
      
END isProtocolloInterno;
/

SHOW ERRORS;


--
-- ISPROTOCOLLOPARTENZA  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isProtocolloPartenza(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
   (A.CHA_TIPO_PROTO IN ('P')  AND A.ID_DOCUMENTO_PRINCIPALE IS NULL) AND A.CHA_DA_PROTO = '0');
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
      
END isProtocolloPartenza;
/

SHOW ERRORS;


--
-- ISSTAMPAREG  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".isStampaReg(idProfile number) RETURN NUMBER IS
tmpVar NUMBER;
/******************************************************************************
   NAME:       isProtocollo
   PURPOSE:    

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        17/02/2009          1. Created this function.

   NOTES:

   Automatically available Auto Replace Keywords:
      Object Name:     isProtocollo
      Sysdate:         17/02/2009
      Date and Time:   17/02/2009, 9.40.21, and 17/02/2009 9.40.21
      Username:         (set in TOAD Options, Procedure Editor)
      Table Name:      PROFLE

******************************************************************************/
BEGIN
begin

   tmpVar := 0;
   SELECT count(A.system_id) into tmpVar From profile A where (A.system_id=idProfile and
     A.CHA_TIPO_PROTO IN ('R') );
   
   RETURN tmpVar;
   EXCEPTION
        WHEN OTHERS THEN
      null;
      end;
      return tmpVar;
     
END isStampaReg;
/

SHOW ERRORS;


--
-- GETINCONSERVAZIONE  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getInConservazione (IDPROFILE number,Idproject number, typeID char, idPeople number, idGruppo number)

RETURN INT IS risultato INT;
res_appo INT;
idRuoloInUo NUMBER;
BEGIN
begin

SELECT DPA_CORR_GLOBALI.SYSTEM_ID INTO idRuoloInUo FROM DPA_CORR_GLOBALI WHERE DPA_CORR_GLOBALI.ID_GRUPPO = idGruppo;

IF (typeID = 'D' AND Idproject is null ) THEN
SELECT COUNT(DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID) INTO risultato FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE WHERE
DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE=DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND ID_PROFILE = IDPROFILE
AND DPA_ITEMS_CONSERVAZIONE.CHA_STATO ='N' AND DPA_AREA_CONSERVAZIONE.ID_PEOPLE=idPeople AND
DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = idRuoloInUo  AND ID_PROJECT IS  NULL;
ELSE
IF (typeID = 'D' AND Idproject is NOT null ) THEN
SELECT COUNT(DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID) INTO risultato FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE WHERE
DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE=DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND ID_PROFILE = IDPROFILE
AND DPA_ITEMS_CONSERVAZIONE.CHA_STATO ='N' AND DPA_AREA_CONSERVAZIONE.ID_PEOPLE=idPeople AND
DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = idRuoloInUo  AND ID_PROJECT =Idproject;
END IF;END IF;
IF (typeID = 'F') THEN
SELECT COUNT(DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID) INTO risultato FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE WHERE
DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE=DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND ID_PROJECT = Idproject
AND DPA_ITEMS_CONSERVAZIONE.CHA_STATO ='N'
AND DPA_AREA_CONSERVAZIONE.ID_PEOPLE=idPeople AND
DPA_AREA_CONSERVAZIONE.ID_RUOLO_IN_UO = idRuoloInUo;

END IF;

IF (risultato > 0) THEN
risultato := 1;
ELSE
risultato:=0;
END IF;


EXCEPTION
WHEN NO_DATA_FOUND THEN risultato := 0;
WHEN OTHERS THEN risultato := 0;
end;
RETURN risultato;
END getInConservazione;
/

SHOW ERRORS;


--
-- CORRCAT_ADDRESS  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".CORRCAT_ADDRESS (docId INT, tipo_proto VARCHAR)
RETURN varchar IS risultato varchar(4000);

ind varchar(1000);
item varchar(4000);
tipo_mitt_dest VARCHAR(10);
indirizzo varchar(128);
cap varchar(5);
citta varchar(64);
provincia varchar(2);
LNG INT;

CURSOR cur IS
SELECT c.var_desc_corr, dap.cha_tipo_mitt_dest, dett.VAR_INDIRIZZO, dett.VAR_CAP, dett.VAR_CITTA, dett.VAR_PROVINCIA
FROM DPA_CORR_GLOBALI c left outer join DPA_DETT_GLOBALI dett on c.system_id=dett.id_corr_globali, DPA_DOC_ARRIVO_PAR dap
WHERE dap.id_profile=docId
AND dap.id_mitt_dest=c.system_id
order by dap.cha_tipo_mitt_dest desc;

BEGIN
risultato := '';
ind := '';
OPEN cur;
LOOP
FETCH cur INTO item,tipo_mitt_dest,indirizzo,cap,citta,provincia;
EXIT WHEN cur%NOTFOUND;

LNG:=LENGTh(risultato);

IF(risultato IS NOT NULL anD LNG>=(3900-128))
tHEN RETURN RISULTATO||'...';
ELSE
BEGIN

IF(tipo_proto = 'P' AND tipo_mitt_dest = 'M') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (M)';
ELSE
risultato := risultato||item ||' (M)';
END IF;
END IF;

IF(tipo_proto = 'P' AND tipo_mitt_dest = 'D') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (D)';
ELSE
risultato := risultato||item ||' (D)';
END IF;
END IF;

IF(tipo_proto = 'P' AND tipo_mitt_dest = 'C') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (CC)';
ELSE
risultato := risultato||item ||' (CC)';
END IF;
END IF;

IF(tipo_proto = 'A' AND tipo_mitt_dest = 'M') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (M)';
ELSE
risultato := risultato||item ||' (M)';
END IF;
END IF;

IF(tipo_proto = 'A' AND tipo_mitt_dest = 'I') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (MI)';
ELSE
risultato := risultato||item ||' (MI)';
END IF;
END IF;

IF(tipo_proto = 'I' AND tipo_mitt_dest = 'M') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (M)';
ELSE
risultato := risultato||item ||' (M)';
END IF;
END IF;

IF(tipo_proto = 'I' AND tipo_mitt_dest = 'D') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (D)';
ELSE
risultato := risultato||item ||' (D)';
END IF;
END IF;

IF(tipo_proto = 'I' AND tipo_mitt_dest = 'C') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (CC)';
ELSE
risultato := risultato||item ||' (CC)';
END IF;
END IF;

IF (indirizzo IS NOT NULL AND  cap IS NOT NULL AND citta IS NOT NULL AND provincia IS NOT NULL) THEN
BEGIN
ind := indirizzo ||' '|| cap ||' '|| citta ||' '|| provincia;
risultato := risultato ||  ' (' || ind  || ')';
END;
END IF;
END;
END IF;

END LOOP;

RETURN risultato;

END Corrcat_Address;
/

SHOW ERRORS;


--
-- CHECKSECURITYPROPRIETARIO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".checkSecurityProprietario
(
thingParam INT,
idpeopleParam INT,
idgroupParam INT
)
RETURN INT IS retValue INT;

cnt INT := 0;

BEGIN
retValue := 0;


SELECT COUNT(*) INTO cnt
FROM security s, project b
WHERE s.thing = thingParam
AND s.personorgroup IN (idgroupParam, idpeopleParam)
and s.cha_tipo_diritto='P'
and s.thing = b.system_id
AND b.CHA_TIPO_FASCICOLO = 'P';

IF (cnt > 0) THEN
retValue := 1;
ELSE
retValue := 0;
END IF;

RETURN retValue;

END checkSecurityProprietario;
/

SHOW ERRORS;


--
-- CHECKGESTIONEARCHIVIO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".checkGestioneArchivio
(
idgroupParam INT
)
RETURN INT IS retValue INT;

cnt INT := 0;

BEGIN
retValue := 0;

select count(*) into cnt
from dpa_corr_globali corr, dpa_tipo_f_ruolo tipof, dpa_funzioni f
where tipof.id_ruolo_in_uo = corr.system_id and f.id_tipo_funzione=tipof.ID_TIPO_FUNZ
and corr.id_gruppo = idgroupParam
and f.COD_FUNZIONE='GEST_ARCHIVIA';

IF (cnt > 0) THEN
retValue := 1;
ELSE
retValue := 0;
END IF;

RETURN retValue;
END checkGestioneArchivio;
/

SHOW ERRORS;


--
-- CHECKSECURITYUO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".checkSecurityUO
(
thingParam INT,
idUO INT
)
RETURN INT IS retValue INT;

cnt INT := 0;
gruppoId INT := 0;
recordCount INT := 0;

CURSOR cur IS
select id_gruppo from dpa_corr_globali where id_uo = idUo;

BEGIN

OPEN cur;
LOOP
FETCH cur INTO gruppoId;
EXIT WHEN cur%NOTFOUND;

begin
SELECT checkSecurityProprietario(thingParam,0,gruppoId) INTO cnt
FROM dual;
exception when others then cnt:=0;
end;

recordCount := cnt + recordCount;

END LOOP;

IF (recordCount > 0) THEN
retValue := 1;
ELSE
retValue := 0;
END IF;


RETURN retValue;

END checkSecurityUO;
/

SHOW ERRORS;


--
-- CHECKVISIBILITAARCHIVIO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".checkVisibilitaArchivio
(
tipoObjParam VARCHAR,
thingParam INT,
idgroupParam INT
)
RETURN INT IS retValue INT;

inArchivio VARCHAR(1) := '';
isArchivista INT := 0;

BEGIN
retValue := 0;

if (tipoObjParam = 'D')
then
SELECT CHA_IN_ARCHIVIO into inArchivio FROM PROFILE WHERE SYSTEM_ID=thingParam;
else
SELECT CHA_IN_ARCHIVIO into inArchivio FROM PROJECT WHERE SYSTEM_ID=thingParam;
end if;

isArchivista := checkGestioneArchivio(idgroupParam);

if (inArchivio = '0' and isArchivista=0)
then retValue := 1;
end if ;

if (inArchivio = '1' and isArchivista=1)
then retValue := 1;
end if;

if (inArchivio = '2')
then retValue := 1;
end if;

RETURN retValue;

END checkVisibilitaArchivio;
/

SHOW ERRORS;


--
-- GETCHAIMG  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getChaImg(docNum number) RETURN char IS
tmpVar char;
BEGIN
declare
v_path varchar(128);
vMaxIdGenerica number;
begin

begin
SELECT /*+index (c) index (v1)*/
MAX (v1.version_id)
INTO vMaxIdGenerica
FROM VERSIONS v1, components c
WHERE v1.docnumber = docNum
AND v1.version_id = c.version_id;
--AND c.file_size > 0
EXCEPTION
WHEN OTHERS THEN
vMaxIdGenerica:=0;
end;

begin
select path into v_path from components where docnumber=docNum and version_id=vMaxIdGenerica;
EXCEPTION
WHEN OTHERS THEN
tmpVar:='0';
end;

if(v_path <> '' OR v_path is  not null)
then tmpVar:='1';
else tmpVar:='0';
end if;

end;
RETURN tmpVar;
END getChaImg;
/

SHOW ERRORS;


--
-- CODFASC  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".codFasc (docId INT)
RETURN varchar IS risultato varchar(2000);
BEGIN
Select codice into risultato from (
SELECT DISTINCT A.DESCRIPTION as codice
FROM PROJECT A
WHERE A.CHA_TIPO_PROJ = 'F'
AND A.SYSTEM_ID IN (SELECT A.ID_FASCICOLO FROM PROJECT A, PROJECT_COMPONENTS B WHERE A.SYSTEM_ID=B.PROJECT_ID AND B.LINK=docId)
)where rownum=1 ;
RETURN risultato;
END codFasc;
/

SHOW ERRORS;


--
-- GETDESCCORR  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getDescCorr (corrId INT)
RETURN varchar IS risultato varchar(256);
BEGIN
select var_desc_corr into risultato from dpa_corr_globali where system_id=corrId;
RETURN risultato;
END getDescCorr;
/

SHOW ERRORS;


--
-- GETPEOPLENAME  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getPeopleName (peopleId INT)
RETURN varchar IS risultato varchar(256);
BEGIN

select full_name into risultato from people where system_id = peopleId;

RETURN risultato;
END getPeopleName;
/

SHOW ERRORS;


--
-- HAS_CHILDREN  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".HAS_CHILDREN (corrId number,tipoURP char)
RETURN number IS risultato number;
BEGIN
DECLARE

rtnUO1 number;
rtnRUO number;
rtnUO2 number;
BEGIN


select case when count(*) > 0 then 1 else 0 end into rtnUO1 from
dpa_corr_globali b where tipoURP='U' and
b.id_parent = corrId;
--oppure
select case when count(*) > 0 then 1 else 0 end into rtnUO2 from
dpa_corr_globali b where tipoURP='U' and
b.id_uo = corrId ;
--oppure
select case when count(*) > 0 then 1 else 0 end into rtnRUO from
dpa_corr_globali b where (tipoURP='R')  and
exists (select * from peoplegroups
where groups_system_id in (select id_gruppo from dpa_corr_globali where system_id=corrId ) and dta_fine is null)
;


risultato:=rtnUO1+rtnUO2+rtnRUO;
-- come se fosse un booleano
if(risultato>0)
then
risultato:=1;
else
risultato:=0;


end if;

return risultato;
end;
END has_children;
/

SHOW ERRORS;


--
-- GETREGDESCR  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".Getregdescr (SYSREG INT)
RETURN VARCHAR IS risultato VARCHAR(256);
BEGIN
SELECT VAR_CODICE INTO risultato FROM DPA_EL_REGISTRI WHERE system_id=SYSREG;
RETURN risultato;
END Getregdescr;
/

SHOW ERRORS;


--
-- GETCODREG  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".GetCodReg(idREG NUMBER)
RETURN VARCHAR2 IS risultato VARCHAR2(16);

BEGIN
begin

SELECT VAR_CODICE INTO risultato FROM DPA_EL_REGISTRI WHERE SYSTEM_ID = idREG;

EXCEPTION
WHEN OTHERS THEN
risultato:='';
end;
RETURN risultato;
END GetCodReg;
/

SHOW ERRORS;


--
-- DPA_VALORE_OGGETTO_TIPO_ATTO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".dpa_valore_oggetto_tipo_atto(id_atto number, doc_num number)
RETURN VARCHAR2 IS
BEGIN
declare
tmpVar varchar2(255) := ' ';
begin

if (id_atto = 84 )
then
begin
select a.valore_oggetto_db into tmpVar from dpa_associazione_templates a
where a.id_template=id_atto and a.doc_number=doc_num and a.id_oggetto=181;
RETURN tmpVar;
end;
else
return tmpVar ;
end if;

EXCEPTION
WHEN OTHERS THEN
return  tmpVar;

if tmpVar is null
then
tmpVar := ' ';
end if;


end;

END dpa_valore_oggetto_tipo_atto;
/

SHOW ERRORS;


--
-- GETMAXVER  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getmaxver (docnum NUMBER)
RETURN NUMBER
IS
tmpvar   NUMBER;
BEGIN
SELECT /*+index (c) index (v1)*/
MAX (v1.version_id)
INTO tmpvar
FROM VERSIONS v1, components c
WHERE v1.docnumber = docnum
AND v1.version_id = c.version_id
AND c.file_size > 0;

IF (tmpvar IS NULL)
THEN
tmpvar := 0;
END IF;

RETURN tmpvar;
EXCEPTION
WHEN OTHERS
THEN
tmpvar := 0;
END getmaxver;
/

SHOW ERRORS;


--
-- GETINADL  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getInADL (sysID int, typeID char,idGruppo INT,idPeople INT)

RETURN INT IS risultato INT;
BEGIN
begin

IF (typeID = 'D') THEN
SELECT DISTINCT(SYSTEM_ID) INTO risultato FROM DPA_AREA_LAVORO WHERE ID_PROFILE = sysID
AND ID_PEOPLE =idPeople and ID_RUOLO_IN_UO = (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_GRUPPO = idGruppo);
IF (risultato > 0) THEN
risultato := 1;
END IF;
END IF;
IF (typeID = 'F') THEN
SELECT DISTINCT(SYSTEM_ID) INTO risultato FROM DPA_AREA_LAVORO WHERE ID_PROJECT = sysID
AND ID_PEOPLE =idPeople and ID_RUOLO_IN_UO = (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_GRUPPO = idGruppo);
IF (risultato > 0) THEN
risultato := 1;
END IF;
END IF;

EXCEPTION
WHEN NO_DATA_FOUND THEN risultato := 0;
WHEN OTHERS THEN risultato := 0;
end;
RETURN risultato;
END getInADL;
/

SHOW ERRORS;


--
-- GETACCESSRIGHTS  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getaccessrights (
id_ruolo    NUMBER,
id_people   NUMBER,
systemid    NUMBER
)
RETURN NUMBER
IS
risultato               NUMBER;
iddocumentoprincipale   NUMBER := NULL;
thingvar                NUMBER := NULL;
BEGIN
thingvar := systemid;

BEGIN
risultato := checkgestionearchivio ( id_ruolo );

IF (risultato = 0)
THEN
BEGIN
BEGIN
SELECT id_documento_principale
INTO iddocumentoprincipale
FROM PROFILE
WHERE system_id = thingvar;
EXCEPTION
WHEN NO_DATA_FOUND
THEN
iddocumentoprincipale := NULL;
END;

IF (NOT iddocumentoprincipale IS NULL)
THEN
thingvar := iddocumentoprincipale;
END IF;

SELECT MAX (accessrights)
INTO risultato
FROM security
WHERE thing = thingvar AND personorgroup IN
(id_ruolo, id_people);
EXCEPTION
WHEN OTHERS
THEN
risultato := -1;
END;
ELSE
--per archivisti tutto il solo lettura
risultato := 45;
END IF;
END;

RETURN risultato;
END getaccessrights;
/

SHOW ERRORS;


--
-- GETCODTIT  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getCodTit(idParent number) RETURN varchar2 IS
tmpVar varchar2(32);
BEGIN
begin
select upper(var_codice) into tmpvar from project where system_id=idParent;
EXCEPTION
WHEN NO_DATA_FOUND THEN
NULL;
WHEN OTHERS THEN
tmpVar:='';

end;
RETURN tmpVar;
END getCodTit;
/

SHOW ERRORS;


--
-- GETPROTOCOLLATO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getprotocollato (systemid number,tipoproto char,isProtoInternoEnabled char)
RETURN int IS risultato int;
BEGIN
begin
begin
if(tipoproto='T') then
if(isProtoInternoEnabled='1') then
select count(*) into risultato from profile where system_id=systemid and num_proto is not null and cha_tipo_proto in ('A','P','I');
else
select count(*) into risultato from profile where system_id=systemid and num_proto is not null and cha_tipo_proto in ('A','P');
end if;
else
select count(*) into risultato from profile where system_id=systemid and num_proto is not null and cha_tipo_proto = tipoproto;
end if;

exception when others then risultato:=0;
end;

RETURN risultato;
end;
END getprotocollato;
/

SHOW ERRORS;


--
-- GETDOCFASCICOLATO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".GetDocFascicolato(idprofile number) RETURN NUMBER IS
tmpVar NUMBER;
BEGIN
tmpVar := 0;
begin
select count(link) into tmpvar from project_components where link=idprofile;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN tmpVar;
end;
if(tmpVar>0)
then tmpVar:=1;
end if;
return tmpVar;
END GetDocFascicolato;
/

SHOW ERRORS;


--
-- GETSERIMUOVIBILE  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".GetSeRimuovibile
(p_idProfile number,
p_idTipoAtto number :=0,
p_id_people_connesso number,
p_idPeople number,
p_id_ruolo_creatore number,
p_Cfg_Enable_canc_doc_trasm number)
RETURN int IS risultato int ;


BEGIN
begin
risultato := 1;

SELECT COUNT(NUM_PROTO) into risultato FROM PROFILE WHERE SYSTEM_ID = p_idProfile;

if(risultato = 0) then

IF (p_idPeople=p_id_people_connesso AND p_Cfg_Enable_canc_doc_trasm=0) then
--Controllo se ¿ stato trasmesso
select  count(trasm.system_id) into risultato
from dpa_trasmissione trasm, dpa_trasm_singola sing, dpa_trasm_utente ut, profile p
where trasm.system_id = sing.id_trasmissione and sing.system_id = ut.id_trasm_singola
and trasm.id_profile=p.SYSTEM_ID
and p.CHA_DA_PROTO <> 0 and p.NUM_PROTO is null
and trasm.id_profile = p_idProfile;
END if;


IF (p_idPeople <> p_id_people_connesso) then
--controllo se ¿ stato trasmesso per interop
select count(trasm.system_id) into risultato
from dpa_trasmissione trasm, dpa_trasm_singola sing, dpa_trasm_utente ut, dpa_ragione_trasm rag, profile p
where trasm.system_id = sing.id_trasmissione and sing.system_id = ut.id_trasm_singola and sing.id_ragione = rag.system_id
and trasm.id_profile=p.SYSTEM_ID
and p.CHA_DA_PROTO <> 0 and p.NUM_PROTO is null
and trasm.id_profile = p_idProfile and rag.cha_tipo_ragione ='I'
and upper (var_desc_ragione) = upper('INTEROPERABILITA');

-- metto a 0 xche si puo rimuovere solo se trasm interop
if (risultato > 0) then   risultato := 0; else  risultato := 1; end if;

-- controllo di prau -- se il creatore ¿ prau posso rimuovere
SELECT  COUNT(*) into risultato FROM DPA_TIPO_F_RUOLO WHERE id_Ruolo_in_uo= p_id_ruolo_creatore
AND ID_TIPO_FUNZ IN (SELECT SYSTEM_ID FROM DPA_TIPO_FUNZIONE WHERE UPPER(VAR_COD_TIPO)='PRAU');

if (risultato > 0) then  risultato := 0; else  risultato := 1; end if;
END if;

if(p_idTipoAtto <> 0) then
--Verifica se il documento ¿ repertoriato
select count(profile.docnumber) into risultato
from profile, dpa_associazione_templates, dpa_oggetti_custom
where
profile.docnumber = dpa_associazione_templates.doc_number
and
dpa_associazione_templates.id_oggetto = dpa_oggetti_custom.system_id
and
profile.system_id = p_idProfile
and
dpa_associazione_templates.id_template = p_idTipoAtto
and
dpa_oggetti_custom.repertorio = 1
and
dpa_associazione_templates.valore_oggetto_db is not null;


if ( risultato > 0) then risultato := 1; else risultato := 0; end if;

end if;

else risultato := 1; end if;



EXCEPTION
WHEN OTHERS THEN
risultato := -1;


end;
return risultato;
end GetSeRimuovibile;
/

SHOW ERRORS;


--
-- TMP_GETCREATORE  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".tmp_GetCreatore(tipoUtenteRuolo char, tipoOggetto char, id int)
RETURN int IS retValue int;
accessrights int := null;
BEGIN
retValue := 0;

if (tipoOggetto = 'D') then
if (tipoUtenteRuolo = 'U') then
select p.author into retValue
from profile p
where system_id = id;
end if;
elsif (tipoUtenteRuolo = 'R') then
select cg.id_gruppo into retValue
from dpa_corr_globali cg
where system_id =
(
select p.id_ruolo_creatore
from profile p
where system_id = id
);
end if;

if (retValue is null) then
if (tipoUtenteRuolo = 'U') then
accessrights := 0;
elsif (tipoUtenteRuolo = 'R') then
accessrights := 255;
end if;

select s.personorgroup into retValue
from security s
where rownum = 1 and
s.thing = id and
s.accessrights = accessrights and
s.cha_tipo_diritto = 'P';
end if;

RETURN retValue;
END tmp_GetCreatore;
/

SHOW ERRORS;


--
-- GETCOUNTNOTE  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".GetCountNote(tipoOggetto CHAR, idOggetto NUMBER, note NVARCHAR2, idUtente NUMBER, idGruppo NUMBER)
RETURN NUMBER IS retValue NUMBER;
noteCompl VARCHAR2(2000);
BEGIN
noteCompl := '%' || upper(note) || '%';
SELECT COUNT(SYSTEM_ID) INTO retValue
FROM   DPA_NOTE N
WHERE  N.TIPOOGGETTOASSOCIATO = tipoOggetto AND
N.IDOGGETTOASSOCIATO = idOggetto AND
upper(N.TESTO) LIKE upper(noteCompl) AND
(N.TIPOVISIBILITA = 'T' OR
(N.TIPOVISIBILITA = 'P' AND N.IDUTENTECREATORE = idUtente) OR
(N.TIPOVISIBILITA = 'R' AND N.IDRUOLOCREATORE = idGruppo));
RETURN retValue;
END GetCountNote;
/

SHOW ERRORS;


--
-- COUNTALLEGATI_BY_DOCNUMBER  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".CountAllegati_BY_DocNumber (Id INT)
RETURN number IS risultato number;

BEGIN
begin
SELECT COUNT(V.VERSION_ID) into risultato
FROM PROFILE P INNER JOIN VERSIONS V ON P.DOCNUMBER = V.DOCNUMBER
WHERE (P.DOCNUMBER = Id AND V.VERSION = 0) OR P.ID_DOCUMENTO_PRINCIPALE = Id;

EXCEPTION
WHEN OTHERS THEN
risultato:=-1;
end;
RETURN risultato;
END CountAllegati_BY_DocNumber;
/

SHOW ERRORS;


--
-- CHECKSECURITY  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".checkSecurity 
(
 thingParam INT,
 idpeopleParam INT,
 idgroupParam INT,
 tipoObjParam VARCHAR
)
RETURN INT IS retValue INT;
 
cnt INT := 0;

BEGIN
   retValue :=1;-- checkVisibilitaArchivio(tipoObjParam, thingParam, idgroupParam);
    if (retValue=1) then
        SELECT COUNT(*) INTO cnt 
        FROM security 
        WHERE thing = thingParam AND personorgroup IN (idgroupParam, idpeopleParam)
        and ACCESSRIGHTS>0;
        
        IF (cnt > 0) THEN
        retValue := 1;
        ELSE
        retValue := 0;
        END IF;
   end if;
   RETURN retValue;
END checkSecurity;
/

SHOW ERRORS;


--
-- CHECKSECURITYDOCUMENTO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".checkSecurityDocumento 
(
 idprofileParam INT,
 idpeopleParam INT,
 idgroupParam INT,
 tipoObjParam VARCHAR
)
RETURN INT IS retValue INT;

thingVar INT := NULL;

BEGIN
   retValue := 0;

    -- Verifica se il documento richiesto è un allegato,
    -- in tal caso verrà verificata la security del documento principale
    SELECT ID_DOCUMENTO_PRINCIPALE INTO thingVar
    FROM PROFILE 
    WHERE SYSTEM_ID = idprofileParam;
    
    IF (thingVar IS NULL) THEN
        thingVar := idprofileParam;
    END IF;
   
   retValue := checkSecurity(thingVar, idpeopleParam, idgroupParam, tipoObjParam);

   RETURN retValue;   
END checkSecurityDocumento;
/

SHOW ERRORS;


--
-- GETSEDOCTRASMCONRAG  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".GetSeDocTrasmConRag(idprofile number,vardescragione varchar)  RETURN NUMBER IS
risultato NUMBER;
begin
BEGIN
if(upper(varDescRagione)!='TUTTE')
then

SELECT COUNT (tx.system_id) into risultato
FROM dpa_trasmissione tx, dpa_trasm_singola ts, dpa_ragione_trasm tr
WHERE tx.system_id = ts.id_trasmissione
AND ts.id_ragione = tr.system_id
AND UPPER (tr.var_desc_ragione) = UPPER (varDescRagione)
AND tx.id_profile = idprofile;
else
/* se  stato trasmesso almeno una volta */
SELECT COUNT (tx.system_id) into risultato
FROM dpa_trasmissione tx
WHERE tx.id_profile = idprofile;

end if;

if(risultato>0)
then
risultato:=1;
END if;

EXCEPTION
WHEN others THEN
risultato:=0;

end;
return risultato ;
END GetSeDocTrasmConRag ;
/

SHOW ERRORS;


--
-- GETPEOPLEUSERID  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getPeopleUserId (peopleId INT)
RETURN varchar IS risultato varchar(256);
BEGIN

select user_id into risultato from people where system_id = peopleId;

RETURN risultato;
END getPeopleUserId;
/

SHOW ERRORS;


--
-- ANNUALEDOCTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".AnnualeDocTableFunction(mese number,p_anno number,id_reg number,id_ammi number,VAR_SED varchar)
return AnnualeDocTableRow pipelined is
out_rec AnnualeDocTableType := AnnualeDocTableType(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
--dichiarazioni variabili
totAnnDoc float;
totAnnProt float;
percAnnProt float;
totAnnProtA float;
percAnnProtA float;
totAnnProtP float;
percAnnProtP float;
totAnnProtI float;
percAnnProtI float;
totAnnDocGrigi float;
percAnnDocGrigi float;
totAnnDocClass float;
percAnnDocClass float;
totAnnDocProf float;
totAnnProtClass float;
percAnnProtClass float;
totAnnProtAClass float;
percAnnProtAClass float;
totAnnProtPClass float;
percAnnProtPClass float;
totAnnProtIClass float;
percAnnProtIClass float;
totAnnProtAnnul float;
percAnnProtAnnul float ;
/******************************************************************/
/**************Dati Riepilogativi del Mese*****************************/
/******************************************************************/
/*Dati Generali*/
totMonDoc float;
totMonProt float;
totMonProtA float;
totMonProtP float;
totMonProtI float;
totMonProtAnnul float;
totMonDocGrigi float;
totMonDocClass float;
/*docs senza docs acq*/
totMonDocProf float;
totMonProtClass float;
totMonProtAClass float;
totMonProtPClass float;
totMonProtIClass float;
/*Percentuali*/
percMonProt float;
percMonProtA float;
percMonProtP float;
percMonProtI float;
percMonProtAnnul float;
percMonDocGrigi float;
percMonDocClass float;
percMonProtClass float;
percMonProtAClass float;
percMonProtPClass float;
percMonProtIClass float;
totMonProtAnnulClass float;
totMonDocGrigiClass float;
/*Dichiarazione delle variabili per i profili (Immagini) *************************************************************************************************/
/*Mensili*/
totMonProf float;
totMonProfProt float;
totMonProfProtA float;
totMonProfProtP float;
totMonProfProtI float;
totMonProfGrigi float;
totMonProfProtAnnul float;
/*Annuali*/
totAnnProf float;
totAnnProfProt float;
totAnnProfProtA float;
totAnnProfProtP float;
totAnnProfProtI float;
totAnnProfGrigi float;
totAnnProfProtAnnull float;
/*Percentuali*/
PercAnnProfProt float;
PercAnnProfProtA float;
PercAnnProfProtP float;
PercAnnProfProtI float;
PercAnnProfGrigi float;
PercAnnProfProtAnnull float;

TotAnnDocGrigiClass float;
percAnnDocGrigiClass float;

TotAnnProtAnnulClass float;
percAnnProtannulClass float;

MESE_VC VARCHAR(255);
var_s VARCHAR(255);
i number;
begin


--verifica valore parametro var_sede
if (var_sed = '')
then
var_s := null;
else
var_s := var_sed;
end if;

/*Impostiamo i valori di default*/
/*Mensili*/
totMonProf  := 0;
totMonProfProt  := 0;
totMonProfProtA  := 0;
totMonProfProtP  := 0;
totMonProfProtI  := 0;
totMonProfGrigi  := 0;
/*Annuali*/
totAnnProf  := 0;
totAnnProfProt  := 0;
totAnnProfProtA  := 0;
totAnnProfProtP := 0;
totAnnProfProtI := 0;
totAnnProfGrigi := 0;
/*Percentuali*/
PercAnnProfProt := 0;
PercAnnProfProtA := 0;
PercAnnProfProtP := 0;
PercAnnProfProtI := 0;
PercAnnProfGrigi := 0;
totAnnProfProtAnnull := 0;
/**************************************************************************************************************************************************/

percMonProt := 0;
percMonProtA := 0;
percMonProtP := 0;
percMonProtI := 0;
percMonProtAnnul := 0;
percMonDocGrigi := 0;
percMonDocClass := 0;
percMonProtClass := 0;
percMonProtAClass := 0;
percMonProtPClass := 0;
percMonProtIClass := 0;
/******************************************************************/
totAnnDoc := 0;
totAnnProt := 0;
totAnnProtA := 0;
totAnnProtP := 0;
totAnnProtI := 0;
totAnnDocGrigi := 0;
totAnnDocClass := 0;
totAnnDocProf := 0;
totAnnProtClass := 0;
totAnnProtAClass := 0;
totAnnProtPClass := 0;
totAnnProtIClass := 0;
totMonProtAnnulClass := 0;
totMonDocGrigiClass := 0;
totAnnProtAnnul := 0;
percAnnProt := 0;
percAnnProtA := 0;
percAnnProtP := 0;
percAnnProtI := 0;
percAnnDocGrigi := 0;
percAnnDocClass := 0;
percAnnProtClass := 0;
percAnnProtAClass := 0;
percAnnProtPClass := 0;
percAnnProtIClass := 0;
percAnnProtAnnul := 0;

totMonProfProt  := 0;
totMonProfProtA  := 0;
totMonProfProtP  := 0;
totMonProfProtI  := 0;
totMonProfGrigi  := 0;
totMonProfProtAnnul := 0;
PercAnnProfProtAnnull := 0;

TotAnnDocGrigiClass := 0;
percAnnDocGrigiClass := 0;

TotAnnProtAnnulClass := 0;
percAnnProtannulClass := 0;


/*cicliamo dall'inizio dell'anno fino al mese di interesse*/

i := 0;

while (i < mese)
loop
/*Incrementiamo il contatore*/
i := i + 1;

/*Query che recupera i dati del singolo mese*/
/*Totale dati del mese*/
/*Non filtriamo sul registro, questa query deve essere ripetuta per tutti i mesi di interesse per ogni registro*/
if((var_s != ' ') and (var_s is not null))
then
select count(profile.system_id) into totMonProtA from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtP from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtI from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtAnnul from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO  = p_anno AND profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND  profile.dta_annulla is not null AND profile.num_proto is not null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonDocGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi and profile.num_proto is null AND profile.cha_tipo_proto = 'G' AND ID_DOCUMENTO_PRINCIPALE  IS NULL AND to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno AND profile.var_sede = var_s;

select count(p.system_id) into totMonProfProtA from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'A' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null AND p.var_sede = var_s;
select count(p.system_id) into totMonProfProtP from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'P' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null AND p.var_sede = var_s;
select count(p.system_id) into totMonProfProtI from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'I' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null AND p.var_sede = var_s;
select count(p.system_id) into totMonProfProtAnnul from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno AND num_proto is not null and p.cha_da_proto = '0' and  p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is not null AND p.var_sede = var_s;
select count(profile.system_id) into totMonProfGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi and profile.cha_img = '0' and to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  AND ID_DOCUMENTO_PRINCIPALE  IS NULL AND profile.var_sede = var_s;

select count(profile.system_id) into totMonProtAClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtPClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtIClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtAnnulClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno and profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND profile.dta_annulla is not null  AND profile.var_sede = var_s;
select count(profile.system_id) into totMonDocGrigiClass from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi AND to_number(to_char(profile.creation_date,'MM')) = i AND profile.cha_fascicolato = '1' AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  AND ID_DOCUMENTO_PRINCIPALE  IS NULL AND profile.var_sede = var_s;

else
select count(profile.system_id) into totMonProtA from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null;
select count(profile.system_id) into totMonProtP from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null;
select count(profile.system_id) into totMonProtI from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null;
select count(profile.system_id) into totMonProtAnnul from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO  = p_anno AND profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND  profile.dta_annulla is not null AND profile.num_proto is not null;
select count(profile.system_id) into totMonDocGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and  profile.author = people.system_id and people.id_amm = id_ammi and profile.num_proto is null AND profile.cha_tipo_proto = 'G'  AND ID_DOCUMENTO_PRINCIPALE  IS NULL AND to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno;

select count(p.system_id) into totMonProfProtA from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'A' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null;
select count(p.system_id) into totMonProfProtP from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'P' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null;
select count(p.system_id) into totMonProfProtI from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'I' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null;
select count(p.system_id) into totMonProfProtAnnul from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno AND num_proto is not null and p.cha_da_proto = '0' and  p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is not null;
select count(profile.system_id) into totMonProfGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi and profile.cha_img = '0' and to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  AND ID_DOCUMENTO_PRINCIPALE  IS NULL;

select count(profile.system_id) into totMonProtAClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null;
select count(profile.system_id) into totMonProtPClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null;
select count(profile.system_id) into totMonProtIClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null;
select count(profile.system_id) into totMonProtAnnulClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno and profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND profile.dta_annulla is not null ;
select count(profile.system_id) into totMonDocGrigiClass from profile,dpa_l_ruolo_reg,people where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi AND to_number(to_char(profile.creation_date,'MM')) = i AND profile.cha_fascicolato = '1' AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  AND ID_DOCUMENTO_PRINCIPALE  IS NULL;

end if;

/*Calcoliamo i valori annuali a partire dai dati del mese***************************************/
--
totMonProt := totMonProtA + totMonProtP + totMonProtI + totMonProtAnnul;
totMonDoc := totMonProt + totMonDocGrigi;
totAnnDoc := totAnnDoc + totMonDoc;
totAnnProt := totAnnProt + totMonProt;
totAnnProtA := totAnnProtA + totMonProtA;
totAnnProtP := totAnnProtP + totMonProtP;
totAnnProtI := totAnnProtI + totMonProtI;
totAnnDocGrigi := totAnnDocGrigi + totMonDocGrigi;

totMonDocClass := totMonDocGrigiClass + totMonProtAnnulClass + totMonProtAClass + totMonProtPClass + totMonProtIClass;
totAnnDocClass := totAnnDocClass + totMonDocClass;

totMonProtClass := totMonProtAnnulClass + totMonProtAClass + totMonProtPClass + totMonProtIClass;
totAnnProtClass := totAnnProtClass + totMonProtClass;
totAnnProtAClass := totAnnProtAClass + totMonProtAClass;
totAnnProtPClass := totAnnProtPClass + totMonProtPClass;
totAnnProtIClass := totAnnProtIClass + totMonProtIClass;
TotAnnProtAnnulClass := TotAnnProtAnnulClass + totMonProtAnnulClass;


totAnnProtAnnul := totAnnProtAnnul + totMonProtAnnul;
--
totMonProf := totMonProfProtAnnul + totMonProfGrigi + totMonProfProtA + totMonProfProtP + totMonProfProtI;
totAnnProf  := totAnnProf + totMonProf;
--
totMonProfProt :=  totMonProfProtAnnul + totMonProfProtA + totMonProfProtP + totMonProfProtI;
totAnnProfProt  := totAnnProfProt + totMonProfProt;
totAnnProfProtA  := totAnnProfProtA + totMonProfProtA;
totAnnProfProtP := totAnnProfProtP + totMonProfProtP;
totAnnProfProtI := totAnnProfProtI + totMonProfProtI;
totAnnProfGrigi := totAnnProfGrigi + totMonProfGrigi;
totAnnProfProtAnnull := totAnnProfProtAnnull + totMonProfProtAnnul;

TotAnnDocGrigiClass := TotAnnDocGrigiClass + totMonDocGrigiClass;

/*****Percentuali************************************************************************/
/*Percentuale dei protoclli annullati classificati*/
if(TotAnnProtAnnulClass <> 0 and totAnnProtClass <> 0)
then
percAnnProtannulClass := ROUND(((TotAnnProtAnnulClass / totAnnProtClass) * 100),2);
end if;
/*Percentuale annuale dei documenti grigi classificati*/
if(totAnnDocClass <> 0 and TotAnnDocGrigiClass <> 0)
then
percAnnDocGrigiClass := ROUND(((TotAnnDocGrigiClass / totAnnDocClass) * 100),2);
end if;




/*Percentuale dei profili annullati*/
if((TotAnnProfProt <> 0) AND (totAnnProfProtAnnull <> 0))
then
PercAnnProfProtAnnull := ROUND(((totAnnProfProtAnnull / TotAnnProfProt) * 100),2);
end if;

if(totAnnProt <> 0)
then
/*Percentuale di documenti protocollati*/
percAnnProt := ROUND(((totAnnProt / totAnnDoc) * 100),2);
if(totAnnProtA <> 0)
then
/*Percentuale di protocolli in arrivo*/
percAnnProtA := ROUND(((totAnnProtA / totAnnProt) * 100),2);
end if;

if(totAnnProtP <> 0)
then
/*Percentuale di protocolli in partenza*/
percAnnProtP := ROUND(((totAnnProtP / totAnnProt) * 100),2);
end if;

if(totAnnProtI <> 0)
then
/*Percentuale di protocolli interni*/
percAnnProtI := ROUND(((totAnnProtI / totAnnProt) * 100),2);
end if;

if(totAnnProtAnnul <> 0)
then
/*Percentuale di protocolli annullati*/
percAnnProtAnnul := ROUND(((totAnnProtAnnul / totAnnProt) * 100),2);
end if;
end if;

if(totAnnDoc <> 0)
then
if(totAnnDocGrigi <> 0)
then
/*Percentuale di doc grigi*/
percAnnDocGrigi := ROUND(((totAnnDocGrigi / totAnnDoc ) * 100),2);
end if;
if(totAnnDocClass <> 0)
then
/*Percentuale di doc classificati*/
percAnnDocClass := ROUND(((totAnnDocClass / totAnnDoc) * 100),2);
end if;
end if;

if(totAnnDocClass <> 0)
then
if(totAnnProtClass <> 0)
then
/*Percentuale di doc classificati e protocollati*/
percAnnProtClass := ROUND(((totAnnProtClass / totAnnDocClass)*100),2);
if(totAnnProtAClass <> 0)
then
/*Percentuale di doc classificati e protocollati in arrivo*/
percAnnProtAClass := ROUND(((totAnnProtAClass / totAnnProtClass) * 100),2);
end if;
if(totAnnProtPClass <> 0)
then
/*Percentuale di doc classificati e protocollati in partenza*/
percAnnProtPClass := ROUND(((totAnnProtPClass / totAnnProtClass) * 100),2) ;
end if;
if(totAnnProtIClass <> 0)
then
/*Percentuale di doc classificati e protocollati interni*/
percAnnProtIClass := ROUND(((totAnnProtIClass / totAnnProtClass) * 100),2);
end if;
end if;
end if;

/*Calcoliamo le percentuali mensili**************************************************************************************/
if(totMonDoc <> 0)
then
if(totMonProt <> 0)
then
/*Percentuale mensile di protocolli*/
percMonProt := ROUND(((totMonProt / totMonDoc) * 100),2);
if(totMonProtA <> 0)
then
/*Percentuale mensile di protocolli ARRIVO*/
percMonProtA := ROUND(((totMonProtA / totMonProt) * 100),2);
end if;
if(totMonProtP <> 0)
then
/*Percentuale mensile di protocolli PARTENZA*/
percMonProtP := ROUND(((totMonProtP / totMonProt) * 100),2);
end if;
if(totMonProtI <> 0)
then
/*Percentuale mensile di protocolli INTERNI*/
percMonProtI := ROUND(((totMonProtI / totMonProt) * 100),2);
end if;
if(totMonProtAnnul <> 0)
then
/*Percentuale mensile di protocolli Annullati*/
percMonProtAnnul := ROUND(((totMonProtAnnul / totMonProt) * 100),2);
end if;
end if;

if(totMonDocGrigi <> 0)
then
/*Percentuale mensile di Doc Grigi*/
percMonDocGrigi := ROUND(((totMonDocGrigi / totMonDoc) * 100),2);
end if;
if(totMonDocClass <> 0)
then
/*Percentuale mensile di Doc Class*/
percMonDocClass := ROUND(((totMonDocClass / totMonDoc) * 100),2);
end if;
if(totMonProtClass <> 0)
then
/*Percentuale mensile di protocolli Class*/
percMonProtClass := ROUND(((totMonProtClass / totMonDoc) * 100),2);
end if;
if(totMonProtAClass <> 0)
then
/*Percentuale mensile di protocolli Arrivo Class*/
percMonProtAClass := ROUND(((totMonProtAClass / totMonDoc) * 100),2);
end if;
if(totMonProtPClass <> 0)
then
/*Percentuale mensile di protocolli Partenza Class*/
percMonProtPClass := ROUND(((totMonProtPClass / totMonDoc) * 100),2);
end if;
if(totMonProtIClass <> 0)
then
/*Percentuale mensile di protocolli Interni Class*/
percMonProtIClass := ROUND(((totMonProtIClass / totMonDoc) * 100),2);
end if;

end if;
/*******************************************************************************************************************/
/*Calcoliamo le percentuali  dei profili ( Immagini)  */
if(totAnnProf<>0)
then
if(totAnnProfGrigi<>0)
then
/*Percentuale  annuale di profili grigi*/
PercAnnProfGrigi := ROUND(((totAnnProfGrigi / totAnnProf) * 100),2);
end if;

if(totAnnProfProt<>0)
then
/*Percentuale  annuale di profili protocollati*/
PercAnnProfProt := ROUND(((totAnnProfProt / totAnnProf) * 100),2);
end if;

if(totAnnProfProtA<>0)
then
/*Percentuale  annuale di profili protocollati ARRIVO*/
PercAnnProfProtA := ROUND(((totAnnProfProtA / totAnnProfProt) * 100),2);
end if;

if(totAnnProfProtP<>0)
then
/*Percentuale  annuale di profili protocollati PARTENZA*/
PercAnnProfProtP := ROUND(((totAnnProfProtP / totAnnProfProt) * 100),2);
end if;

if(totAnnProfProtI<>0)
then
/*Percentuale  annuale di profili protocollati PARTENZA*/
PercAnnProfProtI := ROUND(((totAnnProfProtI / totAnnProfProt) * 100),2);
end if;
end if;
/*******************************************************************************************************************/

MESE_VC :=
CASE i
WHEN 1 THEN 'Gennaio'
WHEN 2 THEN 'Febbraio'
WHEN 3 THEN 'Marzo'
WHEN 4 THEN 'Aprile'
WHEN 5 THEN 'Maggio'
WHEN 6 THEN 'Giugno'
WHEN 7 THEN 'Luglio'
WHEN 8 THEN 'Agosto'
WHEN 9 THEN 'Settembre'
WHEN 10 THEN 'Ottobre'
WHEN 11 THEN 'Novembre'
WHEN 12 THEN 'Dicembre'
end;

/*inseriamo i dati mensili in una tabella*/
out_rec.THING := MESE_VC;
out_rec.TOT_DOC := totMonDoc;
out_rec.GRIGI := totMonDocGrigi;
out_rec.PERC_GRIGI := to_char(percMonDocGrigi);
out_rec.PROT := totMonProt;
out_rec.PERC_PROT := to_char(percMonProt);
out_rec.ANNULL := totMonProtAnnul;
out_rec.PERC_ANNULL := to_char(percMonProtAnnul);
out_rec.ARRIVO := totMonProtA;
out_rec.PERC_ARRIVO := to_char(percMonProtA);
out_rec.PARTENZA := totMonProtP;
out_rec.PERC_PARTENZA := to_char(percMonProtP);
out_rec.INTERNI := totMonProtI;
out_rec.PERC_INTERNI := to_char(percMonProtI);
PIPE ROW(out_rec);


/*RESET DELLE VARIABILI*/
totMonDoc := 0;
totMonProt := 0;
totMonProtA := 0;
totMonProtP := 0;
totMonProtI := 0;
totMonDocGrigi := 0;
/*RESET DELLE PERCENTUALI MENSILI*/
percMonProt := 0;
percMonProtA := 0;
percMonProtP := 0;
percMonProtI := 0;
percMonProtAnnul := 0;
percMonDocGrigi := 0;
percMonDocClass := 0;
percMonProtClass := 0;
percMonProtAClass := 0;
percMonProtPClass := 0;
percMonProtIClass := 0;
/**********************************/
end loop;

/*Inseriamo nella tabella i valori reltivi all'anno*/
/*Aggiungiamo al totale dei documenti annuale il totale dei documenti grigi dell'anno */
/*totAnnDoc := totAnnDoc + totAnnDocGrigi;*/

out_rec.THING := p_anno;
out_rec.TOT_DOC := totAnnDoc;
out_rec.GRIGI := totAnnDocGrigi;
out_rec.PERC_GRIGI := to_char(percAnnDocGrigi);
out_rec.PROT := totAnnProt;
out_rec.PERC_PROT := to_char(percAnnProt);
out_rec.ANNULL := totAnnProtAnnul;
out_rec.PERC_ANNULL := to_char(percAnnProtAnnul);
out_rec.ARRIVO := totAnnProtA;
out_rec.PERC_ARRIVO := to_char(percAnnProtA);
out_rec.PARTENZA := totAnnProtP;
out_rec.PERC_PARTENZA := to_char(percAnnProtP);
out_rec.INTERNI := totAnnProtI;
out_rec.PERC_INTERNI := to_char(percAnnProtI);
PIPE ROW(out_rec);

/*Inseriamo nella tabella i valori reltivi alla classificazione*/
out_rec.THING := 'Classificati';
out_rec.TOT_DOC := totAnnDocClass;
out_rec.GRIGI := TotAnnDocGrigiClass;
out_rec.PERC_GRIGI := percAnnDocGrigiClass;
out_rec.PROT := totAnnProtClass;
out_rec.PERC_PROT := to_char(percAnnProtClass);
out_rec.ANNULL := to_char(TotAnnProtAnnulClass);
out_rec.PERC_ANNULL := to_char(percAnnProtannulClass);
out_rec.ARRIVO := totAnnProtAClass;
out_rec.PERC_ARRIVO := to_char(percAnnProtAClass);
out_rec.PARTENZA := totAnnProtPClass;
out_rec.PERC_PARTENZA := to_char(percAnnProtPClass);
out_rec.INTERNI := totAnnProtIClass;
out_rec.PERC_INTERNI := to_char(percAnnProtIClass);
PIPE ROW(out_rec);


/*Inseriamo nella tabella i valori reltivi alle Immagini - Doc. Fisici Acquisiti -*/
out_rec.THING := 'Senza Img.';
out_rec.TOT_DOC := totAnnProf;
out_rec.GRIGI := totAnnProfGrigi;
out_rec.PERC_GRIGI := PercAnnProfGrigi;
out_rec.PROT := totAnnProfProt;
out_rec.PERC_PROT := to_char(PercAnnProfProt);
out_rec.ANNULL := to_char(totAnnProfProtAnnull);
out_rec.PERC_ANNULL := to_char(PercAnnProfProtAnnull);
out_rec.ARRIVO := totAnnProfProtA;
out_rec.PERC_ARRIVO := to_char(PercAnnProfProtA);
out_rec.PARTENZA := totAnnProfProtP;
out_rec.PERC_PARTENZA := to_char(PercAnnProfProtP);
out_rec.INTERNI := totAnnProfProtI;
out_rec.PERC_INTERNI := to_char(PercAnnProfProtI);
PIPE ROW(out_rec);

/*RESET DELLE PERCENTUALI ANNUALI*/
percAnnProt := 0;
percAnnProtA := 0;
percAnnProtP := 0;
percAnnProtI := 0;
percAnnProtAnnul := 0;
percAnnDocGrigi := 0;
percAnnDocClass := 0;
percAnnProtClass := 0;
percAnnProtAClass := 0;
percAnnProtPClass := 0;
percAnnProtIClass := 0;
PercAnnProfGrigi := 0;
PercAnnProfProt := 0;
PercAnnProfProtA := 0;
PercAnnProfProtP := 0;
PercAnnProfProtI := 0;


RETURN;

EXCEPTION WHEN OTHERS THEN
RETURN;
END AnnualeDocTableFunction;
/

SHOW ERRORS;


--
-- CLASSCAT  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".classcat (docId INT)
RETURN varchar IS risultato varchar(2000);

item varchar(2000);

CURSOR cur IS
SELECT DISTINCT A.VAR_CODICE
FROM PROJECT A
WHERE A.CHA_TIPO_PROJ = 'F'
AND A.SYSTEM_ID IN
(SELECT A.ID_FASCICOLO FROM PROJECT A, PROJECT_COMPONENTS B WHERE A.SYSTEM_ID=B.PROJECT_ID AND B.LINK=docId);

BEGIN
risultato := '';
OPEN cur;
LOOP
FETCH cur INTO item;
EXIT WHEN cur%NOTFOUND;

IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item;
ELSE
risultato := risultato||item;
END IF;

END LOOP;

RETURN risultato;

END classcat;
/

SHOW ERRORS;


--
-- CORRCAT  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".CORRCAT (docId INT, tipo_proto VARCHAR)
RETURN varchar IS risultato varchar(4000);

item varchar(4000);
tipo_mitt_dest VARCHAR(10);
LNG INT;

CURSOR cur IS
SELECT c.var_desc_corr, dap.cha_tipo_mitt_dest
FROM DPA_CORR_GLOBALI c , DPA_DOC_ARRIVO_PAR dap
WHERE dap.id_profile=docId
AND dap.id_mitt_dest=c.system_id
order by dap.cha_tipo_mitt_dest desc;

BEGIN
risultato := '';
OPEN cur;
LOOP
FETCH cur INTO item,tipo_mitt_dest;
EXIT WHEN cur%NOTFOUND;

LNG:=LENGTh(risultato);

IF(risultato IS NOT NULL anD LNG>=(3900-128))
tHEN RETURN RISULTATO||'...';
ELSE
BEGIN

IF(tipo_proto = 'P' AND tipo_mitt_dest = 'M') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (M)';
ELSE
risultato := risultato||item ||' (M)';
END IF;
END IF;

IF(tipo_proto = 'P' AND tipo_mitt_dest = 'D') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (D)';
ELSE
risultato := risultato||item ||' (D)';
END IF;
END IF;

IF(tipo_proto = 'P' AND tipo_mitt_dest = 'C') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (CC)';
ELSE
risultato := risultato||item ||' (CC)';
END IF;
END IF;

IF(tipo_proto = 'A' AND tipo_mitt_dest = 'M') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (M)';
ELSE
risultato := risultato||item ||' (M)';
END IF;
END IF;

IF(tipo_proto = 'A' AND tipo_mitt_dest = 'I') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (MI)';
ELSE
risultato := risultato||item ||' (MI)';
END IF;
END IF;

IF(tipo_proto = 'I' AND tipo_mitt_dest = 'M') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (M)';
ELSE
risultato := risultato||item ||' (M)';
END IF;
END IF;

IF(tipo_proto = 'I' AND tipo_mitt_dest = 'D') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (D)';
ELSE
risultato := risultato||item ||' (D)';
END IF;
END IF;

IF(tipo_proto = 'I' AND tipo_mitt_dest = 'C') THEN
IF(risultato IS NOT NULL) THEN
risultato := risultato||'; '||item ||' (CC)';
ELSE
risultato := risultato||item ||' (CC)';
END IF;
END IF;

END;
END IF;

END LOOP;

RETURN risultato;

END Corrcat;
/

SHOW ERRORS;


--
-- DOCCLASSCOMPTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".docclasscomptablefunction (
id_amm       NUMBER,
id_registr   NUMBER,
id_anno      NUMBER,
sede         VARCHAR
)
RETURN docclasscomptablerow PIPELINED
IS
outrec                  docclasscomptabletype
:= docclasscomptabletype (NULL, NULL, NULL, NULL, NULL, NULL);


totdocclass             FLOAT;
codclass                VARCHAR (255);
descclass               VARCHAR (255);
totdocclassvt           NUMBER;
percdocclassvt          FLOAT;
contatore               FLOAT;
tmpcontatore            FLOAT;
v_var_sede              VARCHAR (100);
num_livello1            VARCHAR (255);
tot_primo_livello       NUMBER;
var_codice_livello1     VARCHAR (255);
description__livello1   VARCHAR (255);
system_id_vt            NUMBER;
description_vt          VARCHAR (255);
var_codice_vt           VARCHAR (255);
system_id_fasc          NUMBER;
system_id_fold          NUMBER;

CURSOR c_vocitit (amm NUMBER, id_reg NUMBER)
IS
SELECT   system_id, description, var_codice, num_livello
FROM project
WHERE var_codice IS NOT NULL
AND id_titolario = (select system_id from project where cha_stato= 'A' and var_codice = 'T' and id_amm=amm


)
AND id_amm = amm
AND cha_tipo_proj = 'T'
AND (id_registro = id_reg OR id_registro IS NULL)
ORDER BY var_cod_liv1;

CURSOR c_fascicoli (amm NUMBER, reg NUMBER, parentid NUMBER)
IS
SELECT system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND id_amm = amm
AND (id_registro = reg OR id_registro IS NULL)
AND id_parent = parentid;

CURSOR c_folder (amm NUMBER, reg NUMBER, parentid NUMBER)
IS
SELECT system_id
FROM project
WHERE cha_tipo_proj = 'C'
AND id_amm = amm
AND id_parent = parentid
AND (id_registro = reg OR id_registro IS NULL);
BEGIN

percdocclassvt := 0;
totdocclass := 0;
contatore := 0;
tot_primo_livello := 0;


IF (sede = ' ')
THEN
v_var_sede := NULL;
ELSE
v_var_sede := sede;
END IF;

IF ((v_var_sede <> '') AND (v_var_sede IS NOT NULL))
THEN
SELECT COUNT (DISTINCT (PROFILE.system_id))
INTO totdocclass
FROM PROFILE
WHERE cha_fascicolato = '1'
AND ((id_registro = id_registr) OR (id_registro IS NULL))
AND TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) = id_anno
AND (   (v_var_sede IS NULL AND PROFILE.var_sede IS NULL)
OR (var_sede IS NOT NULL AND PROFILE.var_sede = v_var_sede)
);
ELSE
SELECT COUNT (DISTINCT (PROFILE.system_id))
INTO totdocclass
FROM PROFILE
WHERE cha_fascicolato = '1'
AND (id_registro = id_registr OR id_registro IS NULL)
AND TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) = id_anno;
END IF;

OPEN c_vocitit (id_amm, id_registr);

LOOP
FETCH c_vocitit
INTO system_id_vt, description_vt, var_codice_vt, num_livello1;

EXIT WHEN c_vocitit%NOTFOUND;

IF (num_livello1 = 1)
THEN
var_codice_livello1 := var_codice_vt;
description__livello1 := description_vt;
END IF;


OPEN c_fascicoli (id_amm, id_registr, system_id_vt);

LOOP
FETCH c_fascicoli
INTO system_id_fasc;

EXIT WHEN c_fascicoli%NOTFOUND;


OPEN c_folder (id_amm, id_registr, system_id_fasc);

LOOP
FETCH c_folder
INTO system_id_fold;

EXIT WHEN c_folder%NOTFOUND;

IF ((v_var_sede <> '') AND (v_var_sede IS NOT NULL))
THEN
SELECT COUNT (DISTINCT (PROFILE.system_id))
INTO tmpcontatore
FROM project_components, PROFILE
WHERE project_components.project_id = system_id_fold
AND project_components.LINK = PROFILE.system_id
AND (TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) =
id_anno
)
AND (   (PROFILE.id_registro = id_registr)
OR (PROFILE.id_registro IS NULL)
)
AND (   (v_var_sede IS NULL AND PROFILE.var_sede IS NULL)
OR (    var_sede IS NOT NULL
AND PROFILE.var_sede = v_var_sede
)
);
ELSE
SELECT COUNT (DISTINCT (PROFILE.system_id))
INTO tmpcontatore
FROM project_components, PROFILE
WHERE project_components.project_id = system_id_fold
AND project_components.LINK = PROFILE.system_id
AND (TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) =
id_anno
)
AND (   (PROFILE.id_registro = id_registr)
OR (PROFILE.id_registro IS NULL)
);
END IF;

contatore := contatore + tmpcontatore;
END LOOP;


CLOSE c_folder;
END LOOP;


CLOSE c_fascicoli;


tot_primo_livello := tot_primo_livello + contatore;

contatore := 0;

percdocclassvt := 0;


IF (num_livello1 = 1 OR c_vocitit%NOTFOUND)
THEN
IF ((tot_primo_livello <> 0) AND (totdocclass <> 0))
THEN
percdocclassvt :=
ROUND (((tot_primo_livello / totdocclass) * 100), 2);
END IF;

outrec.tot_doc_class := totdocclass;
outrec.cod_class := var_codice_livello1;
outrec.desc_class := description__livello1;
outrec.tot_doc_class_vt := tot_primo_livello;
outrec.perc_doc_class_vt := percdocclassvt;
outrec.num_livello := '1';
PIPE ROW (outrec);
tot_primo_livello := 0;
percdocclassvt := 0;
END IF;
END LOOP;

CLOSE c_vocitit;

RETURN;
EXCEPTION
WHEN OTHERS
THEN
return;
END docclasscomptablefunction;
/

SHOW ERRORS;


--
-- DOCCLASSTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".docclasstablefunction (
id_amm       NUMBER,
id_registr   NUMBER,
id_anno      NUMBER,
sede         VARCHAR
)
RETURN docclasstablerow PIPELINED
IS
outrec           docclasstabletype
:= docclasstabletype (NULL, NULL, NULL, NULL, NULL);
totdocclass      FLOAT;
codclass         VARCHAR (255);
descclass        VARCHAR (255);
totdocclassvt    NUMBER;
percdocclassvt   FLOAT;
contatore        FLOAT;
tmpcontatore     FLOAT;
v_var_sede       VARCHAR (100);
system_id_vt     NUMBER;
description_vt   VARCHAR (255);
var_codice_vt    VARCHAR (255);
system_id_fasc   NUMBER;
system_id_fold   NUMBER;

CURSOR c_vocitit (amm NUMBER, id_reg NUMBER)
IS
SELECT   system_id, description, var_codice
FROM project
WHERE var_codice IS NOT NULL
AND id_titolario = (select system_id from project where cha_stato= 'A' and var_codice = 'T' and id_amm=amm)
AND id_amm = amm
AND cha_tipo_proj = 'T'
AND (id_registro = id_reg OR id_registro IS NULL)
ORDER BY var_cod_liv1;


CURSOR c_fascicoli (amm NUMBER, reg NUMBER, parentid NUMBER)
IS
SELECT system_id
FROM project
WHERE cha_tipo_proj = 'F'
AND id_amm = amm
AND (id_registro = reg OR id_registro IS NULL)
AND id_parent = parentid;

CURSOR c_folder (amm NUMBER, reg NUMBER, parentid NUMBER)
IS
SELECT system_id
FROM project
WHERE cha_tipo_proj = 'C'
AND id_amm = amm
AND id_parent = parentid
AND (id_registro = reg OR id_registro IS NULL);
BEGIN

percdocclassvt := 0;
totdocclass := 0;
contatore := 0;

IF (sede = '')
THEN
v_var_sede := NULL;
ELSE
v_var_sede := sede;
END IF;

IF ((v_var_sede <> ' ') AND (v_var_sede IS NOT NULL))
THEN
SELECT COUNT (PROFILE.system_id)
INTO totdocclass
FROM PROFILE
WHERE cha_fascicolato = '1'
AND ((id_registro = id_registr) OR (id_registro IS NULL))
AND TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) = id_anno
AND (   (v_var_sede IS NULL AND PROFILE.var_sede IS NULL)
OR (var_sede IS NOT NULL AND PROFILE.var_sede = v_var_sede)
);
ELSE
SELECT COUNT (PROFILE.system_id)
INTO totdocclass
FROM PROFILE
WHERE cha_fascicolato = '1'
AND (id_registro = id_registr OR id_registro IS NULL)
AND TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) = id_anno;
END IF;

OPEN c_vocitit (id_amm, id_registr);

LOOP
FETCH c_vocitit
INTO system_id_vt, description_vt, var_codice_vt;

EXIT WHEN c_vocitit%NOTFOUND;

OPEN c_fascicoli (id_amm, id_registr, system_id_vt);

LOOP
FETCH c_fascicoli
INTO system_id_fasc;

EXIT WHEN c_fascicoli%NOTFOUND;

OPEN c_folder (id_amm, id_registr, system_id_fasc);

LOOP
FETCH c_folder
INTO system_id_fold;

EXIT WHEN c_folder%NOTFOUND;
tmpcontatore := contatore;

IF ((v_var_sede <> ' ') AND (v_var_sede IS NOT NULL))
THEN
SELECT COUNT (PROFILE.system_id)
INTO contatore
FROM project_components, PROFILE
WHERE project_components.project_id = system_id_fold
AND project_components.LINK = PROFILE.system_id
AND (TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) =
id_anno
)
AND (   (PROFILE.id_registro = id_registr)
OR (PROFILE.id_registro IS NULL)
)
AND (   (v_var_sede IS NULL AND PROFILE.var_sede IS NULL)
OR (    var_sede IS NOT NULL
AND PROFILE.var_sede = v_var_sede
)
);
ELSE
SELECT COUNT (PROFILE.system_id)
INTO contatore
FROM project_components, PROFILE
WHERE project_components.project_id = system_id_fold
AND project_components.LINK = PROFILE.system_id
AND (TO_NUMBER (TO_CHAR (PROFILE.creation_date, 'YYYY')) =
id_anno
)
AND (   (PROFILE.id_registro = id_registr)
OR (PROFILE.id_registro IS NULL)
);
END IF;

contatore := contatore + tmpcontatore;
END LOOP;

CLOSE c_folder;
END LOOP;

CLOSE c_fascicoli;

IF ((contatore <> 0) AND (totdocclass <> 0))
THEN
percdocclassvt := ROUND (((contatore / totdocclass) * 100), 2);
outrec.tot_doc_class := totdocclass;
outrec.cod_class := var_codice_vt;
outrec.desc_class := description_vt;
outrec.tot_doc_class_vt := contatore;
outrec.perc_doc_class_vt := percdocclassvt;
PIPE ROW (outrec);
END IF;

contatore := 0;
percdocclassvt := 0;
END LOOP;

CLOSE c_vocitit;

RETURN;
EXCEPTION
WHEN OTHERS
THEN
RETURN;
END docclasstablefunction;
/

SHOW ERRORS;


--
-- DOCSEDETABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".DocSedeTableFunction (anno number,p_id_registro number,id_ammi number)
RETURN DocSedeTableRow PIPELINED IS
--inizializzazione dei tipi (documenti protocollati,classificati,profili)
out_doc_prot DocSedeTable := DocSedeTable(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
out_doc_class DocSedeTable := DocSedeTable(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
out_doc_prof DocSedeTable := DocSedeTable(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
--dichiarazioni  variabili
totDoc FLOAT;
totGrigi FLOAT;
totProt FLOAT;
totProtA FLOAT;
totProtP FLOAT;
totProtI FLOAT;
totProtClear FLOAT;
totClass FLOAT;
totClassGrigi FLOAT;
totClassProt float;
totClassProtA float;
totClassProtP float;
totClassProtI float;
totClassProtClear float;
totProf FLOAT;
totProfGrigi FLOAT;
totProfProt FLOAT;
totProfProtA FLOAT;
totProfProtP FLOAT;
totProfProtI FLOAT;
totProfProtClear FLOAT;
PercGrigi float;
PercProt float;
PercProtA float;
PercProtP float;
PercProtI float;
PercProtClear float;
PercClass float;
PercClassGrigi float;
PercClassProt float;
PercClassProtA float;
PercClassProtP float;
PercClassProtI float;
PercClassProtClear float;
PercProf FLOAT;
PercProfGrigi FLOAT;
PercProfProt FLOAT;
PercProfProtA FLOAT;
PercProfProtP FLOAT;
PercProfProtI FLOAT;
PercProfProtClear FLOAT;
--variabile del cursore
v_VAR_SEDE VARCHAR (255);
--dicharazione cursore
CURSOR C_VAR_SEDE IS
SELECT DISTINCT (VAR_SEDE) FROM PROFILE WHERE VAR_SEDE IS NOT NULL;
BEGIN -- CURSORE

--end setting
--apro il cursore
OPEN C_VAR_SEDE;
LOOP --ciclo del cursore
FETCH C_VAR_SEDE into v_VAR_SEDE;
EXIT WHEN C_VAR_SEDE%NOTFOUND;

--setting delle variabili
totDoc :=0;
totGrigi :=0;
totProt :=0;
totProtA :=0;
totProtP :=0;
totProtI :=0;
totProtClear :=0;
totClass :=0;
totClassGrigi :=0;
totClassProt :=0;
totClassProtA :=0;
totClassProtP :=0;
totClassProtI :=0;
totClassProtClear :=0;
totProf :=0;
totProfGrigi :=0;
totProfProt :=0;
totProfProtA :=0;
totProfProtP :=0;
totProfProtI :=0;
totProfProtClear :=0;
PercGrigi :=0;
PercProt :=0;
PercProtA :=0;
PercProtP :=0;
PercProtI :=0;
PercProtClear :=0;
PercClass :=0;
PercClassGrigi :=0;
PercClassProt :=0;
PercClassProtA :=0;
PercClassProtP :=0;
PercClassProtI :=0;
PercClassProtClear :=0;
PercProf :=0;
PercProfGrigi :=0;
PercProfProt :=0;
PercProfProtA :=0;
PercProfProtP :=0;
PercProfProtI :=0;
PercProfProtClear :=0;


-- conto i doc grigi della sede passata dal cursore (flitro @var_sede ,@anno, @id_registro)
select count(profile.system_id) into totGrigi from profile,people
where profile.author = people.system_id and people.id_amm = id_ammi and num_proto is null AND cha_tipo_proto = 'G' and id_documento_principale is null and
 TO_NUMBER(TO_CHAR(CREATION_DATE,'YYYY')) = anno and (profile.var_sede = v_VAR_SEDE);

--  conto i doc protocollati (Annullati) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro)
select count(system_id) into totProtClear from profile where cha_da_proto = '0' and  id_registro = p_id_registro
AND  dta_annulla is not null AND num_proto is not null AND NUM_ANNO_PROTO = anno AND ( profile.var_sede = v_VAR_SEDE);

-- conto i doc Protocollati (Arrivo) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro,tipo)
select count(profile.system_id) into totProtA from profile where profile.cha_da_proto = '0' and profile.id_registro = p_id_registro AND dta_annulla is null
AND profile.cha_tipo_proto = 'A' AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede  = v_VAR_SEDE);

-- conto i doc Protocollati (Partenza) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro,tipo)
select count(profile.system_id)into totProtP from profile where profile.cha_da_proto = '0' and profile.id_registro = p_id_registro AND dta_annulla is null
AND profile.cha_tipo_proto = 'P' AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede  = v_VAR_SEDE);

-- conto i doc Protocollati (Interni) della sede passata dal cursore (flitro @var_sede ,@anno,@id_registro,tipo)
select count(profile.system_id) into totProtI from profile where profile.cha_da_proto = '0' and profile.id_registro = p_id_registro AND dta_annulla is null
AND profile.cha_tipo_proto = 'I' AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede  = v_VAR_SEDE);


totProt := totProtA + totProtP +totProtI + totProtClear;

totDoc := totGrigi + totProt;

----CALCOLO PERCENTUALI  --
if ((totDoc <> 0) and (totGrigi <> 0 )) then -- % doc grigi
PercGrigi := ROUND(((totGrigi / totDoc) * 100),2);
end if;
if ((totDoc <> 0) and (totProt <> 0 )) then -- % doc protocollati
PercProt:= ROUND(((totProt / totDoc) * 100),2);
end if;
if ((totProtClear <> 0) and (totProt <> 0 )) then  -- % doc protocollati Annullati
PercProtClear := ROUND(((totProtClear / totProt) * 100),2);
end if;
if ((totProtA <> 0) and (totProt <> 0 )) then -- % doc protocollati Arrivo
PercProtA := ROUND(((totProtA / totProt) * 100),2);
end if;
if ((totProtP <> 0) and (totProt <> 0 )) then -- % doc protocollati Partenza
PercProtP := ROUND(((totProtP / totProt) * 100),2);
end if;
if ((totProtI <> 0) and (totProt <> 0 )) then -- % doc protocollati Interni
PercProtI := ROUND(((totProtI / totProt) * 100),2);
end if;
--assegno i risultati di protocollo prodotti all'oggetto out_doc_prot
out_doc_prot.ANNO := 'Creati';
out_doc_prot.SEDE := v_VAR_SEDE;
out_doc_prot.TOT_DOC := totDoc;
out_doc_prot.GRIGI := totGrigi;
out_doc_prot.PERC_GRIGI := PercGrigi;
out_doc_prot.PROT := totProt;
out_doc_prot.PERC_PROT := PercProt;
out_doc_prot.ANNULL := totProtClear;
out_doc_prot.PERC_ANNULL := PercProtClear;
out_doc_prot.ARRIVO := totProtA;
out_doc_prot.PERC_ARRIVO := PercProtA;
out_doc_prot.PARTENZA := totProtP;
out_doc_prot.PERC_PARTENZA := PercProtP;
out_doc_prot.INTERNI := totProtI;
out_doc_prot.PERC_INTERNI := PercProtI;
--end assegnazione
--inserimento
PIPE ROW(out_doc_prot);
--end inserimento

-- conto i doc grigi classificati
select count(profile.system_id) into totClassGrigi from profile,people
where profile.author = people.system_id and people.id_amm = id_ammi
AND profile.cha_fascicolato = '1' and profile.num_proto is null AND profile.cha_tipo_proto = 'G'  and id_documento_principale is null 
AND TO_NUMBER(TO_CHAR(PROFILE.CREATION_DATE,'YYYY')) = anno AND (profile.var_sede = v_VAR_SEDE);

--conto i doc classificati e protocollati A
select count(profile.system_id) into totClassProtA from profile where profile.cha_da_proto = '0'
and  profile.id_registro = p_id_registro AND profile.cha_fascicolato = '1'
AND profile.num_proto is not null AND profile.cha_tipo_proto = 'A' AND  profile.dta_annulla is null
AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede = v_VAR_SEDE);

--conto i doc classificati e protocollati P
select count(profile.system_id) into totClassProtP from profile where profile.cha_da_proto = '0'
and  profile.id_registro = p_id_registro AND profile.cha_fascicolato = '1'
AND profile.num_proto is not null AND profile.cha_tipo_proto = 'P' AND  profile.dta_annulla is null
AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede = v_VAR_SEDE);

--conto i doc classificati e protocollati I
select count(profile.system_id) into totClassProtI from profile where profile.cha_da_proto = '0'
and  profile.id_registro = p_id_registro AND profile.cha_fascicolato = '1'
AND profile.num_proto is not null AND profile.cha_tipo_proto = 'I' AND  profile.dta_annulla is null
AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede = v_VAR_SEDE);

--conto i doc classificati e annullati
select count (profile.system_id) into totClassProtClear from profile where profile.cha_da_proto = '0'
and  profile.id_registro = p_id_registro AND profile.cha_fascicolato = '1'
AND  profile.dta_annulla is not null AND profile.num_proto is not null
AND profile.NUM_ANNO_PROTO = anno AND (profile.var_sede = v_VAR_SEDE);

totClassProt := totClassProtA + totClassProtP +totClassProtI + totClassProtClear;

totClass := totClassGrigi + totClassProt;


----CALCOLO PERCENTUALI  --
if ((totDoc <> 0) and (totClass <> 0 )) then -- % doc classificati
PercClass:= ROUND(((totClass / totDoc) * 100),2);
end if;
if ((totClassGrigi <> 0) and (totClass <> 0 )) then -- % doc grigi e classificati
PercClassGrigi := ROUND(((totClassGrigi / totClass) * 100),2);
end if;
if ((totClassProt <> 0) and (totClass <> 0 )) then -- % doc protocollati e classificati
PercClassProt := ROUND(((totClassProt /totClass) * 100),2);
end if;
if ((totClassProtClear <> 0) and (totClassProt <> 0 )) then-- % doc protocollati classificati ed annullati
PercClassProtClear := ROUND(((totClassProtClear / totClassProt) * 100),2);
end if;
if ((totClassProtA <> 0) and (totClassProt <> 0 )) then -- % doc protocollati Arrivo classificiati
PercClassProtA := ROUND(((totClassProtA / totClassProt) * 100),2);
end if;
if ((totClassProtP <> 0) and (totClassProt <> 0 )) then-- % doc protocollati Partenza e classificati
PercClassProtP := ROUND(((totClassProtP / totClassProt) * 100),2);
end if;
if ((totClassProtI <> 0) and (totClassProt <> 0 )) then -- % doc protocollati Partenza e classificati
PercClassProtI := ROUND(((totClassProtI / totClassProt) * 100),2);
end if;
--assegno i risultati di protocollo prodotti all'oggetto out_doc_class
out_doc_class.ANNO := 'Classificati';
out_doc_class.SEDE := v_VAR_SEDE;
out_doc_class.TOT_DOC := TotClass;
out_doc_class.GRIGI := totClassGrigi;
out_doc_class.PERC_GRIGI := PercClassGrigi;
out_doc_class.PROT := totClassProt;
out_doc_class.PERC_PROT := PercClassProt;
out_doc_class.ANNULL := totClassProtClear;
out_doc_class.PERC_ANNULL := PercClassProtClear;
out_doc_class.ARRIVO := totClassProtA;
out_doc_class.PERC_ARRIVO := PercClassProtA;
out_doc_class.PARTENZA := totClassProtP;
out_doc_class.PERC_PARTENZA := PercClassProtP;
out_doc_class.INTERNI := totClassProtI;
out_doc_class.PERC_INTERNI := PercClassProtI;
--end assegnazione
--inserimento
PIPE ROW(out_doc_class);
--end inserimento

select count(profile.system_id) into totProfGrigi from profile,people
where profile.author = people.system_id and people.id_amm = id_ammi
and profile.cha_img = '0' and TO_NUMBER(TO_CHAR(profile.CREATION_DATE,'YYYY')) = anno and profile.cha_tipo_proto = 'G'  and id_documento_principale is null AND (profile.var_sede = v_VAR_SEDE);

-- conto i doc protocollati  A senza doc acquisiti
select count(p.system_id) into totProfProtA from profile p
where p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = p_id_registro AND p.NUM_ANNO_PROTO = anno AND p.dta_annulla is null
and p.cha_tipo_proto = 'A' AND (p.var_sede = v_VAR_SEDE);

-- conto i doc protocollati P senza doc acquisiti
select count(p.system_id) into totProfProtP from profile p
where p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = p_id_registro AND p.NUM_ANNO_PROTO = anno AND p.dta_annulla is null
and p.cha_tipo_proto = 'P' AND (p.var_sede = v_VAR_SEDE);

-- conto i doc protocollati  I senza doc acquisiti
select count(p.system_id) into totProfProtI from profile p
where p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = p_id_registro AND p.NUM_ANNO_PROTO = anno AND p.dta_annulla is null
and p.cha_tipo_proto = 'I' AND (p.var_sede = v_VAR_SEDE);

-- conto i doc protocollati  Annullati senza doc acquisiti
select count(profile.system_id) into totProfProtClear from profile where profile.cha_da_proto = '0' and  profile.id_registro = p_id_registro
AND profile.dta_annulla is not null AND profile.num_proto is not null and profile.cha_img = '0' and profile.NUM_ANNO_PROTO = anno AND (profile.var_sede = v_VAR_SEDE);

totProfProt := totProfProtA + totProfProtP + totProfProtI + totProfProtClear;
totProf := totProfGrigi + totProfProt;

-- calcolo percentuali --
if ((totDoc <> 0) and (totProf <> 0 )) then -- %  profili
PercProf := ROUND(((totProf / totDoc) * 100),2);
end if;
if ((totProfGrigi <> 0) and (totProf <> 0 )) then-- % profili doc grigi
PercProfGrigi := ROUND(((totProfGrigi / totProf) * 100),2);
end if;
if ((totProfProt <> 0) and (totProf <> 0 )) then -- % profili protocollati
PercProfProt := ROUND(((totProfProt / totProf) * 100),2);
end if;
if ((totProfProtClear <> 0) and (totProfProt <> 0 )) then -- % profili protocollati ed annullati
PercProfProtClear  := ROUND(((totProfProtClear / totProfProt) * 100),2);
end if;
if ((totProfProtA <> 0) and (totProfProt <> 0 )) then-- % profili protocollati A
PercProfProtA := ROUND(((totProfProtA / totProfProt) * 100),2);
end if;
if ((totProfProtP <> 0) and (totProfProt <> 0 )) then-- % profili protocollati P
PercProfProtP := ROUND(((totProfProtP / totProfProt) * 100),2);
end if;
if ((totProfProtI <> 0) and (totProfProt <> 0 )) then -- % profili protocollati I
PercProfProtI := ROUND(((totProfProtI / totProfProt) * 100),2);
end if;
--assegno i risultati di protocollo prodotti all'oggetto out_doc_class
out_doc_prof.ANNO := 'Senza Img.';
out_doc_prof.SEDE := v_VAR_SEDE;
out_doc_prof.TOT_DOC := totProf;
out_doc_prof.GRIGI := totProfGrigi;
out_doc_prof.PERC_GRIGI := PercProfGrigi;
out_doc_prof.PROT := totProfProt;
out_doc_prof.PERC_PROT := PercProfProt;
out_doc_prof.ANNULL := totProfProtClear;
out_doc_prof.PERC_ANNULL := PercProfProtClear;
out_doc_prof.ARRIVO := totProfProtA;
out_doc_prof.PERC_ARRIVO := PercProfProtA;
out_doc_prof.PARTENZA := totProfProtP;
out_doc_prof.PERC_PARTENZA := PercProfProtP;
out_doc_prof.INTERNI := totProfProtI;
out_doc_prof.PERC_INTERNI := PercProfProtI;
--end assegnazione
--inserimento
PIPE ROW(out_doc_prof);
--end inserimento
-- RESET DELLE VARIABILI
--end blocco manipolazione dati

END LOOP;  -- ciclo del cursore

CLOSE C_VAR_SEDE; --chiudo cursore
RETURN; --return funzione

EXCEPTION WHEN OTHERS THEN
RETURN;
END DocSedeTableFunction; -- end funzione
/

SHOW ERRORS;


--
-- DOCUOTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".DocUoTableFunction (anno number,id_reg number,id_amm number)
RETURN DocUoTableRow PIPELINED
IS
BEGIN
DECLARE
out_doc DocUoTable;
--dichiarazioni  variabili temporanee
ProtA FLOAT;
ProtP FLOAT;
ProtI FLOAT;
ProtAndAnn FLOAT;
ProtNotImg FLOAT;
ProtAndClass FLOAT;
PercProtA float;
PercProtP float;
PercProtI float;
PercProtAndAnn float;
PercProtNotImg float;
PercProtAndClass float;
--dichiarazioni variabili temporanee totali
TOTPROT FLOAT;
TOTPROTA FLOAT;
TOTPROTP FLOAT;
TOTPROTI FLOAT;
TOTPROTANN FLOAT;
TOTPROTPROF FLOAT;
TOTPROTCLASS FLOAT;
PERCTOTPROTA FLOAT;
PERCTOTPROTP FLOAT;
PERCTOTPROTI FLOAT;
PERCTOTPROTANN FLOAT;
PERCTOTPROTPROF FLOAT;
PERCTOTPROTCLASS FLOAT;
--VARIABILI CURSORE
TOT_PROT_UO FLOAT;
ID_UO FLOAT;
VAR_UO VARCHAR (100);

--dicharazione cursore
CURSOR C_UO IS
select count(*) TotProtUO, dpa_corr_globali.system_id,dpa_corr_globali.var_desc_corr
from profile,dpa_corr_globali
where profile.id_registro = id_reg and dpa_corr_globali.id_amm = id_amm
and    profile.num_anno_proto = anno and profile.id_uo_prot = dpa_corr_globali.system_id
group by dpa_corr_globali.var_desc_corr,dpa_corr_globali.system_id;
BEGIN
--setting variabili totali
TOTPROT := 0;
TOTPROTA := 0;
TOTPROTP := 0;
TOTPROTI := 0;
TOTPROTANN := 0;
TOTPROTPROF := 0;
TOTPROTCLASS := 0;
PERCTOTPROTA := 0;
PERCTOTPROTP := 0;
PERCTOTPROTI := 0;
PERCTOTPROTANN := 0;
PERCTOTPROTCLASS := 0;

--inizializzazione dell'output
out_doc := DocUoTable(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);


BEGIN -- CURSORE
--apro il cursore
OPEN C_UO;
LOOP --ciclo del cursore
FETCH C_UO into TOT_PROT_UO,ID_UO,VAR_UO;
EXIT WHEN C_UO%NOTFOUND;
-- BLOCCO MANIPOLAZIONI DATI
--setting variabili temporanee
protA := 0;
ProtP := 0;
ProtI := 0;
ProtAndAnn := 0;
ProtNotImg := 0;
ProtAndClass := 0;
PercProtA := 0;
PercProtP := 0;
PercProtI := 0;
PercProtAndAnn := 0;
PercProtNotImg := 0;
PercProtAndClass := 0;
--conta PROTO A per singola uo
select count(profile.system_id) into ProtA from profile
where profile.cha_da_proto = '0' and profile.id_registro = id_reg
and profile.num_anno_proto = anno AND profile.cha_tipo_proto = 'A'
and profile.id_uo_prot = ID_UO;
--conta PROTO P per singola uo
select count(profile.system_id) into ProtP from profile
where profile.cha_da_proto = '0' and profile.id_registro = id_reg
and profile.num_anno_proto = anno AND profile.cha_tipo_proto = 'P'
and profile.id_uo_prot = ID_UO;
--conta PROTO I per singola uo
select count(profile.system_id) into ProtI from profile
where profile.cha_da_proto = '0' and profile.id_registro = id_reg
and profile.num_anno_proto = anno AND profile.cha_tipo_proto = 'I'
and profile.id_uo_prot = ID_UO;
--conta i DOC Protocollati ed annullati per singola uo
select count(profile.system_id) into ProtAndAnn from profile
where profile.cha_da_proto = '0' and profile.id_registro = id_reg
and profile.num_anno_proto = anno AND profile.num_proto is not null
and profile.dta_annulla is not null and profile.id_uo_prot = ID_UO;
--conta I DOC protocollati SENZA IMG per singola uo
select count(profile.system_id) into ProtNotImg from profile
where profile.cha_img = '0' and profile.cha_da_proto = '0'
and profile.id_registro = id_reg and profile.num_anno_proto = anno
and profile.cha_tipo_proto <> 'G'and profile.id_uo_prot = ID_UO;
--conta I DOC protocollati e classificati per singola uo
select count(profile.system_id) into ProtAndClass from profile
where profile.id_registro = id_reg AND profile.num_proto is not null
and profile.id_uo_prot = ID_UO and profile.num_anno_proto = anno
and cha_fascicolato = '1';
--CALCOLO LE PERCENTUALI
IF (TOT_PROT_UO <> 0)
THEN
IF (ProtA <> 0)
THEN  --% di protocolli A sul totale dei protocolli
PercProtA := ROUND(((ProtA / TOT_PROT_UO) * 100),2);
END IF;
IF (ProtP <> 0)
THEN --% di protocolli P sul totale dei protocolli
PercProtP := ROUND(((ProtP / TOT_PROT_UO) * 100),2);
END IF;
IF (ProtI <> 0)
THEN --% di protocolli I sul totale dei protocolli
PercProtI := ROUND(((ProtI / TOT_PROT_UO) * 100),2);
END IF;
IF (ProtAndAnn <> 0)
THEN --% di protocolli Annullati sul totale dei protocolli
PercProtAndAnn := ROUND(((ProtAndAnn / TOT_PROT_UO) * 100),2);
END IF;
IF (ProtNotImg <> 0)
THEN --% di protocolli senza Immagine sul totale dei protocolli
PercProtNotImg := ROUND(((ProtNotImg / TOT_PROT_UO) * 100),2);
END IF;
IF (ProtAndClass <> 0)
THEN --% di protocolli senza Immagine sul totale dei protocolli
PercProtAndClass := ROUND(((ProtAndClass / TOT_PROT_UO) * 100),2);
END IF;
END IF;
--assegno i risultati di protocollo prodotti all'oggetto out_doc_prot
out_doc.UO := VAR_UO;
out_doc.TOT_PROT:= TOT_PROT_UO;
out_doc.ARRIVO := ProtA;
out_doc.PERC_ARRIVO := PercProtA;
out_doc.PARTENZA := ProtP;
out_doc.PERC_PARTENZA := PercProtP;
out_doc.INTERNI := ProtI;
out_doc.PERC_INTERNI := PercProtI;
out_doc.ANNULL :=ProtAndAnn;
out_doc.PERC_ANNULL := PercProtAndAnn;
out_doc.PROFILI := ProtNotImg;
out_doc.PERC_PROFILI := PercProtNotImg;
out_doc.CLASSIFICATI := ProtAndClass;
out_doc.PERC_CLASSIFICATI := PercProtAndClass;
--inserimento
PIPE ROW(out_doc);
--aggiorno variabili totali
TOTPROT := TOTPROT + TOT_PROT_UO;
TOTPROTA := TOTPROTA + ProtA;
TOTPROTP := TOTPROTP + ProtP;
TOTPROTI := TOTPROTI + ProtI;
TOTPROTANN := TOTPROTANN + ProtAndAnn;
TOTPROTPROF := TOTPROTPROF + ProtNotImg;
TOTPROTCLASS := TOTPROTCLASS + ProtAndClass;
END LOOP;  -- ciclo del cursore
--verifico e calcolo percentuali totali
IF (TOTPROT <> 0)
THEN
IF (TOTPROTA <> 0)
THEN --% di protocolli A sul totale dei protocolli
PERCTOTPROTA := ROUND(((TOTPROTA / TOTPROT) * 100),2);
END IF;
IF (TOTPROTP <> 0)
THEN --% di protocolli P sul totale dei protocolli
PERCTOTPROTP := ROUND(((TOTPROTP / TOTPROT) * 100),2);
END IF;
IF (TOTPROTI <> 0)
THEN --% di protocolli I sul totale dei protocolli
PERCTOTPROTI := ROUND(((TOTPROTI / TOTPROT) * 100),2);
END IF;
IF (TOTPROTANN <> 0)
THEN --% di protocolli ANNULLATI sul totale dei protocolli
PERCTOTPROTANN := ROUND(((TOTPROTANN / TOTPROT) * 100),2);
END IF;
IF (TOTPROTPROF <> 0)
THEN --% di protocolli senza Immagine sul totale dei protocolli
PERCTOTPROTPROF := ROUND(((TOTPROTPROF / TOTPROT) * 100),2);
END IF;
IF (TOTPROTCLASS <> 0)
THEN --% di protocolli senza Immagine sul totale dei protocolli
PERCTOTPROTCLASS := ROUND(((TOTPROTCLASS / TOTPROT) * 100),2);
END IF;
--assegno i risultati di protocollo prodotti all'oggetto out_doc_prot
out_doc.UO := 'TOTALE';
out_doc.TOT_PROT:= TOTPROT;
out_doc.ARRIVO := TOTPROTA;
out_doc.PERC_ARRIVO := PERCTOTPROTA;
out_doc.PARTENZA := TOTPROTP;
out_doc.PERC_PARTENZA := PERCTOTPROTP;
out_doc.INTERNI := TOTPROTI;
out_doc.PERC_INTERNI := PERCTOTPROTI;
out_doc.ANNULL :=TOTPROTANN;
out_doc.PERC_ANNULL := PERCTOTPROTANN;
out_doc.PROFILI := TOTPROTPROF;
out_doc.PERC_PROFILI := PERCTOTPROTPROF;
out_doc.CLASSIFICATI := TOTPROTCLASS;
out_doc.PERC_CLASSIFICATI := PERCTOTPROTCLASS;
--inserimento
PIPE ROW(out_doc);
END IF;

CLOSE C_UO; --chiudo cursore
RETURN; --return funzione
EXCEPTION WHEN OTHERS THEN
RETURN;
END;
END;
END DocUoTableFunction;
/

SHOW ERRORS;


--
-- FASCICOLITABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".FascicoliTableFunction (p_ID_AMM number, p_ID_REGISTRO number, ANNO number, mese number)
RETURN FascicoliTableRow PIPELINED IS
--dichiarazione
out_rec FascicoliTableType := FascicoliTableType(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

-- variabili globali
totFasc float;
totFascA float;
totFascC float;
MESE_VC varchar(255);

--variabili mensili
contaMese number;
totFascM float;
totFascMA float;
totFascMC float;
totPercFascA float;
totPercFascC float;
begin
--settaggio variabili
totFasc := 0;
totFascA := 0;
totFascC := 0;
contaMese := 1;
totFascM  := 0;
totFascMA := 0;
totFascMC := 0;
totPercFascA := 0;
totPercFascC :=0;



--conta valori globali
-- CONTA FASCICOLI totali nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT(project.SYSTEM_ID) into totFasc from project
where project.cha_tipo_proj = 'F'
and project.id_amm = p_ID_AMM
and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);


-- CONTA FASCICOLI CREATI NELL'ANNO  nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT(project.SYSTEM_ID) into totFascA from project
where project.cha_tipo_proj = 'F'
and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and project.cha_stato = 'A'
and project.id_amm = p_ID_AMM
and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);


-- CONTA FASCICOLI CHIUSI NELL'ANNO nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT (project.SYSTEM_ID) into totFascC from project
where project.cha_tipo_proj = 'F' and project.cha_stato = 'C'
and  to_number(to_char(project.dta_chiusura,'YYYY')) = anno
and project.id_amm = p_ID_AMM
and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);
--fine conta


--ciclo scansione mensile
while (mese >= contaMese)
LOOP
--conto  i fascicoli creati (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT (project.SYSTEM_ID) into totFascMA from project
where project.cha_tipo_proj = 'F' and project.cha_stato = 'A'
and  to_number(to_char(project.dta_creazione,'MM')) = contaMese and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and project.id_amm = p_ID_AMM and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);

--conto  i fascicoli chiusi (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT(project.SYSTEM_ID) into totFascMC from project
where project.cha_tipo_proj = 'F' and project.cha_stato = 'C'
and  to_number(to_char(project.dta_chiusura,'MM')) = contaMese and to_number(to_char(project.dta_chiusura,'YYYY')) = anno
and project.id_amm = p_ID_AMM and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);

totFascM := totFascMA + totFascMC;
--calcolo percentuali
if(totFascM <> 0)
then
TotPercFascA := ROUND(((totFascMA / totFascM) * 100),2);
TotPercFascC := ROUND(((totFascMC / totFascM) * 100),2);
end if;
-- parsing valore mese

MESE_VC :=
CASE contaMese
WHEN 1 THEN 'Gennaio'
WHEN 2 THEN 'Febbraio'
WHEN 3 THEN 'Marzo'
WHEN 4 THEN 'Aprile'
WHEN 5 THEN 'Maggio'
WHEN 6 THEN 'Giugno'
WHEN 7 THEN 'Luglio'
WHEN 8 THEN 'Agosto'
WHEN 9 THEN 'Settembre'
WHEN 10 THEN 'Ottobre'
WHEN 11 THEN 'Novembre'
WHEN 12 THEN 'Dicembre'
end;
--
-- inserimento dati nella tabella temporanea
out_rec.TOTFASC := totFasc;
out_rec.TOTFASCA := totFascA;
out_rec.TOTFASCC := totFascC;
out_rec.MESE := MESE_VC;
out_rec.TOTFASCM := totFascM;
out_rec.TOTFASCMA := totFascMA;
out_rec.TOTFASCMC := totFascMC;
out_rec.TOTPERCFASCA := totPercFascA;
out_rec.TOTPERCFASCC := totPercFascC;

PIPE ROW(out_rec);
--INSERT INTO [docsadm].[#REPORT_ANNUALE_FASCICOLI](TOTFASC,TOTFASCA,TOTFASCC,MESE,TOTFASCM,TOTFASCMA,TOTFASCMC,TOTPERCFASCA,TOTPERCFASCC)
--    VALUES (totFasc, totFascA, totFascC, MESE_VC, totFascM, totFascMA, totFascMC, totPercFascA, totPercFascC)

--reset dei contatori
contaMese := contaMese + 1;
totFascM  := 0;
totFascMA := 0;
totFascMC := 0;
totPercFascA := 0;
totPercFascC := 0;

end loop;
--fine ciclo
RETURN;

EXCEPTION WHEN OTHERS THEN
RETURN;
END FascicoliTableFunction;
/

SHOW ERRORS;


--
-- FASCICOLIVTETABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".fascicolivtetablefunction (
p_id_amm        NUMBER,
p_id_registro   NUMBER,
anno            NUMBER,
mese            NUMBER
)
RETURN fascicolivtextendedtablerow PIPELINED
IS
out_rec          fascicolivtextendedtabletype
:= fascicolivtextendedtabletype (NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL
);

system_id_vt     NUMBER;
description_vt   VARCHAR (255);
var_codice_vt    VARCHAR (255);
m_fasc_creati    NUMBER;
fasc_chiusi      NUMBER;
fasc_creati      NUMBER;
m_fasc_chiusi    NUMBER;
i                NUMBER;
mese_vc          NUMBER;
mese_vc_c        NUMBER;
gennaio          NUMBER;
febbraio         NUMBER;
marzo            NUMBER;
aprile           NUMBER;
maggio           NUMBER;
giugno           NUMBER;
luglio           NUMBER;
agosto           NUMBER;
settembre        NUMBER;
ottobre          NUMBER;
novembre         NUMBER;
dicembre         NUMBER;
vt_fasc_creati   NUMBER;
vt_fasc_chiusi   NUMBER;

system_id_fasc   NUMBER;

gennaio_c        NUMBER;
febbraio_c       NUMBER;
marzo_c          NUMBER;
aprile_c         NUMBER;
maggio_c         NUMBER;
giugno_c         NUMBER;
luglio_c         NUMBER;
agosto_c         NUMBER;
settembre_c      NUMBER;
ottobre_c        NUMBER;
novembre_c       NUMBER;
dicembre_c       NUMBER;

tot_gennaio      VARCHAR (255);
tot_febbraio     VARCHAR (255);
tot_marzo        VARCHAR (255);
tot_aprile       VARCHAR (255);
tot_maggio       VARCHAR (255);
tot_giugno       VARCHAR (255);
tot_luglio       VARCHAR (255);
tot_agosto       VARCHAR (255);
tot_settembre    VARCHAR (255);
tot_ottobre      VARCHAR (255);
tot_novembre     VARCHAR (255);
tot_dicembre     VARCHAR (255);
tot_vt_t         VARCHAR (255);
tot_vt           NUMBER;
tot_vt_c         NUMBER;

t_gennaio        NUMBER;
t_febbraio       NUMBER;
t_marzo          NUMBER;
t_aprile         NUMBER;
t_maggio         NUMBER;
t_giugno         NUMBER;
t_luglio         NUMBER;
t_agosto         NUMBER;
t_settembre      NUMBER;
t_ottobre        NUMBER;
t_novembre       NUMBER;
t_dicembre       NUMBER;
t_gennaio_c      NUMBER;
t_febbraio_c     NUMBER;
t_marzo_c        NUMBER;
t_aprile_c       NUMBER;
t_maggio_c       NUMBER;
t_giugno_c       NUMBER;
t_luglio_c       NUMBER;
t_agosto_c       NUMBER;
t_settembre_c    NUMBER;
t_ottobre_c      NUMBER;
t_novembre_c     NUMBER;
t_dicembre_c     NUMBER;

CURSOR c_vocitit (amm NUMBER, idreg NUMBER)
IS
SELECT   project.system_id, project.description, project.var_codice
FROM project
WHERE project.var_codice IS NOT NULL
AND project.id_titolario = (select system_id from project where cha_stato= 'A' and var_codice = 'T' and id_amm=amm)
AND project.id_amm = amm
AND project.cha_tipo_proj = 'T'
AND (project.id_registro = idreg OR project.id_registro IS NULL)
ORDER BY project.var_cod_liv1;
BEGIN
mese_vc := 0;
mese_vc_c := 0;
i := 1;
gennaio := 0;
febbraio := 0;
marzo := 0;
aprile := 0;
maggio := 0;
giugno := 0;
luglio := 0;
agosto := 0;
settembre := 0;
ottobre := 0;
novembre := 0;
dicembre := 0;
gennaio_c := 0;
febbraio_c := 0;
marzo_c := 0;
aprile_c := 0;
maggio_c := 0;
giugno_c := 0;
luglio_c := 0;
agosto_c := 0;
settembre_c := 0;
ottobre_c := 0;
novembre_c := 0;
dicembre_c := 0;
t_gennaio := 0;
t_febbraio := 0;
t_marzo := 0;
t_aprile := 0;
t_maggio := 0;
t_giugno := 0;
t_luglio := 0;
t_agosto := 0;
t_settembre := 0;
t_ottobre := 0;
t_novembre := 0;
t_dicembre := 0;
t_gennaio_c := 0;
t_febbraio_c := 0;
t_marzo_c := 0;
t_aprile_c := 0;
t_maggio_c := 0;
t_giugno_c := 0;
t_luglio_c := 0;
t_agosto_c := 0;
t_settembre_c := 0;
t_ottobre_c := 0;
t_novembre_c := 0;
t_dicembre_c := 0;
tot_vt_t := '0/0';
tot_vt := 0;
tot_vt_c := 0;

SELECT COUNT (project.system_id)
INTO fasc_creati
FROM project
WHERE project.cha_tipo_proj = 'F'
AND TO_NUMBER (TO_CHAR (project.dta_creazione, 'YYYY')) = anno
AND (project.id_registro = id_registro OR project.id_registro IS NULL)
AND project.id_amm = id_amm
AND project.cha_stato = 'A';

SELECT COUNT (project.system_id)
INTO fasc_chiusi
FROM project
WHERE project.cha_tipo_proj = 'F'
AND (project.id_registro = id_registro OR project.id_registro = NULL)
AND project.id_amm = id_amm
AND TO_NUMBER (TO_CHAR (project.dta_chiusura, 'YYYY')) = anno
AND project.cha_stato = 'C';

OPEN c_vocitit (p_id_amm, p_id_registro);

LOOP
FETCH c_vocitit
INTO system_id_vt, description_vt, var_codice_vt;     --,NUM_LIVELLO1;

EXIT WHEN c_vocitit%NOTFOUND;

WHILE (i <= mese)
LOOP
SELECT COUNT (project.system_id)
INTO vt_fasc_creati
FROM project
WHERE TO_NUMBER (TO_CHAR (project.dta_creazione, 'YYYY')) = anno
AND project.cha_tipo_proj = 'F'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
)
AND project.cha_stato = 'A';

SELECT COUNT (project.system_id)
INTO vt_fasc_chiusi
FROM project
WHERE project.cha_tipo_proj = 'F'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
)
AND TO_NUMBER (TO_CHAR (project.dta_chiusura, 'YYYY')) = anno
AND project.cha_stato = 'C';

SELECT COUNT (project.system_id)
INTO m_fasc_creati
FROM project
WHERE TO_NUMBER (TO_CHAR (project.dta_creazione, 'YYYY')) = anno
AND project.cha_tipo_proj = 'F'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND TO_NUMBER (TO_CHAR (project.dta_apertura, 'MM')) = i
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
)
AND project.cha_stato = 'A';

SELECT COUNT (project.system_id)
INTO m_fasc_chiusi
FROM project
WHERE TO_NUMBER (TO_CHAR (project.dta_chiusura, 'YYYY')) = anno
AND project.cha_tipo_proj = 'F'
AND project.cha_stato = 'C'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND TO_NUMBER (TO_CHAR (project.dta_chiusura, 'MM')) = i
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
);

IF (vt_fasc_creati = 0)
THEN
mese_vc := 0;
ELSE
mese_vc := vt_fasc_creati;
END IF;

IF (vt_fasc_chiusi = 0)
THEN
mese_vc_c := 0;
ELSE
mese_vc_c := vt_fasc_chiusi;
END IF;

IF (i = 1)
THEN
/*Gennaio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
gennaio := m_fasc_creati;
gennaio_c := m_fasc_chiusi;
ELSE
gennaio := 0;
gennaio_c := 0;
END IF;
END IF;

IF (i = 2)
THEN
/*Febbraio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
febbraio := m_fasc_creati;
febbraio_c := m_fasc_chiusi;
ELSE
febbraio := 0;
febbraio_c := 0;
END IF;
END IF;

IF (i = 3)
THEN
/*Marzo*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
marzo := m_fasc_creati;
marzo_c := m_fasc_chiusi;
ELSE
marzo := 0;
marzo_c := 0;
END IF;
END IF;

IF (i = 4)
THEN
/*Aprile*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
aprile := m_fasc_creati;
aprile_c := m_fasc_chiusi;
ELSE
aprile := 0;
aprile_c := 0;
END IF;
END IF;

IF (i = 5)
THEN
/*MAggio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
maggio := m_fasc_creati;
maggio_c := m_fasc_chiusi;
ELSE
maggio := 0;
maggio_c := 0;
END IF;
END IF;

IF (i = 6)
THEN
/*Giugno*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
giugno := m_fasc_creati;
giugno_c := m_fasc_chiusi;
ELSE
giugno := 0;
giugno_c := 0;
END IF;
END IF;

IF (i = 7)
THEN
/*Luglio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
luglio := m_fasc_creati;
luglio_c := m_fasc_chiusi;
ELSE
luglio := 0;
luglio_c := 0;
END IF;
END IF;

IF (i = 8)
THEN
/*Agosto*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
agosto := m_fasc_creati;
agosto_c := m_fasc_chiusi;
ELSE
agosto := 0;
agosto_c := 0;
END IF;
END IF;

IF (i = 9)
THEN
/*Settembre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
settembre := m_fasc_creati;
settembre_c := m_fasc_chiusi;
ELSE
settembre := 0;
settembre_c := 0;
END IF;
END IF;

IF (i = 10)
THEN
/*Ottobre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
ottobre := m_fasc_creati;
ottobre_c := m_fasc_chiusi;
ELSE
ottobre := 0;
ottobre_c := 0;
END IF;
END IF;

IF (i = 11)
THEN
/*Novembre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
novembre := m_fasc_creati;
novembre_c := m_fasc_chiusi;
ELSE
novembre := 0;
novembre_c := 0;
END IF;
END IF;

IF (i = 12)
THEN
/*Dicembre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
dicembre := m_fasc_creati;
dicembre_c := m_fasc_chiusi;
ELSE
dicembre := 0;
dicembre_c := 0;
END IF;
END IF;

/*AGGIORNAMENTO DEL CONTATORE*/
i := i + 1;
END LOOP;


t_gennaio := t_gennaio + gennaio;
t_febbraio := t_febbraio + febbraio;
t_marzo := t_marzo + marzo;
t_aprile := t_aprile + aprile;
t_maggio := t_maggio + maggio;
t_giugno := t_giugno + giugno;
t_luglio := t_luglio + luglio;
t_agosto := t_agosto + agosto;
t_settembre := t_settembre + settembre;
t_ottobre := t_ottobre + ottobre;
t_novembre := t_novembre + novembre;
t_dicembre := t_dicembre + dicembre;
t_gennaio_c := t_gennaio_c + gennaio_c;
t_febbraio_c := t_febbraio_c + febbraio_c;
t_marzo_c := t_marzo_c + marzo_c;
t_aprile_c := t_aprile_c + aprile_c;
t_maggio_c := t_maggio_c + maggio_c;
t_giugno_c := t_giugno_c + giugno_c;
t_luglio_c := t_luglio_c + luglio_c;
t_agosto_c := t_agosto_c + agosto_c;
t_settembre_c := t_settembre_c + settembre_c;
t_ottobre_c := t_ottobre_c + ottobre_c;
t_novembre_c := t_novembre_c + novembre_c;
t_dicembre_c := t_dicembre_c + dicembre_c;
tot_vt := tot_vt + mese_vc;
tot_vt_c :=
t_gennaio_c
+ t_febbraio_c
+ t_marzo_c
+ t_aprile_c
+ t_maggio_c
+ t_giugno_c
+ t_luglio_c
+ t_agosto_c
+ t_settembre_c
+ t_ottobre_c
+ t_novembre_c
+ t_dicembre_c;
mese_vc_c := 0;
mese_vc := 0;

IF ((tot_vt = 0) AND (tot_vt_c = 0))
THEN
tot_vt_t := '-';
ELSE
tot_vt_t := TO_CHAR (tot_vt) || '/' || TO_CHAR (tot_vt_c);
END IF;

IF ((t_gennaio = 0) AND (t_gennaio_c = 0))
THEN
tot_gennaio := '-';
ELSE
tot_gennaio := TO_CHAR (t_gennaio) || '/' || TO_CHAR (t_gennaio_c);
END IF;

IF ((t_febbraio = 0) AND (t_febbraio_c = 0))
THEN
tot_febbraio := '-';
ELSE
tot_febbraio := TO_CHAR (t_febbraio) || '/'
|| TO_CHAR (t_febbraio_c);
END IF;

IF ((t_marzo = 0) AND (t_marzo_c = 0))
THEN
tot_marzo := '-';
ELSE
tot_marzo := TO_CHAR (t_marzo) || '/' || TO_CHAR (t_marzo_c);
END IF;

IF ((t_aprile = 0) AND (t_aprile_c = 0))
THEN
tot_aprile := '-';
ELSE
tot_aprile := TO_CHAR (t_aprile) || '/' || TO_CHAR (t_aprile_c);
END IF;

IF ((t_maggio = 0) AND (t_maggio_c = 0))
THEN
tot_maggio := '-';
ELSE
tot_maggio := TO_CHAR (t_maggio) || '/' || TO_CHAR (t_maggio_c);
END IF;

IF ((t_giugno = 0) AND (t_giugno_c = 0))
THEN
tot_giugno := '-';
ELSE
tot_giugno := TO_CHAR (t_giugno) || '/' || TO_CHAR (t_giugno_c);
END IF;

IF ((t_luglio = 0) AND (t_luglio_c = 0))
THEN
tot_luglio := '-';
ELSE
tot_luglio := TO_CHAR (t_luglio) || '/' || TO_CHAR (t_luglio_c);
END IF;

IF ((t_agosto = 0) AND (t_agosto_c = 0))
THEN
tot_agosto := '-';
ELSE
tot_agosto := TO_CHAR (t_agosto) || '/' || TO_CHAR (t_agosto_c);
END IF;

IF ((t_settembre = 0) AND (t_settembre_c = 0))
THEN
tot_settembre := '-';
ELSE
tot_settembre :=
TO_CHAR (t_settembre) || '/'
|| TO_CHAR (t_settembre_c);
END IF;

IF ((t_ottobre = 0) AND (t_ottobre_c = 0))
THEN
tot_ottobre := '-';
ELSE
tot_ottobre := TO_CHAR (t_ottobre) || '/' || TO_CHAR (t_ottobre_c);
END IF;

IF ((t_novembre = 0) AND (t_novembre_c = 0))
THEN
tot_novembre := '-';
ELSE
tot_novembre := TO_CHAR (t_novembre) || '/'
|| TO_CHAR (t_novembre_c);
END IF;

IF ((t_dicembre = 0) AND (t_dicembre_c = 0))
THEN
tot_dicembre := '-';
ELSE
tot_dicembre := TO_CHAR (t_dicembre) || '/'
|| TO_CHAR (t_dicembre_c);
END IF;

/*Aggiorniamo il cursore delle voci di Titolario*/
i := 1;

out_rec.fasc_creati := fasc_creati;
out_rec.fasc_chiusi := fasc_chiusi;
out_rec.var_cod := var_codice_vt;
out_rec.var_descr := description_vt;
out_rec.gennaio := tot_gennaio;
out_rec.febbraio := tot_febbraio;
out_rec.marzo := tot_marzo;
out_rec.aprile := tot_aprile;
out_rec.maggio := tot_maggio;
out_rec.giugno := tot_giugno;
out_rec.luglio := tot_luglio;
out_rec.agosto := tot_agosto;
out_rec.settembre := tot_settembre;
out_rec.ottobre := tot_ottobre;
out_rec.novembre := tot_novembre;
out_rec.dicembre := tot_dicembre;
out_rec.vt_fac_creati := tot_vt_t;
PIPE ROW (out_rec);


tot_vt := 0;
tot_vt_c := 0;
gennaio := 0;
febbraio := 0;
marzo := 0;
aprile := 0;
maggio := 0;
giugno := 0;
luglio := 0;
agosto := 0;
settembre := 0;
ottobre := 0;
novembre := 0;
dicembre := 0;
t_gennaio := 0;
t_febbraio := 0;
t_marzo := 0;
t_aprile := 0;
t_maggio := 0;
t_giugno := 0;
t_luglio := 0;
t_agosto := 0;
t_settembre := 0;
t_ottobre := 0;
t_novembre := 0;
t_dicembre := 0;
t_gennaio_c := 0;
t_febbraio_c := 0;
t_marzo_c := 0;
t_aprile_c := 0;
t_maggio_c := 0;
t_giugno_c := 0;
t_luglio_c := 0;
t_agosto_c := 0;
t_settembre_c := 0;
t_ottobre_c := 0;
t_novembre_c := 0;
t_dicembre_c := 0;
END LOOP;

CLOSE c_vocitit;

RETURN;
EXCEPTION
WHEN OTHERS
THEN
RETURN;
END fascicolivtetablefunction;
/

SHOW ERRORS;


--
-- FASCICOLIVTTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".fascicolivttablefunction (
id_amm        NUMBER,
id_registro   NUMBER,
anno          NUMBER,
mese          NUMBER
)
RETURN fascicolivttablerow PIPELINED
IS

out_rec                 fascicolivttabletype
:= fascicolivttabletype (NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL,
NULL
);

system_id_vt            NUMBER;
description_vt          VARCHAR (255);
var_codice_vt           VARCHAR (255);
m_fasc_creati           NUMBER;
fasc_chiusi             NUMBER;
fasc_creati             NUMBER;
m_fasc_chiusi           NUMBER;
i                       NUMBER;
mese_vc                 NUMBER;
mese_vc_c               NUMBER;
gennaio                 NUMBER;
febbraio                NUMBER;
marzo                   NUMBER;
aprile                  NUMBER;
maggio                  NUMBER;
giugno                  NUMBER;
luglio                  NUMBER;
agosto                  NUMBER;
settembre               NUMBER;
ottobre                 NUMBER;
novembre                NUMBER;
dicembre                NUMBER;
vt_fasc_creati          NUMBER;
vt_fasc_chiusi          NUMBER;
num_livello1            VARCHAR (255);
var_codice_livello1     VARCHAR (255);
description__livello1   VARCHAR (255);
system_id_fasc          NUMBER;
gennaio_c               NUMBER;
febbraio_c              NUMBER;
marzo_c                 NUMBER;
aprile_c                NUMBER;
maggio_c                NUMBER;
giugno_c                NUMBER;
luglio_c                NUMBER;
agosto_c                NUMBER;
settembre_c             NUMBER;
ottobre_c               NUMBER;
novembre_c              NUMBER;
dicembre_c              NUMBER;
tot_gennaio             VARCHAR (255);
tot_febbraio            VARCHAR (255);
tot_marzo               VARCHAR (255);
tot_aprile              VARCHAR (255);
tot_maggio              VARCHAR (255);
tot_giugno              VARCHAR (255);
tot_luglio              VARCHAR (255);
tot_agosto              VARCHAR (255);
tot_settembre           VARCHAR (255);
tot_ottobre             VARCHAR (255);
tot_novembre            VARCHAR (255);
tot_dicembre            VARCHAR (255);
tot_vt_t                VARCHAR (255);
tot_vt                  NUMBER;
tot_vt_c                NUMBER;
t_gennaio               NUMBER;
t_febbraio              NUMBER;
t_marzo                 NUMBER;
t_aprile                NUMBER;
t_maggio                NUMBER;
t_giugno                NUMBER;
t_luglio                NUMBER;
t_agosto                NUMBER;
t_settembre             NUMBER;
t_ottobre               NUMBER;
t_novembre              NUMBER;
t_dicembre              NUMBER;
t_gennaio_c             NUMBER;
t_febbraio_c            NUMBER;
t_marzo_c               NUMBER;
t_aprile_c              NUMBER;
t_maggio_c              NUMBER;
t_giugno_c              NUMBER;
t_luglio_c              NUMBER;
t_agosto_c              NUMBER;
t_settembre_c           NUMBER;
t_ottobre_c             NUMBER;
t_novembre_c            NUMBER;
t_dicembre_c            NUMBER;

CURSOR c_vocitit (amm NUMBER, idreg NUMBER)
IS
SELECT   project.system_id, project.description, project.var_codice,
project.num_livello
FROM project
WHERE project.var_codice IS NOT NULL
AND project.id_titolario = (select system_id from project where cha_stato= 'A' and var_codice = 'T' and id_amm=amm)
AND project.id_amm = amm
AND project.cha_tipo_proj = 'T'
AND (project.id_registro = idreg OR project.id_registro IS NULL)
ORDER BY project.var_cod_liv1;
BEGIN
mese_vc := 0;
mese_vc_c := 0;
i := 1;
gennaio := 0;
febbraio := 0;
marzo := 0;
aprile := 0;
maggio := 0;
giugno := 0;
luglio := 0;
agosto := 0;
settembre := 0;
ottobre := 0;
novembre := 0;
dicembre := 0;
gennaio_c := 0;
febbraio_c := 0;
marzo_c := 0;
aprile_c := 0;
maggio_c := 0;
giugno_c := 0;
luglio_c := 0;
agosto_c := 0;
settembre_c := 0;
ottobre_c := 0;
novembre_c := 0;
dicembre_c := 0;
t_gennaio := 0;
t_febbraio := 0;
t_marzo := 0;
t_aprile := 0;
t_maggio := 0;
t_giugno := 0;
t_luglio := 0;
t_agosto := 0;
t_settembre := 0;
t_ottobre := 0;
t_novembre := 0;
t_dicembre := 0;
t_gennaio_c := 0;
t_febbraio_c := 0;
t_marzo_c := 0;
t_aprile_c := 0;
t_maggio_c := 0;
t_giugno_c := 0;
t_luglio_c := 0;
t_agosto_c := 0;
t_settembre_c := 0;
t_ottobre_c := 0;
t_novembre_c := 0;
t_dicembre_c := 0;
tot_vt_t := '0/0';
tot_vt := 0;
tot_vt_c := 0;

/*******************************************************************/

/*******************************RECUPERO DEI DATI GENERALI************************************************************************************
FASC_CREATI:  Tutti i fascicoli con:
- anno di creazione pari all'anno di interesse,
- id_registro pari a qullo selezionato
- id_amm pari a quello selezionato

FASC_GEN_CREATI: Tutti i fascicoli generali:
- id_registro pari a null
- id_amm pari a quello selezionato

FASC_CHIUSI: Tutti i fascicoli chiusi:
- id_registro pari a qullo selezionato
- id_amm pari a quello selezionato
- anno della dati di chiusura pari a quello selezionato
*/
/*QUERY PER IL RECUPERO DEI DATI GENERALI*/
SELECT COUNT (project.system_id)
INTO fasc_creati
FROM project
WHERE project.cha_tipo_proj = 'F'
AND TO_NUMBER (TO_CHAR (project.dta_creazione, 'YYYY')) = anno
AND (project.id_registro = id_registro OR project.id_registro IS NULL)
AND project.id_amm = id_amm
AND project.cha_stato = 'A';

SELECT COUNT (project.system_id)
INTO fasc_chiusi
FROM project
WHERE project.cha_tipo_proj = 'F'
AND (project.id_registro = id_registro OR project.id_registro = NULL)
AND project.id_amm = id_amm
AND TO_NUMBER (TO_CHAR (project.dta_chiusura, 'YYYY')) = anno
AND project.cha_stato = 'C';

/*****************************************************************************************************************************************************/

/*1 QUERY- Recupera l'elenco delle voci di titolario  (input : @id_amm) */
/*-- contiene tutte le voci di titolario (TIPO "T")*/

/*Apertura del cursore*/
OPEN c_vocitit (id_amm, id_registro);

LOOP
FETCH c_vocitit
INTO system_id_vt, description_vt, var_codice_vt, num_livello1;

EXIT WHEN c_vocitit%NOTFOUND;

IF (num_livello1 = 1)
THEN
var_codice_livello1 := var_codice_vt;
description__livello1 := description_vt;
END IF;

/*2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)*/
WHILE (i <= mese)
LOOP
SELECT COUNT (project.system_id)
INTO vt_fasc_creati
FROM project
WHERE TO_NUMBER (TO_CHAR (project.dta_creazione, 'YYYY')) = anno
AND project.cha_tipo_proj = 'F'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
)
AND project.cha_stato = 'A';

SELECT COUNT (project.system_id)
INTO vt_fasc_chiusi
FROM project
WHERE project.cha_tipo_proj = 'F'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
)
AND TO_NUMBER (TO_CHAR (project.dta_chiusura, 'YYYY')) = anno
AND project.cha_stato = 'C';

SELECT COUNT (project.system_id)
INTO m_fasc_creati
FROM project
WHERE TO_NUMBER (TO_CHAR (project.dta_creazione, 'YYYY')) = anno
AND project.cha_tipo_proj = 'F'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND TO_NUMBER (TO_CHAR (project.dta_apertura, 'MM')) = i
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
)
AND project.cha_stato = 'A';

SELECT COUNT (project.system_id)
INTO m_fasc_chiusi
FROM project
WHERE TO_NUMBER (TO_CHAR (project.dta_chiusura, 'YYYY')) = anno
AND project.cha_tipo_proj = 'F'
AND project.cha_stato = 'C'
AND project.id_amm = id_amm
AND project.id_parent = system_id_vt
AND TO_NUMBER (TO_CHAR (project.dta_chiusura, 'MM')) = i
AND (   project.id_registro = id_registro
OR project.id_registro IS NULL
);

/*INSERIMENTO DEL VALORE MENSILE NELLA TABELLA TEMPORANEA*/
/*A seconda del mese avremo una query di inserimento diversa, per popolare il giusto campo della tabella*/
mese_vc := vt_fasc_creati;
mese_vc_c := vt_fasc_chiusi;

IF (i = 1)
THEN
/*Gennaio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
gennaio := m_fasc_creati;
gennaio_c := m_fasc_chiusi;
ELSE
gennaio := 0;
gennaio_c := 0;
END IF;
END IF;

IF (i = 2)
THEN
/*Febbraio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
febbraio := m_fasc_creati;
febbraio_c := m_fasc_chiusi;
ELSE
febbraio := 0;
febbraio_c := 0;
END IF;
END IF;

IF (i = 3)
THEN
/*Marzo*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
marzo := m_fasc_creati;
marzo_c := m_fasc_chiusi;
ELSE
marzo := 0;
marzo_c := 0;
END IF;
END IF;

IF (i = 4)
THEN
/*Aprile*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
aprile := m_fasc_creati;
aprile_c := m_fasc_chiusi;
ELSE
aprile := 0;
aprile_c := 0;
END IF;
END IF;

IF (i = 5)
THEN
/*MAggio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
maggio := m_fasc_creati;
maggio_c := m_fasc_chiusi;
ELSE
maggio := 0;
maggio_c := 0;
END IF;
END IF;

IF (i = 6)
THEN
/*Giugno*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
giugno := m_fasc_creati;
giugno_c := m_fasc_chiusi;
ELSE
giugno := 0;
giugno_c := 0;
END IF;
END IF;

IF (i = 7)
THEN
/*Luglio*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
luglio := m_fasc_creati;
luglio_c := m_fasc_chiusi;
ELSE
luglio := 0;
luglio_c := 0;
END IF;
END IF;

IF (i = 8)
THEN
/*Agosto*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
agosto := m_fasc_creati;
agosto_c := m_fasc_chiusi;
ELSE
agosto := 0;
agosto_c := 0;
END IF;
END IF;

IF (i = 9)
THEN
/*Settembre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
settembre := m_fasc_creati;
settembre_c := m_fasc_chiusi;
ELSE
settembre := 0;
settembre_c := 0;
END IF;
END IF;

IF (i = 10)
THEN
/*Ottobre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
ottobre := m_fasc_creati;
ottobre_c := m_fasc_chiusi;
ELSE
ottobre := 0;
ottobre_c := 0;
END IF;
END IF;

IF (i = 11)
THEN
/*Novembre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
novembre := m_fasc_creati;
novembre_c := m_fasc_chiusi;
ELSE
novembre := 0;
novembre_c := 0;
END IF;
END IF;

IF (i = 12)
THEN
/*Dicembre*/
IF (m_fasc_creati > 0 OR m_fasc_chiusi > 0)
THEN
dicembre := m_fasc_creati;
dicembre_c := m_fasc_chiusi;
ELSE
dicembre := 0;
dicembre_c := 0;
END IF;
END IF;

/*AGGIORNAMENTO DEL CONTATORE*/
i := i + 1;
END LOOP;


t_gennaio := t_gennaio + gennaio;
t_febbraio := t_febbraio + febbraio;
t_marzo := t_marzo + marzo;
t_aprile := t_aprile + aprile;
t_maggio := t_maggio + maggio;
t_giugno := t_giugno + giugno;
t_luglio := t_luglio + luglio;
t_agosto := t_agosto + agosto;
t_settembre := t_settembre + settembre;
t_ottobre := t_ottobre + ottobre;
t_novembre := t_novembre + novembre;
t_dicembre := t_dicembre + dicembre;
t_gennaio_c := t_gennaio_c + gennaio_c;
t_febbraio_c := t_febbraio_c + febbraio_c;
t_marzo_c := t_marzo_c + marzo_c;
t_aprile_c := t_aprile_c + aprile_c;
t_maggio_c := t_maggio_c + maggio_c;
t_giugno_c := t_giugno_c + giugno_c;
t_luglio_c := t_luglio_c + luglio_c;
t_agosto_c := t_agosto_c + agosto_c;
t_settembre_c := t_settembre_c + settembre_c;
t_ottobre_c := t_ottobre_c + ottobre_c;
t_novembre_c := t_novembre_c + novembre_c;
t_dicembre_c := t_dicembre_c + dicembre_c;
tot_vt := tot_vt + mese_vc;
tot_vt_c :=
t_gennaio_c
+ t_febbraio_c
+ t_marzo_c
+ t_aprile_c
+ t_maggio_c
+ t_giugno_c
+ t_luglio_c
+ t_agosto_c
+ t_settembre_c
+ t_ottobre_c
+ t_novembre_c
+ t_dicembre_c;
mese_vc_c := 0;
mese_vc := 0;

IF ((tot_vt = 0) AND (tot_vt_c = 0))
THEN
tot_vt_t := '-';
ELSE
tot_vt_t := TO_CHAR (tot_vt) || '/' || TO_CHAR (tot_vt_c);
END IF;

IF ((t_gennaio = 0) AND (t_gennaio_c = 0))
THEN
tot_gennaio := '-';
ELSE
tot_gennaio := TO_CHAR (t_gennaio) || '/' || TO_CHAR (t_gennaio_c);
END IF;

IF ((t_febbraio = 0) AND (t_febbraio_c = 0))
THEN
tot_febbraio := '-';
ELSE
tot_febbraio := TO_CHAR (t_febbraio) || '/'
|| TO_CHAR (t_febbraio_c);
END IF;

IF ((t_marzo = 0) AND (t_marzo_c = 0))
THEN
tot_marzo := '-';
ELSE
tot_marzo := TO_CHAR (t_marzo) || '/' || TO_CHAR (t_marzo_c);
END IF;

IF ((t_aprile = 0) AND (t_aprile_c = 0))
THEN
tot_aprile := '-';
ELSE
tot_aprile := TO_CHAR (t_aprile) || '/' || TO_CHAR (t_aprile_c);
END IF;

IF ((t_maggio = 0) AND (t_maggio_c = 0))
THEN
tot_maggio := '-';
ELSE
tot_maggio := TO_CHAR (t_maggio) || '/' || TO_CHAR (t_maggio_c);
END IF;

IF ((t_giugno = 0) AND (t_giugno_c = 0))
THEN
tot_giugno := '-';
ELSE
tot_giugno := TO_CHAR (t_giugno) || '/' || TO_CHAR (t_giugno_c);
END IF;

IF ((t_luglio = 0) AND (t_luglio_c = 0))
THEN
tot_luglio := '-';
ELSE
tot_luglio := TO_CHAR (t_luglio) || '/' || TO_CHAR (t_luglio_c);
END IF;

IF ((t_agosto = 0) AND (t_agosto_c = 0))
THEN
tot_agosto := '-';
ELSE
tot_agosto := TO_CHAR (t_agosto) || '/' || TO_CHAR (t_agosto_c);
END IF;

IF ((t_settembre = 0) AND (t_settembre_c = 0))
THEN
tot_settembre := '-';
ELSE
tot_settembre :=
TO_CHAR (t_settembre) || '/'
|| TO_CHAR (t_settembre_c);
END IF;

IF ((t_ottobre = 0) AND (t_ottobre_c = 0))
THEN
tot_ottobre := '-';
ELSE
tot_ottobre := TO_CHAR (t_ottobre) || '/' || TO_CHAR (t_ottobre_c);
END IF;

IF ((t_novembre = 0) AND (t_novembre_c = 0))
THEN
tot_novembre := '-';
ELSE
tot_novembre := TO_CHAR (t_novembre) || '/'
|| TO_CHAR (t_novembre_c);
END IF;

IF ((t_dicembre = 0) AND (t_dicembre_c = 0))
THEN
tot_dicembre := '-';
ELSE
tot_dicembre := TO_CHAR (t_dicembre) || '/'
|| TO_CHAR (t_dicembre_c);
END IF;

/*Aggiorniamo il cursore delle voci di Titolario*/
i := 1;

IF (num_livello1 = 1)
THEN
out_rec.fasc_creati := fasc_creati;
out_rec.fasc_chiusi := fasc_chiusi;
out_rec.var_cod := var_codice_livello1;
out_rec.var_descr := description__livello1;
out_rec.gennaio := tot_gennaio;
out_rec.febbraio := tot_febbraio;
out_rec.marzo := tot_marzo;
out_rec.aprile := tot_aprile;
out_rec.maggio := tot_maggio;
out_rec.giugno := tot_giugno;
out_rec.luglio := tot_luglio;
out_rec.agosto := tot_agosto;
out_rec.settembre := tot_settembre;
out_rec.ottobre := tot_ottobre;
out_rec.novembre := tot_novembre;
out_rec.dicembre := tot_dicembre;
out_rec.vt_fac_creati := tot_vt_t;
PIPE ROW (out_rec);
END IF;


tot_vt := 0;
tot_vt_c := 0;
gennaio := 0;
febbraio := 0;
marzo := 0;
aprile := 0;
maggio := 0;
giugno := 0;
luglio := 0;
agosto := 0;
settembre := 0;
ottobre := 0;
novembre := 0;
dicembre := 0;
t_gennaio := 0;
t_febbraio := 0;
t_marzo := 0;
t_aprile := 0;
t_maggio := 0;
t_giugno := 0;
t_luglio := 0;
t_agosto := 0;
t_settembre := 0;
t_ottobre := 0;
t_novembre := 0;
t_dicembre := 0;
t_gennaio_c := 0;
t_febbraio_c := 0;
t_marzo_c := 0;
t_aprile_c := 0;
t_maggio_c := 0;
t_giugno_c := 0;
t_luglio_c := 0;
t_agosto_c := 0;
t_settembre_c := 0;
t_ottobre_c := 0;
t_novembre_c := 0;
t_dicembre_c := 0;
END LOOP;

CLOSE c_vocitit;

RETURN;
EXCEPTION
WHEN OTHERS
THEN
RETURN;
END fascicolivttablefunction;
/

SHOW ERRORS;


--
-- GETDATEONLY  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".GetDateOnly ( i_data VARCHAR2 ) Return varchar2 IS
pos_blank  integer;
o_data	     varchar(50);
BEGIN
pos_blank := INSTR(i_data, ' ', 1, 1);
if pos_blank > 0 then
o_data := substr(i_data, 1, pos_blank - 1);
else
o_data := i_data;
end if;

RETURN o_data;
END GetDateOnly;
/

SHOW ERRORS;


--
-- INTEROPTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".Interoptablefunction (anno NUMBER,id_registro NUMBER)
RETURN InteropTableRow PIPELINED IS
--inizializzazione
out_rec_amm InteropTableType := InteropTableType(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
out_rec_anno InteropTableType := InteropTableType(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
-- variabili del cursore
VAR_CODICE_AMM VARCHAR (255);
VAR_CODICE_AOO VARCHAR (255);
DOC_SPEDITI NUMBER;
MESE NUMBER;
--Dichiarazione del cursore
CURSOR c_data (a NUMBER,reg NUMBER) IS
SELECT DISTINCT(COUNT(*)),TO_NUMBER(TO_CHAR(dta_spedizione,'MM')),var_codice_amm,var_codice_aoo
FROM PROFILE p,DPA_STATO_INVIO si
WHERE cha_tipo_proto = 'P'
AND id_registro = reg
AND p.system_id = si.id_profile
AND TO_NUMBER(TO_CHAR(dta_spedizione,'YYYY')) = a
AND var_codice_amm IS NOT NULL
AND  UPPER(var_codice_aoo) <> UPPER (Getregdescr(reg))
GROUP BY ROLLUP (var_codice_amm, var_codice_aoo,TO_NUMBER(TO_CHAR(dta_spedizione,'MM')));

BEGIN
OPEN c_data(anno,id_registro);
--set iniziale variabili
out_rec_amm.gennaio:=0;
out_rec_amm.febbraio:=0;
out_rec_amm.marzo:=0;
out_rec_amm.aprile:=0;
out_rec_amm.maggio:=0;
out_rec_amm.giugno:=0;
out_rec_amm.luglio:=0;
out_rec_amm.agosto:=0;
out_rec_amm.settembre:=0;
out_rec_amm.ottobre:=0;
out_rec_amm.novembre:=0;
out_rec_amm.dicembre:=0;
LOOP

FETCH c_data INTO DOC_SPEDITI,MESE,VAR_CODICE_AMM,VAR_CODICE_AOO;
EXIT WHEN c_data%NOTFOUND;
IF ((DOC_SPEDITI<> 0 ) AND (MESE<> 0) AND (VAR_CODICE_AMM IS NOT NULL) AND (VAR_CODICE_AOO IS NOT NULL)) THEN

out_rec_amm.var_cod_amm:=VAR_CODICE_AMM;
out_rec_amm.var_cod_aoo:=VAR_CODICE_AOO;
IF (MESE = 1) THEN
out_rec_amm.GENNAIO:= DOC_SPEDITI;
END IF;
IF (MESE = 2) THEN
out_rec_amm.FEBBRAIO:= DOC_SPEDITI;
END IF;
IF (MESE = 3) THEN
out_rec_amm.MARZO:= DOC_SPEDITI;
END IF;
IF (MESE = 4) THEN
out_rec_amm.APRILE:= DOC_SPEDITI;
END IF;
IF (MESE = 5) THEN
out_rec_amm.MAGGIO:= DOC_SPEDITI;
END IF;
IF (MESE = 6) THEN
out_rec_amm.GIUGNO:= DOC_SPEDITI;
END IF;
IF (MESE = 7) THEN
out_rec_amm.LUGLIO:= DOC_SPEDITI;
END IF;
IF (MESE = 8) THEN
out_rec_amm.AGOSTO:= DOC_SPEDITI;
END IF;
IF (MESE = 9) THEN
out_rec_amm.SETTEMBRE:= DOC_SPEDITI;
END IF;
IF (MESE = 10) THEN
out_rec_amm.OTTOBRE:= DOC_SPEDITI;
END IF;
IF (MESE = 11) THEN
out_rec_amm.NOVEMBRE:= DOC_SPEDITI;
END IF;
IF (MESE = 12) THEN
out_rec_amm.DICEMBRE:= DOC_SPEDITI;
END IF;
END IF;
-- TOTALE PARZIALE
IF ((DOC_SPEDITI<> 0 ) AND (MESE IS NULL) AND (VAR_CODICE_AMM IS NOT NULL) AND (VAR_CODICE_AOO IS NOT NULL)) THEN
out_rec_amm.tot_m_sped:=DOC_SPEDITI;
out_rec_amm.tot_sped:=0;
PIPE ROW(out_rec_amm);
out_rec_amm.gennaio:=0;
out_rec_amm.febbraio:=0;
out_rec_amm.marzo:=0;
out_rec_amm.aprile:=0;
out_rec_amm.maggio:=0;
out_rec_amm.giugno:=0;
out_rec_amm.luglio:=0;
out_rec_amm.agosto:=0;
out_rec_amm.settembre:=0;
out_rec_amm.ottobre:=0;
out_rec_amm.novembre:=0;
out_rec_amm.dicembre:=0;
END IF;

-- TOTALE
IF ((DOC_SPEDITI<> 0 ) AND (MESE IS NULL) AND (VAR_CODICE_AMM IS NULL) AND (VAR_CODICE_AOO IS NULL)) THEN
-- INSERIMENTO DEL TOTALE FINALE
out_rec_anno.var_cod_amm := '0';
out_rec_anno.var_cod_aoo:='0';
out_rec_anno.gennaio:='0';
out_rec_anno.febbraio:='0';
out_rec_anno.marzo:='0';
out_rec_anno.aprile:='0';
out_rec_anno.maggio:='0';
out_rec_anno.giugno:='0';
out_rec_anno.luglio:='0';
out_rec_anno.agosto:='0';
out_rec_anno.settembre:='0';
out_rec_anno.ottobre:='0';
out_rec_anno.novembre:='0';
out_rec_anno.dicembre:='0';
out_rec_anno.tot_m_sped:='0';
out_rec_anno.tot_sped:=DOC_SPEDITI;
PIPE ROW(out_rec_anno);
END IF;

END LOOP;--fine del cursore
CLOSE c_data;
RETURN;

EXCEPTION WHEN OTHERS THEN
BEGIN
RETURN;
END;
END Interoptablefunction;
/

SHOW ERRORS;


--
-- MENSILEDOCTABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".MensileDocTableFunction(mese number,p_anno number,id_reg number,id_ammi number,VAR_SED varchar)
return AnnualeDocTableRow pipelined is
out_rec AnnualeDocTableType := AnnualeDocTableType(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
--dichiarazioni variabili
totAnnDoc float;
totAnnProt float;
percAnnProt float;
totAnnProtA float;
percAnnProtA float;
totAnnProtP float;
percAnnProtP float;
totAnnProtI float;
percAnnProtI float;
totAnnDocGrigi float;
percAnnDocGrigi float;
totAnnDocClass float;
percAnnDocClass float;
totAnnDocProf float;
totAnnProtClass float;
percAnnProtClass float;
totAnnProtAClass float;
percAnnProtAClass float;
totAnnProtPClass float;
percAnnProtPClass float;
totAnnProtIClass float;
percAnnProtIClass float;
totAnnProtAnnul float;
percAnnProtAnnul float ;
/******************************************************************/
/**************Dati Riepilogativi del Mese*****************************/
/******************************************************************/
/*Dati Generali*/
totMonDoc float;
totMonProt float;
totMonProtA float;
totMonProtP float;
totMonProtI float;
totMonProtAnnul float;
totMonDocGrigi float;
totMonDocClass float;
/*docs senza docs acq*/
totMonDocProf float;
totMonProtClass float;
totMonProtAClass float;
totMonProtPClass float;
totMonProtIClass float;
/*Percentuali*/
percMonProt float;
percMonProtA float;
percMonProtP float;
percMonProtI float;
percMonProtAnnul float;
percMonDocGrigi float;
percMonDocClass float;
percMonProtClass float;
percMonProtAClass float;
percMonProtPClass float;
percMonProtIClass float;
/*Dichiarazione delle variabili per i profili (Immagini) *************************************************************************************************/
/*Mensili*/
totMonProf float;
totMonProfProt float;
totMonProfProtA float;
totMonProfProtP float;
totMonProfProtI float;
totMonProfGrigi float;
totMonProfProtAnnul float;
totMonProtAnnulClass float;
totMonDocGrigiClass float;
/*Annuali*/
totAnnProf float;
totAnnProfProt float;
totAnnProfProtA float;
totAnnProfProtP float;
totAnnProfProtI float;
totAnnProfGrigi float;
totAnnProfProtAnnull float;
/*Percentuali*/
PercAnnProfProt float;
PercAnnProfProtA float;
PercAnnProfProtP float;
PercAnnProfProtI float;
PercAnnProfGrigi float;
PercAnnProfProtAnnull float;

TotAnnDocGrigiClass float;
percAnnDocGrigiClass float;

TotAnnProtAnnulClass float;
percAnnProtannulClass float;

MESE_VC VARCHAR(255);
var_s VARCHAR(255);
i number;
begin


--verifica valore parametro var_sede
if (var_sed = '')
then
var_s := null;
else
var_s := var_sed;
end if;

/*Impostiamo i valori di default*/
/*Mensili*/
totMonProf  := 0;
totMonProfProt  := 0;
totMonProfProtA  := 0;
totMonProfProtP  := 0;
totMonProfProtI  := 0;
totMonProfGrigi  := 0;
totMonProfProtAnnul := 0;
totMonProtAnnulClass := 0;
totMonDocGrigiClass := 0;
/*Annuali*/
totAnnProf  := 0;
totAnnProfProt  := 0;
totAnnProfProtA  := 0;
totAnnProfProtP := 0;
totAnnProfProtI := 0;
totAnnProfGrigi := 0;
/*Percentuali*/
PercAnnProfProt := 0;
PercAnnProfProtA := 0;
PercAnnProfProtP := 0;
PercAnnProfProtI := 0;
PercAnnProfGrigi := 0;
/**************************************************************************************************************************************************/

percMonProt := 0;
percMonProtA := 0;
percMonProtP := 0;
percMonProtI := 0;
percMonProtAnnul := 0;
percMonDocGrigi := 0;
percMonDocClass := 0;
percMonProtClass := 0;
percMonProtAClass := 0;
percMonProtPClass := 0;
percMonProtIClass := 0;
/******************************************************************/
totAnnDoc := 0;
totAnnProt := 0;
totAnnProtA := 0;
totAnnProtP := 0;
totAnnProtI := 0;
totAnnDocGrigi := 0;
totAnnDocClass := 0;
totAnnDocProf := 0;
totAnnProtClass := 0;
totAnnProtAClass := 0;
totAnnProtPClass := 0;
totAnnProtIClass := 0;
totAnnProtAnnul := 0;
percAnnProt := 0;
percAnnProtA := 0;
percAnnProtP := 0;
percAnnProtI := 0;
percAnnDocGrigi := 0;
percAnnDocClass := 0;
percAnnProtClass := 0;
percAnnProtAClass := 0;
percAnnProtPClass := 0;
percAnnProtIClass := 0;
percAnnProtAnnul := 0;

totMonProfProt  := 0;
totMonProfProtA  := 0;
totMonProfProtP  := 0;
totMonProfProtI  := 0;
totMonProfGrigi  := 0;


TotAnnDocGrigiClass := 0;
percAnnDocGrigiClass := 0;

TotAnnProtAnnulClass := 0;
percAnnProtannulClass := 0;
totAnnProfProtAnnull := 0;
PercAnnProfProtAnnull := 0;
/*cicliamo dall'inizio dell'anno fino al mese di interesse*/

--i := 0;

--while (i < mese)
--loop
/*Incrementiamo il contatore*/
--i := i + 1;

/*Query che recupera i dati del singolo mese*/
/*Totale dati del mese*/
/*Non filtriamo sul registro, questa query deve essere ripetuta per tutti i mesi di interesse per ogni registro*/

i := mese;
if((var_s != ' ') and (var_s is not null))
then
select count(profile.system_id) into totMonProtA from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtP from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtI from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtAnnul from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO  = p_anno AND profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND  profile.dta_annulla is not null AND profile.num_proto is not null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonDocGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi and profile.num_proto is null AND profile.cha_tipo_proto = 'G'  and id_documento_principale is null  AND to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno AND profile.var_sede = var_s;

select count(p.system_id) into totMonProfProtA from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'A' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null AND p.var_sede = var_s;
select count(p.system_id) into totMonProfProtP from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'P' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null AND p.var_sede = var_s;
select count(p.system_id) into totMonProfProtI from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'I' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null AND p.var_sede = var_s;
select count(p.system_id) into totMonProfProtAnnul from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno AND num_proto is not null and p.cha_da_proto = '0' and  p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is not null AND p.var_sede = var_s;
select count(profile.system_id) into totMonProfGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi and profile.cha_img = '0' and to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  and id_documento_principale is null AND profile.var_sede = var_s;

select count(profile.system_id) into totMonProtAClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtPClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtIClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null AND profile.var_sede = var_s;
select count(profile.system_id) into totMonProtAnnulClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno and profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND profile.dta_annulla is not null  AND profile.var_sede = var_s;
select count(profile.system_id) into totMonDocGrigiClass from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi AND to_number(to_char(profile.creation_date,'MM')) = i AND profile.cha_fascicolato = '1' AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  and id_documento_principale is null AND profile.var_sede = var_s;

else
select count(profile.system_id) into totMonProtA from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null;
select count(profile.system_id) into totMonProtP from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null;
select count(profile.system_id) into totMonProtI from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' AND profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.dta_annulla is null;
select count(profile.system_id) into totMonProtAnnul from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO  = p_anno AND profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND  profile.dta_annulla is not null AND profile.num_proto is not null;
select count(profile.system_id) into totMonDocGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and  profile.author = people.system_id and people.id_amm = id_ammi and profile.num_proto is null AND profile.cha_tipo_proto = 'G'  and id_documento_principale is null AND to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno;

select count(p.system_id) into totMonProfProtA from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'A' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null;
select count(p.system_id) into totMonProfProtP from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'P' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null;
select count(p.system_id) into totMonProfProtI from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno and p.cha_tipo_proto = 'I' AND p.cha_da_proto = '0' and p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is null;
select count(p.system_id) into totMonProfProtAnnul from profile p where to_number(to_char(p.DTA_PROTO,'MM')) = i AND p.NUM_ANNO_PROTO = p_anno AND num_proto is not null and p.cha_da_proto = '0' and  p.cha_img = '0' and p.id_registro = id_reg AND p.dta_annulla is not null;
select count(profile.system_id) into totMonProfGrigi from profile,people,dpa_l_ruolo_reg where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi and profile.cha_img = '0' and to_number(to_char(profile.creation_date,'MM')) = i AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  and id_documento_principale is null ;

select count(profile.system_id) into totMonProtAClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'A' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null;
select count(profile.system_id) into totMonProtPClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'P' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null;
select count(profile.system_id) into totMonProtIClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno AND profile.cha_tipo_proto = 'I' and profile.cha_da_proto = '0' and  profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND dta_annulla is null;
select count(profile.system_id) into totMonProtAnnulClass from profile where to_number(to_char(profile.DTA_PROTO,'MM')) = i AND profile.NUM_ANNO_PROTO = p_anno and profile.cha_da_proto = '0' and profile.id_registro = id_reg AND profile.cha_fascicolato = '1' AND profile.num_proto is not null AND profile.dta_annulla is not null ;
select count(profile.system_id) into totMonDocGrigiClass from profile,dpa_l_ruolo_reg,people where profile.id_ruolo_prot = dpa_l_ruolo_reg.id_ruolo_in_uo AND dpa_l_ruolo_reg.id_registro = id_reg and profile.author = people.system_id and people.id_amm = id_ammi AND to_number(to_char(profile.creation_date,'MM')) = i AND profile.cha_fascicolato = '1' AND to_number(to_char(profile.CREATION_DATE,'YYYY')) = p_anno and profile.cha_tipo_proto = 'G'  and id_documento_principale is null;

end if;

/*Calcoliamo i valori annuali a partire dai dati del mese***************************************/
--
totMonProt := totMonProtA + totMonProtP + totMonProtI + totMonProtAnnul;
totMonDoc := totMonProt + totMonDocGrigi;
totAnnDoc := totAnnDoc + totMonDoc;
totAnnProt := totAnnProt + totMonProt;
totAnnProtA := totAnnProtA + totMonProtA;
totAnnProtP := totAnnProtP + totMonProtP;
totAnnProtI := totAnnProtI + totMonProtI;
totAnnDocGrigi := totAnnDocGrigi + totMonDocGrigi;

totMonDocClass := totMonDocGrigiClass + totMonProtAnnulClass + totMonProtAClass + totMonProtPClass + totMonProtIClass;
totAnnDocClass := totAnnDocClass + totMonDocClass;

totMonProtClass := totMonProtAnnulClass + totMonProtAClass + totMonProtPClass + totMonProtIClass;
totAnnProtClass := totAnnProtClass + totMonProtClass;
totAnnProtAClass := totAnnProtAClass + totMonProtAClass;
totAnnProtPClass := totAnnProtPClass + totMonProtPClass;
totAnnProtIClass := totAnnProtIClass + totMonProtIClass;
TotAnnProtAnnulClass := TotAnnProtAnnulClass + totMonProtAnnulClass;


totAnnProtAnnul := totAnnProtAnnul + totMonProtAnnul;
--
totMonProf := totMonProfProtAnnul + totMonProfGrigi + totMonProfProtA + totMonProfProtP + totMonProfProtI;
totAnnProf  := totAnnProf + totMonProf;
--
totMonProfProt :=  totMonProfProtAnnul + totMonProfProtA + totMonProfProtP + totMonProfProtI;
totAnnProfProt  := totAnnProfProt + totMonProfProt;
totAnnProfProtA  := totAnnProfProtA + totMonProfProtA;
totAnnProfProtP := totAnnProfProtP + totMonProfProtP;
totAnnProfProtI := totAnnProfProtI + totMonProfProtI;
totAnnProfGrigi := totAnnProfGrigi + totMonProfGrigi;
totAnnProfProtAnnull := totAnnProfProtAnnull + totMonProfProtAnnul;

TotAnnDocGrigiClass := TotAnnDocGrigiClass + totMonDocGrigiClass;

/*****Percentuali************************************************************************/
/*Percentuale dei protoclli annullati classificati*/
if(TotAnnProtAnnulClass <> 0 and totAnnProtClass <> 0)
then
percAnnProtannulClass := ROUND(((TotAnnProtAnnulClass / totAnnProtClass) * 100),2);
end if;
/*Percentuale annuale dei documenti grigi classificati*/
if(totAnnDocClass <> 0 and TotAnnDocGrigiClass <> 0)
then
percAnnDocGrigiClass := ROUND(((TotAnnDocGrigiClass / totAnnDocClass) * 100),2);
end if;




/*Percentuale dei profili annullati*/
if((TotAnnProfProt <> 0) AND (totAnnProfProtAnnull <> 0))
then
PercAnnProfProtAnnull := ROUND(((totAnnProfProtAnnull / TotAnnProfProt) * 100),2);
end if;

if(totAnnProt <> 0)
then
/*Percentuale di documenti protocollati*/
percAnnProt := ROUND(((totAnnProt / totAnnDoc) * 100),2);
if(totAnnProtA <> 0)
then
/*Percentuale di protocolli in arrivo*/
percAnnProtA := ROUND(((totAnnProtA / totAnnProt) * 100),2);
end if;

if(totAnnProtP <> 0)
then
/*Percentuale di protocolli in partenza*/
percAnnProtP := ROUND(((totAnnProtP / totAnnProt) * 100),2);
end if;

if(totAnnProtI <> 0)
then
/*Percentuale di protocolli interni*/
percAnnProtI := ROUND(((totAnnProtI / totAnnProt) * 100),2);
end if;

if(totAnnProtAnnul <> 0)
then
/*Percentuale di protocolli annullati*/
percAnnProtAnnul := ROUND(((totAnnProtAnnul / totAnnProt) * 100),2);
end if;
end if;

if(totAnnDoc <> 0)
then
if(totAnnDocGrigi <> 0)
then
/*Percentuale di doc grigi*/
percAnnDocGrigi := ROUND(((totAnnDocGrigi / totAnnDoc ) * 100),2);
end if;
if(totAnnDocClass <> 0)
then
/*Percentuale di doc classificati*/
percAnnDocClass := ROUND(((totAnnDocClass / totAnnDoc) * 100),2);
end if;
end if;

if(totAnnDocClass <> 0)
then
if(totAnnProtClass <> 0)
then
/*Percentuale di doc classificati e protocollati*/
percAnnProtClass := ROUND(((totAnnProtClass / totAnnDocClass)*100),2);
if(totAnnProtAClass <> 0)
then
/*Percentuale di doc classificati e protocollati in arrivo*/
percAnnProtAClass := ROUND(((totAnnProtAClass / totAnnProtClass) * 100),2);
end if;
if(totAnnProtPClass <> 0)
then
/*Percentuale di doc classificati e protocollati in partenza*/
percAnnProtPClass := ROUND(((totAnnProtPClass / totAnnProtClass) * 100),2) ;
end if;
if(totAnnProtIClass <> 0)
then
/*Percentuale di doc classificati e protocollati interni*/
percAnnProtIClass := ROUND(((totAnnProtIClass / totAnnProtClass) * 100),2);
end if;
end if;
end if;

/*Calcoliamo le percentuali mensili**************************************************************************************/
if(totMonDoc <> 0)
then
if(totMonProt <> 0)
then
/*Percentuale mensile di protocolli*/
percMonProt := ROUND(((totMonProt / totMonDoc) * 100),2);
if(totMonProtA <> 0)
then
/*Percentuale mensile di protocolli ARRIVO*/
percMonProtA := ROUND(((totMonProtA / totMonProt) * 100),2);
end if;
if(totMonProtP <> 0)
then
/*Percentuale mensile di protocolli PARTENZA*/
percMonProtP := ROUND(((totMonProtP / totMonProt) * 100),2);
end if;
if(totMonProtI <> 0)
then
/*Percentuale mensile di protocolli INTERNI*/
percMonProtI := ROUND(((totMonProtI / totMonProt) * 100),2);
end if;
if(totMonProtAnnul <> 0)
then
/*Percentuale mensile di protocolli Annullati*/
percMonProtAnnul := ROUND(((totMonProtAnnul / totMonProt) * 100),2);
end if;
end if;

if(totMonDocGrigi <> 0)
then
/*Percentuale mensile di Doc Grigi*/
percMonDocGrigi := ROUND(((totMonDocGrigi / totMonDoc) * 100),2);
end if;
if(totMonDocClass <> 0)
then
/*Percentuale mensile di Doc Class*/
percMonDocClass := ROUND(((totMonDocClass / totMonDoc) * 100),2);
end if;
if(totMonProtClass <> 0)
then
/*Percentuale mensile di protocolli Class*/
percMonProtClass := ROUND(((totMonProtClass / totMonDoc) * 100),2);
end if;
if(totMonProtAClass <> 0)
then
/*Percentuale mensile di protocolli Arrivo Class*/
percMonProtAClass := ROUND(((totMonProtAClass / totMonDoc) * 100),2);
end if;
if(totMonProtPClass <> 0)
then
/*Percentuale mensile di protocolli Partenza Class*/
percMonProtPClass := ROUND(((totMonProtPClass / totMonDoc) * 100),2);
end if;
if(totMonProtIClass <> 0)
then
/*Percentuale mensile di protocolli Interni Class*/
percMonProtIClass := ROUND(((totMonProtIClass / totMonDoc) * 100),2);
end if;

end if;
/*******************************************************************************************************************/
/*Calcoliamo le percentuali  dei profili ( Immagini)  */
if(totAnnProf<>0)
then
if(totAnnProfGrigi<>0)
then
/*Percentuale  annuale di profili grigi*/
PercAnnProfGrigi := ROUND(((totAnnProfGrigi / totAnnProf) * 100),2);
end if;

if(totAnnProfProt<>0)
then
/*Percentuale  annuale di profili protocollati*/
PercAnnProfProt := ROUND(((totAnnProfProt / totAnnProf) * 100),2);
end if;

if(totAnnProfProtA<>0)
then
/*Percentuale  annuale di profili protocollati ARRIVO*/
PercAnnProfProtA := ROUND(((totAnnProfProtA / totAnnProfProt) * 100),2);
end if;

if(totAnnProfProtP<>0)
then
/*Percentuale  annuale di profili protocollati PARTENZA*/
PercAnnProfProtP := ROUND(((totAnnProfProtP / totAnnProfProt) * 100),2);
end if;

if(totAnnProfProtI<>0)
then
/*Percentuale  annuale di profili protocollati PARTENZA*/
PercAnnProfProtI := ROUND(((totAnnProfProtI / totAnnProfProt) * 100),2);
end if;
end if;
/*******************************************************************************************************************/


/*******************************************************************************************************************/

MESE_VC :=
CASE i
WHEN 1 THEN 'Gennaio'
WHEN 2 THEN 'Febbraio'
WHEN 3 THEN 'Marzo'
WHEN 4 THEN 'Aprile'
WHEN 5 THEN 'Maggio'
WHEN 6 THEN 'Giugno'
WHEN 7 THEN 'Luglio'
WHEN 8 THEN 'Agosto'
WHEN 9 THEN 'Settembre'
WHEN 10 THEN 'Ottobre'
WHEN 11 THEN 'Novembre'
WHEN 12 THEN 'Dicembre'
end;

/*inseriamo i dati mensili in una tabella*/
out_rec.THING := MESE_VC;
out_rec.TOT_DOC := totMonDoc;
out_rec.GRIGI := totMonDocGrigi;
out_rec.PERC_GRIGI := to_char(percMonDocGrigi);
out_rec.PROT := totMonProt;
out_rec.PERC_PROT := to_char(percMonProt);
out_rec.ANNULL := totMonProtAnnul;
out_rec.PERC_ANNULL := to_char(percMonProtAnnul);
out_rec.ARRIVO := totMonProtA;
out_rec.PERC_ARRIVO := to_char(percMonProtA);
out_rec.PARTENZA := totMonProtP;
out_rec.PERC_PARTENZA := to_char(percMonProtP);
out_rec.INTERNI := totMonProtI;
out_rec.PERC_INTERNI := to_char(percMonProtI);
PIPE ROW(out_rec);


/*RESET DELLE VARIABILI*/
totMonDoc := 0;
totMonProt := 0;
totMonProtA := 0;
totMonProtP := 0;
totMonProtI := 0;
totMonDocGrigi := 0;
/*RESET DELLE PERCENTUALI MENSILI*/
percMonProt := 0;
percMonProtA := 0;
percMonProtP := 0;
percMonProtI := 0;
percMonProtAnnul := 0;
percMonDocGrigi := 0;
percMonDocClass := 0;
percMonProtClass := 0;
percMonProtAClass := 0;
percMonProtPClass := 0;
percMonProtIClass := 0;
/**********************************/
--end loop;

/*Inseriamo nella tabella i valori reltivi all'anno*/
/*Aggiungiamo al totale dei documenti annuale il totale dei documenti grigi dell'anno */
/*totAnnDoc := totAnnDoc + totAnnDocGrigi;*/

out_rec.THING := p_anno;
out_rec.TOT_DOC := totAnnDoc;
out_rec.GRIGI := totAnnDocGrigi;
out_rec.PERC_GRIGI := to_char(percAnnDocGrigi);
out_rec.PROT := totAnnProt;
out_rec.PERC_PROT := to_char(percAnnProt);
out_rec.ANNULL := totAnnProtAnnul;
out_rec.PERC_ANNULL := to_char(percAnnProtAnnul);
out_rec.ARRIVO := totAnnProtA;
out_rec.PERC_ARRIVO := to_char(percAnnProtA);
out_rec.PARTENZA := totAnnProtP;
out_rec.PERC_PARTENZA := to_char(percAnnProtP);
out_rec.INTERNI := totAnnProtI;
out_rec.PERC_INTERNI := to_char(percAnnProtI);
PIPE ROW(out_rec);

/*Inseriamo nella tabella i valori reltivi alla classificazione*/
out_rec.THING := 'Classificati';
out_rec.TOT_DOC := totAnnDocClass;
out_rec.GRIGI := TotAnnDocGrigiClass;
out_rec.PERC_GRIGI := percAnnDocGrigiClass;
out_rec.PROT := totAnnProtClass;
out_rec.PERC_PROT := to_char(percAnnProtClass);
out_rec.ANNULL := TotAnnProtAnnulClass;
out_rec.PERC_ANNULL := percAnnProtannulClass;
out_rec.ARRIVO := totAnnProtAClass;
out_rec.PERC_ARRIVO := to_char(percAnnProtAClass);
out_rec.PARTENZA := totAnnProtPClass;
out_rec.PERC_PARTENZA := to_char(percAnnProtPClass);
out_rec.INTERNI := totAnnProtIClass;
out_rec.PERC_INTERNI := to_char(percAnnProtIClass);
PIPE ROW(out_rec);


/*Inseriamo nella tabella i valori reltivi alle Immagini - Doc. Fisici Acquisiti -*/
out_rec.THING := 'Senza Img.';
out_rec.TOT_DOC := totAnnProf;
out_rec.GRIGI := totAnnProfGrigi;
out_rec.PERC_GRIGI := PercAnnProfGrigi;
out_rec.PROT := totAnnProfProt;
out_rec.PERC_PROT := to_char(PercAnnProfProt);
--out_rec.ANNULL := '0';
--out_rec.PERC_ANNULL := '0';
out_rec.ANNULL := to_char(totAnnProfProtAnnull);
out_rec.PERC_ANNULL := to_char(PercAnnProfProtAnnull);
out_rec.ARRIVO := totAnnProfProtA;
out_rec.PERC_ARRIVO := to_char(PercAnnProfProtA);
out_rec.PARTENZA := totAnnProfProtP;
out_rec.PERC_PARTENZA := to_char(PercAnnProfProtP);
out_rec.INTERNI := totAnnProfProtI;
out_rec.PERC_INTERNI := to_char(PercAnnProfProtI);
PIPE ROW(out_rec);

/*RESET DELLE PERCENTUALI ANNUALI*/
percAnnProt := 0;
percAnnProtA := 0;
percAnnProtP := 0;
percAnnProtI := 0;
percAnnProtAnnul := 0;
percAnnDocGrigi := 0;
percAnnDocClass := 0;
percAnnProtClass := 0;
percAnnProtAClass := 0;
percAnnProtPClass := 0;
percAnnProtIClass := 0;
PercAnnProfGrigi := 0;
PercAnnProfProt := 0;
PercAnnProfProtA := 0;
PercAnnProfProtP := 0;
PercAnnProfProtI := 0;


RETURN;

EXCEPTION WHEN OTHERS THEN
RETURN;
END MensileDocTableFunction;
/

SHOW ERRORS;


--
-- MENSILEFASCICOLITABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".MensileFascicoliTableFunction (p_ID_AMM number, p_ID_REGISTRO number, ANNO number, mese number)
RETURN FascicoliTableRow PIPELINED IS
--dichiarazione
out_rec FascicoliTableType := FascicoliTableType(NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);

-- variabili globali
totFasc float;
totFascA float;
totFascC float;
MESE_VC varchar(255);

--variabili mensili
contaMese number;
totFascM float;
totFascMA float;
totFascMC float;
totPercFascA float;
totPercFascC float;
begin
--settaggio variabili
totFasc := 0;
totFascA := 0;
totFascC := 0;
contaMese := 1;
totFascM  := 0;
totFascMA := 0;
totFascMC := 0;
totPercFascA := 0;
totPercFascC :=0;



--conta valori globali
-- CONTA FASCICOLI totali nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT(project.SYSTEM_ID) into totFasc from project
where project.cha_tipo_proj = 'F'
and project.id_amm = p_ID_AMM
and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);


-- CONTA FASCICOLI CREATI NELL'ANNO  nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT(project.SYSTEM_ID) into totFascA from project
where project.cha_tipo_proj = 'F'
and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and project.cha_stato = 'A'
and project.id_amm = p_ID_AMM
and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);


-- CONTA FASCICOLI CHIUSI NELL'ANNO nella amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT (project.SYSTEM_ID) into totFascC from project
where project.cha_tipo_proj = 'F' and project.cha_stato = 'C'
and  to_number(to_char(project.dta_chiusura,'YYYY')) = anno
and project.id_amm = p_ID_AMM
and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);
--fine conta


--ciclo scansione mensile
--while (mese >= contaMese)
--LOOP
contaMese:=mese;
--conto  i fascicoli creati (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT (project.SYSTEM_ID) into totFascMA from project
where project.cha_tipo_proj = 'F' and project.cha_stato = 'A'
and  to_number(to_char(project.dta_creazione,'MM')) = contaMese and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and project.id_amm = p_ID_AMM and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);

--conto  i fascicoli chiusi (nel mese) della amministrazione (@id_amm) e/o registro (@id_registro) se presente
select COUNT(project.SYSTEM_ID) into totFascMC from project
where project.cha_tipo_proj = 'F' and project.cha_stato = 'C'
and  to_number(to_char(project.dta_creazione,'MM')) = contaMese and to_number(to_char(project.dta_creazione,'YYYY')) = anno
and project.id_amm = p_ID_AMM and (project.id_registro = p_ID_REGISTRO or project.id_registro is null);

totFascM := totFascMA + totFascMC;
--calcolo percentuali
if(totFascM <> 0)
then
TotPercFascA := ROUND(((totFascMA / totFascM) * 100),2);
TotPercFascC := ROUND(((totFascMC / totFascM) * 100),2);
end if;
-- parsing valore mese

MESE_VC :=
CASE contaMese
WHEN 1 THEN 'Gennaio'
WHEN 2 THEN 'Febbraio'
WHEN 3 THEN 'Marzo'
WHEN 4 THEN 'Aprile'
WHEN 5 THEN 'Maggio'
WHEN 6 THEN 'Giugno'
WHEN 7 THEN 'Luglio'
WHEN 8 THEN 'Agosto'
WHEN 9 THEN 'Settembre'
WHEN 10 THEN 'Ottobre'
WHEN 11 THEN 'Novembre'
WHEN 12 THEN 'Dicembre'
end;
--
-- inserimento dati nella tabella temporanea
out_rec.TOTFASC := totFasc;
out_rec.TOTFASCA := totFascA;
out_rec.TOTFASCC := totFascC;
out_rec.MESE := MESE_VC;
out_rec.TOTFASCM := totFascM;
out_rec.TOTFASCMA := totFascMA;
out_rec.TOTFASCMC := totFascMC;
out_rec.TOTPERCFASCA := totPercFascA;
out_rec.TOTPERCFASCC := totPercFascC;

PIPE ROW(out_rec);
--INSERT INTO [docsadm].[#REPORT_ANNUALE_FASCICOLI](TOTFASC,TOTFASCA,TOTFASCC,MESE,TOTFASCM,TOTFASCMA,TOTFASCMC,TOTPERCFASCA,TOTPERCFASCC)
--    VALUES (totFasc, totFascA, totFascC, MESE_VC, totFascM, totFascMA, totFascMC, totPercFascA, totPercFascC)

--reset dei contatori
--contaMese := contaMese + 1;
totFascM  := 0;
totFascMA := 0;
totFascMC := 0;
totPercFascA := 0;
totPercFascC := 0;

--end loop;
--fine ciclo
RETURN;

EXCEPTION WHEN OTHERS THEN
RETURN;
END MensileFascicoliTableFunction;
/

SHOW ERRORS;


--
-- TEMPIMEDICOMPATTATABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".TempiMediCompattaTableFunction (ID_AMM number, ID_REGISTRO number, ANNO number)
RETURN TempiMediTableRow PIPELINED IS
--dichiarazione
out_rec TempiMediTableType := TempiMediTableType(NULL,NULL,NULL);
--DICHIARAZIONI VARIABILI

CodClass varchar (255);
DescClass varchar (255);
ContaFasc number;
valore float;
tempoMedio float;
-- variabili ausiliarie per il cursore che recupera le voci di titolario
SYSTEM_ID_VT number;
DESCRIPTION_VT VARCHAR (255);
VAR_CODICE_VT VARCHAR (255);
--variabili ausuliarie per il cursore dei fascicoli
DTA_CREAZIONE DATE;
DTA_CHIUSURA DATE;
INTERVALLO INT;

NUM_LIVELLO1 VARCHAR(255);
VAR_CODICE_LIVELLO1 VARCHAR(255);
DESCRIPTION__LIVELLO1 VARCHAR(255);
TOT_VT number;
CONTATORE number;
tmp float;

--Dichiarazione dei cursori
--Cursore per le voci di titolario
CURSOR c_VociTit (amm number, reg number) is
select project.system_id,project.description,project.var_codice,project.num_livello  from project
where project.cha_tipo_proj = 'T' and project.var_codice is not null and
project.id_amm =amm and (project.id_registro = reg OR project.id_registro is null)
order by project.var_cod_liv1;

-- contiene tutti i fascicoli (TIPO "F")
CURSOR c_Fascicoli (amm number, parentId number) is
select project.dta_creazione, project.dta_chiusura
from project
where project.cha_tipo_proj = 'F' and project.id_amm = amm
and project.id_parent = parentId;
c1 c_Fascicoli%ROWTYPE;

begin
--SETTAGGIO INIZIALE VARIABILI
ContaFasc := 0;
tempoMedio := 0;
valore := 0;
intervallo := 0;
CONTATORE := 0;
TOT_VT := 0;
tmp := 0;

--1 QUERY- elenco voci di titolario  -- (input : @id_amm)
Open c_VociTit(ID_AMM,ID_REGISTRO);
LOOP
FETCH c_VociTit into SYSTEM_ID_VT,DESCRIPTION_VT,VAR_CODICE_VT,NUM_LIVELLO1;
EXIT WHEN c_VociTit%NOTFOUND;

if(NUM_LIVELLO1 = 1)
then
VAR_CODICE_LIVELLO1 := VAR_CODICE_VT;
DESCRIPTION__LIVELLO1 := DESCRIPTION_VT;
CONTATORE := 0;
end if;
CONTATORE := CONTATORE +1;
--2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)
open c_Fascicoli (ID_AMM , SYSTEM_ID_VT );
LOOP
FETCH c_Fascicoli into c1;
EXIT WHEN c_Fascicoli%NOTFOUND;
--conto le differenze parziali di tutti i fascicoli contenuti nella voce di titolario selezionata
IF ((c1.dta_creazione IS NOT NULL) AND (c1.dta_chiusura IS NOT NULL))
then
contaFasc := contaFasc + 1;
tmp := c1.dta_chiusura - c1.dta_creazione;
tmp := tmp + 1;
tmp := ROUND (tmp);
intervallo := intervallo + tmp;
end if;
----------------- end
END LOOP;
--(FINE 2 ciclo)
close c_Fascicoli;

--converto i valori trovati e calcolo il tempo di lavorazione medio di tutti i fascicoli della voce di titolario prescelta
if ((intervallo <> 0) and (contaFasc <> 0))
then
tempoMedio := round(intervallo / contaFasc,2);
TOT_VT := TOT_VT + tempoMedio;
if(tempoMedio < 0) then
tempoMedio:=0;
TOT_VT := 0;
end if;
end if;
-- INSERISCO I VALORI TROVATI NELLA TABELLA TEMPORANEA
if(NUM_LIVELLO1=1)
then
out_rec.COD_CLASS := VAR_CODICE_LIVELLO1;
out_rec.DESC_CLASS := DESCRIPTION__LIVELLO1;
out_rec.T_MEDIO_LAV := TOT_VT/ CONTATORE;

PIPE ROW(out_rec);
end if;
-- reset delle variabili di conteggio
contaFasc := 0;
intervallo := 0;
tempoMedio := 0;
TOT_VT := 0;

END LOOP;
--(FINE 1 ciclo)
close c_VociTit;
RETURN;

EXCEPTION WHEN OTHERS THEN
RETURN;
END TempiMediCompattaTableFunction;
/

SHOW ERRORS;


--
-- TEMPIMEDITABLEFUNCTION  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".TempiMediTableFunction (P_ID_AMM number, P_ID_REGISTRO number, ANNO number)
RETURN TempiMediTableRow PIPELINED IS
--dichiarazione
out_rec TempiMediTableType := TempiMediTableType(NULL,NULL,NULL);
--DICHIARAZIONI VARIABILI

CodClass varchar (255);
DescClass varchar (255);
ContaFasc number;
valore float;
tempoMedio float;
-- variabili ausiliarie per il cursore che recupera le voci di titolario
SYSTEM_ID_VT number;
DESCRIPTION_VT VARCHAR (255);
VAR_CODICE_VT VARCHAR (255);
--variabili ausuliarie per il cursore dei fascicoli
DTA_CREAZIONE DATE;
DTA_CHIUSURA DATE;
INTERVALLO INT;
tmp float;

tmp_a number;
tmp_c number;

--Dichiarazione dei cursori
--Cursore per le voci di titolario
CURSOR c_VociTit (amm number, reg number) is
select project.system_id,project.description,project.var_codice from project
where project.cha_tipo_proj = 'T' and project.var_codice is not null and
project.id_amm =amm and (project.id_registro = reg OR project.id_registro is null)
order by project.var_cod_liv1;

-- contiene tutti i fascicoli (TIPO "F")
CURSOR c_Fascicoli (amm number, parentId number) is
select project.dta_creazione, project.dta_chiusura
from project
where project.cha_tipo_proj = 'F' and project.id_amm = amm
and project.id_parent = parentId;
c1 c_Fascicoli%ROWTYPE;
begin
--SETTAGGIO INIZIALE VARIABILI
ContaFasc := 0;
tempoMedio := 0;
valore := 0;
intervallo := 0;
tmp := 0;

--1 QUERY- elenco voci di titolario  -- (input : @id_amm)
Open c_VociTit(P_ID_AMM,P_ID_REGISTRO);
LOOP
FETCH c_VociTit into SYSTEM_ID_VT,DESCRIPTION_VT,VAR_CODICE_VT;
EXIT WHEN c_VociTit%NOTFOUND;
--2 QUERY- selezione dei fascicoli dellla relativa voce di titolario- (input @id_amm)
open c_Fascicoli (P_ID_AMM , SYSTEM_ID_VT );
LOOP
FETCH c_Fascicoli into c1;
EXIT WHEN c_Fascicoli%NOTFOUND;
--conto le differenze parziali di tutti i fascicoli contenuti nella voce di titolario selezionata
IF ((c1.dta_creazione IS NOT NULL) AND (c1.dta_chiusura IS NOT NULL))
then
contaFasc := contaFasc + 1;
dbms_output.put_line(contaFasc);
tmp := c1.dta_chiusura - c1.dta_creazione;
tmp := tmp + 1;
tmp := ROUND (tmp);
intervallo := intervallo + tmp;
end if;
----------------- end
END LOOP;
--(FINE 2 ciclo)
close c_Fascicoli;

--converto i valori trovati e calcolo il tempo di lavorazione medio di tutti i fascicoli della voce di titolario prescelta
if ((intervallo <> 0) and (contaFasc <> 0))
then
tempoMedio := round(intervallo / contaFasc,2);
if(tempoMedio < 0) then
tempoMedio:=0;
end if;
end if;
-- INSERISCO I VALORI TROVATI NELLA TABELLA TEMPORANEA
out_rec.COD_CLASS := VAR_CODICE_VT;
out_rec.DESC_CLASS := DESCRIPTION_VT;
out_rec.T_MEDIO_LAV := tempoMedio;

PIPE ROW(out_rec);
-- reset delle variabili di conteggio
contaFasc := 0;
intervallo := 0;
tempoMedio := 0;

END LOOP;
--(FINE 1 ciclo)
close c_VociTit;
RETURN;

EXCEPTION WHEN OTHERS THEN
RETURN;
END TempiMediTableFunction;
/

SHOW ERRORS;


--
-- DESCUO  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".DescUO (idUO INT)
RETURN VARCHAR IS risultato VARCHAR(256);

BEGIN
if(idUO is null)
then risultato:=' ';
else
begin
risultato := ' ';
SELECT VAR_DESC_CORR into risultato FROM DPA_CORR_GLOBALI WHERE SYSTEM_ID=idUO;
exception  WHEN OTHers then risultato:='';
end;
end if;
RETURN risultato;

END DescUO;
/

SHOW ERRORS;


--
-- CANDELETEFROMCONSERVAZIONE  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".canDeleteFromConservazione(sysId INT, idPeople INT, idGruppo INT)

RETURN INT IS risultato INT;

BEGIN
begin

SELECT DISTINCT (DPA_ITEMS_CONSERVAZIONE.SYSTEM_ID) INTO risultato FROM DPA_AREA_CONSERVAZIONE, DPA_ITEMS_CONSERVAZIONE WHERE 
DPA_ITEMS_CONSERVAZIONE.ID_CONSERVAZIONE=DPA_AREA_CONSERVAZIONE.SYSTEM_ID AND DPA_ITEMS_CONSERVAZIONE.ID_PROFILE = sysID
AND ID_PEOPLE =idPeople and ID_RUOLO_IN_UO = (SELECT SYSTEM_ID FROM DPA_CORR_GLOBALI WHERE ID_GRUPPO = idGruppo);

IF (risultato > 0) THEN
risultato:=1;
ELSE
risultato:=0;
END IF;

EXCEPTION
WHEN NO_DATA_FOUND THEN risultato := 0;
WHEN OTHERS THEN risultato := 0;
end;
RETURN risultato;
END canDeleteFromConservazione;
/

SHOW ERRORS;


--
-- POPDPAASSRUOLOOGGCUSTOMFASC  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".popDpaAssRuoloOggCustomFasc
RETURN INT IS retValue INT;

cnt INT := 0;
systemId INT := 0;
recordCount INT := 0;
id_oggetto INT := 0;
id_ruolo INT := 0;

CURSOR cur IS
select  distinct B.SYSTEM_ID, D.ID_RUOLO into id_oggetto, id_ruolo from
DPA_ASS_TEMPLATES_FASC A, DPA_OGGETTI_CUSTOM_FASC B, DPA_TIPO_OGGETTO_FASC C, DPA_VIS_TIPO_FASC D
where
A.ID_OGGETTO = B.SYSTEM_ID
AND
B.ID_TIPO_OGGETTO = C.SYSTEM_ID
AND
A.ID_TEMPLATE = D.ID_TIPO_FASC
AND
D.DIRITTI > 0
AND
A.ID_PROJECT is null
AND
upper(C.TIPO) = 'CONTATORE'
AND
B.CONTA_DOPO = 1
ORDER BY B.SYSTEM_ID ASC;

BEGIN

OPEN cur;
LOOP
FETCH cur INTO id_oggetto,id_ruolo;
EXIT WHEN cur%NOTFOUND;

begin
insert into DPA_ASS_RUOLO_OGG_CUSTOM (SYSTEM_ID, ID_OGGETTO_CUSTOM, ID_RUOLO, INSERIMENTO)
values(seq.nextval, id_oggetto, id_ruolo, 1);
exception when others then cnt:=0;
end;


recordCount := cnt + recordCount;


END LOOP;

IF (recordCount > 0) THEN
retValue := 1;
ELSE
retValue := 0;
END IF;

RETURN retValue;

END popDpaAssRuoloOggCustomFasc;
/

SHOW ERRORS;


--
-- POPOLATEDPAASSRUOLOOGGCUSTOM  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".popolateDpaAssRuoloOggCustom
RETURN INT IS retValue INT;

cnt INT := 0;
systemId INT := 0;
recordCount INT := 0;
id_oggetto INT := 0;
id_ruolo INT := 0;

CURSOR cur IS
select  distinct B.SYSTEM_ID, D.ID_RUOLO into id_oggetto, id_ruolo from
DPA_ASSOCIAZIONE_TEMPLATES A, DPA_OGGETTI_CUSTOM B, DPA_TIPO_OGGETTO C, DPA_VIS_TIPO_DOC D
where
A.ID_OGGETTO = B.SYSTEM_ID
AND
B.ID_TIPO_OGGETTO = C.SYSTEM_ID
AND
A.ID_TEMPLATE = D.ID_TIPO_DOC
AND
D.DIRITTI > 0
AND
A.DOC_NUMBER is null
AND
upper(C.TIPO) = 'CONTATORE'
AND
B.CONTA_DOPO = 1
ORDER BY B.SYSTEM_ID ASC;

BEGIN

OPEN cur;
LOOP
FETCH cur INTO id_oggetto,id_ruolo;
EXIT WHEN cur%NOTFOUND;

begin
insert into DPA_ASS_RUOLO_OGG_CUSTOM (SYSTEM_ID, ID_OGGETTO_CUSTOM, ID_RUOLO, INSERIMENTO)
values(seq.nextval, id_oggetto, id_ruolo, 1);
exception when others then cnt:=0;
end;


recordCount := cnt + recordCount;


END LOOP;

IF (recordCount > 0) THEN
retValue := 1;
ELSE
retValue := 0;
END IF;

RETURN retValue;

END popolateDpaAssRuoloOggCustom;
/

SHOW ERRORS;


--
-- GETCODRUBRICACORR  (Function) 
--
CREATE OR REPLACE FUNCTION "@db_user".getcodRubricaCorr(sys number)
RETURN varchar IS tmpVar varchar(256);

BEGIN
BEGIN
tmpVar := '';
SELECT
UPPER(VAR_COD_RUBRICA) into tmpVar
FROM DPA_CORR_GLOBALI
WHERE SYSTEM_ID=sys;


EXCEPTION
WHEN OTHERS THEN
null;
END;
RETURN tmpVar;

END getcodRubricaCorr;
/

SHOW ERRORS;


--
-- RDE_AUTORIZZAZIONE  (View) 
--
CREATE OR REPLACE VIEW "@db_user".RDE_AUTORIZZAZIONE
AS 
SELECT DISTINCT  DPA_EL_REGISTRI.SYSTEM_ID AS IdRegistroRemoto,  PEOPLE.SYSTEM_ID AS IdUtenteRemoto FROM    DPA_TIPO_F_RUOLO INNER JOIN DPA_TIPO_FUNZIONE ON  DPA_TIPO_F_RUOLO.ID_TIPO_FUNZ =  DPA_TIPO_FUNZIONE.SYSTEM_ID INNER JOIN DPA_EL_REGISTRI INNER JOIN DPA_L_RUOLO_REG ON  DPA_EL_REGISTRI.SYSTEM_ID =  DPA_L_RUOLO_REG.ID_REGISTRO INNER JOIN DPA_CORR_GLOBALI ON  DPA_L_RUOLO_REG.ID_RUOLO_IN_UO =  DPA_CORR_GLOBALI.SYSTEM_ID INNER JOIN PEOPLEGROUPS ON  DPA_CORR_GLOBALI.ID_GRUPPO =  PEOPLEGROUPS.GROUPS_SYSTEM_ID INNER JOIN PEOPLE ON  PEOPLEGROUPS.PEOPLE_SYSTEM_ID =  PEOPLE.SYSTEM_ID ON DPA_TIPO_F_RUOLO.ID_RUOLO_IN_UO =  DPA_L_RUOLO_REG.ID_RUOLO_IN_UO WHERE  ( DPA_TIPO_FUNZIONE.SYSTEM_ID IN (select id_tipo_funzione from DPA_FUNZIONI where cod_funzione = 'PROTO_EME')) AND ( DPA_CORR_GLOBALI.DTA_FINE IS NULL) AND ( DPA_CORR_GLOBALI.CHA_TIPO_URP = 'R')
/


--
-- RDE_REGISTRO  (View) 
--
CREATE OR REPLACE VIEW "@db_user".RDE_REGISTRO
AS 
SELECT     SYSTEM_ID AS IdRegistroRemoto, VAR_DESC_REGISTRO AS Descrizione, VAR_CODICE AS Codice FROM       DPA_EL_REGISTRI
/


--
-- RDE_UTENTE  (View) 
--
CREATE OR REPLACE VIEW "@db_user".RDE_UTENTE
AS 
SELECT DISTINCT A.USER_ID  AS IdUtente, A.SYSTEM_ID  AS IdUtenteRemoto, A.USER_PASSWORD AS Password,  B.ID_AMM  AS IdAmministrazioneRemoto, B.VAR_COGNOME AS Cognome, B.VAR_NOME AS Nome FROM   DPA_CORR_GLOBALI B, PEOPLEGROUPS C, PEOPLE A WHERE A.SYSTEM_ID = B.ID_PEOPLE AND (B.CHA_TIPO_URP = 'P')  AND (B.CHA_TIPO_IE = 'I') AND (B.DTA_FINE IS NULL) AND   (A.SYSTEM_ID = C.PEOPLE_SYSTEM_ID AND C.GROUPS_SYSTEM_ID IN (SELECT N.ID_GRUPPO FROM DPA_TIPO_F_RUOLO M, DPA_CORR_GLOBALI N WHERE ID_TIPO_FUNZ IN (select id_tipo_funzione from DPA_FUNZIONI where cod_funzione = 'PROTO_EME') AND M.ID_RUOLO_IN_UO = N.SYSTEM_ID))
/


--
-- DPA_V_DOC_TRASM  (View) 
--
CREATE OR REPLACE VIEW "@db_user".DPA_V_DOC_TRASM
AS 
SELECT /*+index (p)*/  p.system_id AS id_profile, p.num_proto, p.dta_proto,         codfasc (p.system_id) AS codfasc, p.cha_tipo_proto, p.dta_proto_in,        p.var_proto_in, p.var_prof_oggetto, p.var_note,       getdesccorr (dca.id_corr_globale) AS ambito, getdesccorr (dca.id_parent) AS settore,       'trasmissione' AS operazione,     getpeoplename (p.id_people_prot) AS operatore,     corrcat (p.system_id, p.cha_tipo_proto) AS mittente,     getdtainvio (p.system_id) AS datatrasmissione  FROM PROFILE p, dpa_corr_abilitati dca  WHERE p.id_uo_prot = dca.id_corr_globale    AND p.cha_tipo_proto IN ('A', 'P')    AND p.cha_da_proto = '0'    AND (getdtainvio (p.system_id)  > (SELECT MAX (dta_ultimo_scarico)                              FROM dpa_dati_scaricati))     AND dca.cha_applicazione = '1'  AND dca.id_corr_globale = p.id_uo_prot ORDER BY p.num_anno_proto, p.id_registro, p.num_proto
/


--
-- DPA_V_DOCUMENTI  (View) 
--
CREATE OR REPLACE VIEW "@db_user".DPA_V_DOCUMENTI
AS 
SELECT   /*+index (p)*/  p.system_id AS id_profile, p.num_proto, p.dta_proto,
codfasc (p.system_id) AS cod_fasc, p.cha_tipo_proto, p.dta_proto_in,
p.var_proto_in, p.var_prof_oggetto, p.var_note,
getdesccorr (dca.id_corr_globale) AS ambito,
getdesccorr (dca.id_parent) AS settore,
'protocollazione' AS operazione,
getpeoplename (p.id_people_prot) AS operatore,
corrcat (p.system_id, p.cha_tipo_proto) AS mittente,
getdtainvio (p.system_id) AS datatrasmissione
FROM PROFILE p, dpa_corr_abilitati dca
WHERE p.id_uo_prot = dca.id_corr_globale
AND p.cha_tipo_proto IN ('A', 'P')
AND p.cha_da_proto = '0'
AND (p.system_id > (SELECT MAX (id_ultimo_doc_scaricato)
FROM dpa_dati_scaricati))
AND dca.cha_applicazione = '1'
AND dca.id_corr_globale = p.id_uo_prot
ORDER BY p.num_anno_proto, p.id_registro, p.num_proto
/


--
-- DPA_V_TXFASC  (View) 
--
CREATE OR REPLACE VIEW "@db_user".DPA_V_TXFASC
AS 
select    id_project AS ID_FASC,dta_invio AS DTA_INVIO,upper(r.var_desc_ragione) as RAGIONE,s.id_corr_globale as ID_CORR_GLOB from dpa_trasmissione t,dpa_trasm_singola s,dpa_ragione_trasm r where t.cha_tipo_oggetto='F' and s.id_trasmissione=t.system_id and r.system_id=s.id_ragione and dta_invio=dpa_getMaxdtaInvioFAsc(t.id_project) group by dta_invio,id_project,upper(r.var_desc_ragione),s.id_corr_globale order by dtA_invio desc
/


--
-- RDE_AUTORIZZAZIONE_2  (View) 
--
CREATE OR REPLACE VIEW "@db_user".RDE_AUTORIZZAZIONE_2
AS 
SELECT DISTINCT dpa_el_registri.system_id AS idregistroremoto,
people.system_id AS idutenteremoto,
dpa_el_registri.var_codice
FROM dpa_tipo_f_ruolo INNER JOIN dpa_tipo_funzione
ON dpa_tipo_f_ruolo.id_tipo_funz =
dpa_tipo_funzione.system_id
INNER JOIN dpa_el_registri INNER JOIN dpa_l_ruolo_reg
ON dpa_el_registri.system_id = dpa_l_ruolo_reg.id_registro
INNER JOIN dpa_corr_globali
ON dpa_l_ruolo_reg.id_ruolo_in_uo =
dpa_corr_globali.system_id
INNER JOIN peoplegroups
ON dpa_corr_globali.id_gruppo =
peoplegroups.groups_system_id
INNER JOIN people
ON peoplegroups.people_system_id = people.system_id
ON dpa_tipo_f_ruolo.id_ruolo_in_uo =
dpa_l_ruolo_reg.id_ruolo_in_uo
WHERE (dpa_tipo_funzione.system_id IN (
SELECT id_tipo_funzione
FROM dpa_funzioni
WHERE cod_funzione =
'PROTO_EME')
)
AND (dpa_corr_globali.dta_fine IS NULL)
AND (dpa_corr_globali.cha_tipo_urp = 'R')
AND (   dpa_el_registri.cha_rf IS NULL
OR dpa_el_registri.cha_rf = '0'
)
AND (   dpa_el_registri.cha_disabilitato IS NULL
OR dpa_el_registri.cha_disabilitato = '0'
)
ORDER BY dpa_el_registri.system_id
/


--
-- RDE_REGISTRO_2  (View) 
--
CREATE OR REPLACE VIEW "@db_user".RDE_REGISTRO_2
AS 
SELECT system_id AS idregistroremoto, var_desc_registro AS descrizione,
var_codice AS codice
FROM dpa_el_registri
WHERE (cha_rf IS NULL OR cha_rf = '0')
AND (cha_disabilitato IS NULL OR cha_disabilitato = '0')
/


--
-- RDE_UTENTE_2  (View) 
--
CREATE OR REPLACE VIEW "@db_user".RDE_UTENTE_2
AS 
SELECT DISTINCT a.user_id AS idutente, a.system_id AS idutenteremoto,
b.id_amm AS idamministrazioneremoto,
b.var_cognome AS cognome, b.var_nome AS nome,
d.var_codice_amm AS codamministrazioneremoto
FROM dpa_corr_globali b,
peoplegroups c,
people a,
dpa_amministra d
WHERE a.system_id = b.id_people
AND a.id_amm = d.system_id
AND (b.cha_tipo_urp = 'P')
AND (b.cha_tipo_ie = 'I')
AND (b.dta_fine IS NULL)
AND (    a.system_id = c.people_system_id
AND c.groups_system_id IN (
SELECT n.id_gruppo
FROM dpa_tipo_f_ruolo m, dpa_corr_globali n
WHERE id_tipo_funz IN (
SELECT id_tipo_funzione
FROM dpa_funzioni
WHERE cod_funzione =
'PROTO_EME')
AND m.id_ruolo_in_uo = n.system_id)
)
ORDER BY b.var_cognome
/


--
-- TR_UPDATE_DPA_TODOLIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER "@db_user".TR_UPDATE_DPA_TODOLIST
AFTER UPDATE
OF CHA_IN_TODOLIST
ON team.DPA_TRASM_UTENTE
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
DELETE /*+ ALL_ROWS */ DPA_TODOLIST WHERE ID_TRASM_UTENTE = :NEW.SYSTEM_ID;
END;
/
SHOW ERRORS;


--
-- TR_INSERT_DPA_TODOLIST  (Trigger) 
--
CREATE OR REPLACE TRIGGER "@db_user".TR_INSERT_DPA_TODOLIST
AFTER UPDATE
OF DTA_INVIO
ON "@db_user".DPA_TRASMISSIONE REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN

INSERT INTO team.DPA_TODOLIST
SELECT :NEW.system_id,
dtu.id_trasm_singola,
dtu.system_id,
:NEW.dta_invio,
:NEW.id_people,
:NEW.id_ruolo_in_uo,
dtu.id_people,
dts.id_ragione,
:NEW.var_note_generali,
dts.var_note_sing,
dts.dta_scadenza,
:NEW.id_profile,
:NEW.id_project,
TO_NUMBER(Vardescribe(dts.id_corr_globale,'ID_GRUPPO')) AS id_ruolo_dest,
TO_NUMBER(Vardescribe(:NEW.id_profile,'PROF_IDREG')) AS id_registro,
DTS.CHA_TIPO_TRASM
FROM DPA_TRASM_SINGOLA dts,DPA_TRASM_UTENTE dtu
WHERE dtu.id_trasm_singola = dts.system_id AND dts.id_trasmissione = :NEW.system_id AND dtu.cha_in_todolist = 1;
END;
/
SHOW ERRORS;


--
-- JOB121  (Job) 
--
DECLARE
  X NUMBER;
BEGIN
  SYS.DBMS_JOB.SUBMIT
  ( job       => X 
   ,what      => 'TEAM.SETDATAREG;'
   ,next_date => to_date('19/03/2009 00.00.00','dd/mm/yyyy hh24:mi:ss')
   ,interval  => 'TRUNC(SYSDATE+1)'
   ,no_parse  => FALSE
  );
COMMIT;
END;
/



-- 
-- Non Foreign Key Constraints for Table DPA_CANALI_REG 
-- 
ALTER TABLE "@db_user".DPA_CANALI_REG ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CARAT_TIMBRO 
-- 
ALTER TABLE "@db_user".DPA_CARAT_TIMBRO ADD (  CONSTRAINT PK_DPA_CARAT_TIMBRO PRIMARY KEY (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CHECKIN_CHECKOUT 
-- 
ALTER TABLE "@db_user".DPA_CHECKIN_CHECKOUT ADD (  CONSTRAINT PK_DPA_CHECKIN_CHECKOUT PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CLIENT_MODEL_PROCESSORS 
-- 
ALTER TABLE "@db_user".DPA_CLIENT_MODEL_PROCESSORS ADD (  CONSTRAINT DPA_CLIENT_MODEL_PROCESSORS_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_COLORE_TIMBRO 
-- 
ALTER TABLE "@db_user".DPA_COLORE_TIMBRO ADD (  CONSTRAINT PK_DPA_COLORE_TIMBRO PRIMARY KEY (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CONV_PDF_SERVER 
-- 
ALTER TABLE "@db_user".DPA_CONV_PDF_SERVER ADD (  CONSTRAINT PK_DPA_CONV_PDF_SERVER PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CORR_ABILITATI 
-- 
ALTER TABLE "@db_user".DPA_CORR_ABILITATI ADD (  CONSTRAINT DPA_CORR_ABILITATI_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CORR_GLOBALI 
-- 
ALTER TABLE "@db_user".DPA_CORR_GLOBALI ADD (  PRIMARY KEY (SYSTEM_ID) DISABLE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CORR_STO 
-- 
ALTER TABLE "@db_user".DPA_CORR_STO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_UO_REG 
-- 
ALTER TABLE "@db_user".DPA_UO_REG ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_UO_SMISTAMENTO 
-- 
ALTER TABLE "@db_user".DPA_UO_SMISTAMENTO ADD (  UNIQUE (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_VIS_TIPO_DOC 
-- 
ALTER TABLE "@db_user".DPA_VIS_TIPO_DOC ADD (  CONSTRAINT PK_DPA_VIS_TIPO_DOC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_VIS_TIPO_FASC 
-- 
ALTER TABLE "@db_user".DPA_VIS_TIPO_FASC ADD (  CONSTRAINT PK_DPA_VIS_TIPO_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_VOCI_MENU_ADMIN 
-- 
ALTER TABLE "@db_user".DPA_VOCI_MENU_ADMIN ADD (  CONSTRAINT PK_DPA_VOCI_MENU_ADMIN PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table NETWORK_ALIASES 
-- 
ALTER TABLE "@db_user".NETWORK_ALIASES ADD (  CONSTRAINT NETWORK_UNIQUE UNIQUE (NETWORK_ID, NETWORK_TYPE) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table PROFILE 
-- 
ALTER TABLE "@db_user".PROFILE ADD (  CONSTRAINT INDX_PROFILE_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DELETED_SECURITY 
-- 
ALTER TABLE "@db_user".DELETED_SECURITY ADD (  CONSTRAINT INDX_DEL_SEQ_PK PRIMARY KEY (THING, PERSONORGROUP, ACCESSRIGHTS) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_AMMINISTRA 
-- 
ALTER TABLE "@db_user".DPA_AMMINISTRA ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ANAGRAFICA_LOG 
-- 
ALTER TABLE "@db_user".DPA_ANAGRAFICA_LOG ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_AREA_CONSERVAZIONE 
-- 
ALTER TABLE "@db_user".DPA_AREA_CONSERVAZIONE ADD (  CONSTRAINT INDX_AREA_CONS_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_AREA_LAVORO 
-- 
ALTER TABLE "@db_user".DPA_AREA_LAVORO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASSOCIAZIONE_TEMPLATES 
-- 
ALTER TABLE "@db_user".DPA_ASSOCIAZIONE_TEMPLATES ADD (  CONSTRAINT PK_DPA_ASSOCIAZIONE_TEMPLATES PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASSOCIAZIONE_VALORI 
-- 
ALTER TABLE "@db_user".DPA_ASSOCIAZIONE_VALORI ADD (  CONSTRAINT PK_DPA_ASSOCIAZIONE_VALORI PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASS_DIAGRAMMI 
-- 
ALTER TABLE "@db_user".DPA_ASS_DIAGRAMMI ADD (  CONSTRAINT PK_DPA_TIPODOC_DS_TEMPL PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASS_INDX_SIS 
-- 
ALTER TABLE "@db_user".DPA_ASS_INDX_SIS ADD (  CONSTRAINT PK_DPA_ASS_INDX_SIS PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASS_TEMPLATES_FASC 
-- 
ALTER TABLE "@db_user".DPA_ASS_TEMPLATES_FASC ADD (  CONSTRAINT PK_DPA_ASS_TEMPLATES_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASS_VALORI_FASC 
-- 
ALTER TABLE "@db_user".DPA_ASS_VALORI_FASC ADD (  CONSTRAINT PK_DPA_ASS_VALORI_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_CANALI 
-- 
ALTER TABLE "@db_user".DPA_CANALI ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ASS_RUOLO_OGG_CUSTOM 
-- 
ALTER TABLE "@db_user".DPA_ASS_RUOLO_OGG_CUSTOM ADD (  CONSTRAINT PK_DPA_ASS_RUOLO_OGG_CUSTOM PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table SECURITY 
-- 
ALTER TABLE "@db_user".SECURITY ADD (  CONSTRAINT INDX_SEC_PK PRIMARY KEY (THING, PERSONORGROUP, ACCESSRIGHTS) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_DETT_GLOBALI 
-- 
ALTER TABLE "@db_user".DPA_DETT_GLOBALI ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_DIAGRAMMI 
-- 
ALTER TABLE "@db_user".DPA_DIAGRAMMI ADD (  CONSTRAINT PK_DPA_DIAGRAMMI_DOC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_DIAGRAMMI_STATO 
-- 
ALTER TABLE "@db_user".DPA_DIAGRAMMI_STATO ADD (  CONSTRAINT PK_DPA_DIAGRAMMI_STATO PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_DIAGRAMMI_STO 
-- 
ALTER TABLE "@db_user".DPA_DIAGRAMMI_STO ADD (  CONSTRAINT PK_DPA_DIAGRAMMI_STO PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_DOC_ARRIVO_PAR 
-- 
ALTER TABLE "@db_user".DPA_DOC_ARRIVO_PAR ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_EL_REGISTRI 
-- 
ALTER TABLE "@db_user".DPA_EL_REGISTRI ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_FASCICOLAZIONE_CARTACEA 
-- 
ALTER TABLE "@db_user".DPA_FASCICOLAZIONE_CARTACEA ADD (  CONSTRAINT INDX_FASC_CARTACEA_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_FIRMATARI 
-- 
ALTER TABLE "@db_user".DPA_FIRMATARI ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_FIRMA_VERS 
-- 
ALTER TABLE "@db_user".DPA_FIRMA_VERS ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_FORMATI_DOCUMENTO 
-- 
ALTER TABLE "@db_user".DPA_FORMATI_DOCUMENTO ADD (  CONSTRAINT PK_DPA_FORMATI_DOCUMENTO PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_FORMATTA_FASC 
-- 
ALTER TABLE "@db_user".DPA_FORMATTA_FASC ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_REGISTRO_STO 
-- 
ALTER TABLE "@db_user".DPA_REGISTRO_STO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_REG_PROTO 
-- 
ALTER TABLE "@db_user".DPA_REG_PROTO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_STAMPAREGISTRI 
-- 
ALTER TABLE "@db_user".DPA_STAMPAREGISTRI ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_STATI 
-- 
ALTER TABLE "@db_user".DPA_STATI ADD (  CONSTRAINT PK_DPA_STATI PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_STATO_INVIO 
-- 
ALTER TABLE "@db_user".DPA_STATO_INVIO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_SUPPORTO 
-- 
ALTER TABLE "@db_user".DPA_SUPPORTO ADD (  CONSTRAINT DPA_SUPPORTO_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TEMPL_TRASM 
-- 
ALTER TABLE "@db_user".DPA_TEMPL_TRASM ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_ATTO 
-- 
ALTER TABLE "@db_user".DPA_TIPO_ATTO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_FASC 
-- 
ALTER TABLE "@db_user".DPA_TIPO_FASC ADD (  CONSTRAINT PK_DPA_TIPO_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_FUNZIONE 
-- 
ALTER TABLE "@db_user".DPA_TIPO_FUNZIONE ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_F_RUOLO 
-- 
ALTER TABLE "@db_user".DPA_TIPO_F_RUOLO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_FUNZIONI 
-- 
ALTER TABLE "@db_user".DPA_FUNZIONI ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_INDX_SIS 
-- 
ALTER TABLE "@db_user".DPA_INDX_SIS ADD (  CONSTRAINT PK_DPA_INDX_SIS PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_ITEMS_CONSERVAZIONE 
-- 
ALTER TABLE "@db_user".DPA_ITEMS_CONSERVAZIONE ADD (  CONSTRAINT INDX_ITEMS_CONS_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_LDAP_SYNC_HISTORY 
-- 
ALTER TABLE "@db_user".DPA_LDAP_SYNC_HISTORY ADD (  CONSTRAINT DPA_LDAP_SYNC_HISTORY_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_LISTE_DISTR 
-- 
ALTER TABLE "@db_user".DPA_LISTE_DISTR ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_LOG 
-- 
ALTER TABLE "@db_user".DPA_LOG ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_LOG_ATTIVATI 
-- 
ALTER TABLE "@db_user".DPA_LOG_ATTIVATI ADD (  PRIMARY KEY (SYSTEM_ID_ANAGRAFICA, ID_AMM) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_L_AOO_UO 
-- 
ALTER TABLE "@db_user".DPA_L_AOO_UO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_MAIL_ELABORATE 
-- 
ALTER TABLE "@db_user".DPA_MAIL_ELABORATE ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_MODELLI_DEST_CON_NOTIFICA 
-- 
ALTER TABLE "@db_user".DPA_MODELLI_DEST_CON_NOTIFICA ADD (  CONSTRAINT DPA_MODELLI_DEST_CON_NOTIFI_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_OGGETTARIO 
-- 
ALTER TABLE "@db_user".DPA_OGGETTARIO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_OGGETTI_CUSTOM 
-- 
ALTER TABLE "@db_user".DPA_OGGETTI_CUSTOM ADD (  CONSTRAINT PK_DPA_OGGETTI_CUSTOM PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_OGGETTI_CUSTOM_FASC 
-- 
ALTER TABLE "@db_user".DPA_OGGETTI_CUSTOM_FASC ADD (  CONSTRAINT PK_DPA_OGGETTI_CUSTOM_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_OGGETTI_STO 
-- 
ALTER TABLE "@db_user".DPA_OGGETTI_STO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_OGG_CUSTOM_COMP 
-- 
ALTER TABLE "@db_user".DPA_OGG_CUSTOM_COMP ADD (  CONSTRAINT PK_DPA_OGG_CUSTOM_COMP PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_OGG_CUSTOM_COMP_FASC 
-- 
ALTER TABLE "@db_user".DPA_OGG_CUSTOM_COMP_FASC ADD (  CONSTRAINT PK_DPA_OGG_CUSTOM_COMP_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_PAROLE 
-- 
ALTER TABLE "@db_user".DPA_PAROLE ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_PASSI 
-- 
ALTER TABLE "@db_user".DPA_PASSI ADD (  CONSTRAINT PK_DPA_PASSI PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_POSIZ_TIMBRO 
-- 
ALTER TABLE "@db_user".DPA_POSIZ_TIMBRO ADD (  CONSTRAINT PK_DPA_POSIZ_TIMBRO PRIMARY KEY (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_PROF_PAROLE 
-- 
ALTER TABLE "@db_user".DPA_PROF_PAROLE ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_RAGIONE_TRASM 
-- 
ALTER TABLE "@db_user".DPA_RAGIONE_TRASM ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_OGGETTO 
-- 
ALTER TABLE "@db_user".DPA_TIPO_OGGETTO ADD (  CONSTRAINT PK_DPA_TIPO_OGGETTO PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_OGGETTO_FASC 
-- 
ALTER TABLE "@db_user".DPA_TIPO_OGGETTO_FASC ADD (  CONSTRAINT PK_DPA_TIPO_OGGETTO_FASC PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_RUOLO 
-- 
ALTER TABLE "@db_user".DPA_TIPO_RUOLO ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TIPO_SUPPORTO 
-- 
ALTER TABLE "@db_user".DPA_TIPO_SUPPORTO ADD (  CONSTRAINT DPA_TIPO_SUPPORTO_PK PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TRASMISSIONE 
-- 
ALTER TABLE "@db_user".DPA_TRASMISSIONE ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TRASM_DIAGR 
-- 
ALTER TABLE "@db_user".DPA_TRASM_DIAGR ADD (  CONSTRAINT PK_DPA_TRASM_DIAGR PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TRASM_SINGOLA 
-- 
ALTER TABLE "@db_user".DPA_TRASM_SINGOLA ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Non Foreign Key Constraints for Table DPA_TRASM_UTENTE 
-- 
ALTER TABLE "@db_user".DPA_TRASM_UTENTE ADD (  PRIMARY KEY (SYSTEM_ID) USING INDEX TABLESPACE @ora_idxtblspc_name ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_VIS_TIPO_DOC 
-- 
ALTER TABLE "@db_user".DPA_VIS_TIPO_DOC ADD (  FOREIGN KEY (ID_TIPO_DOC) REFERENCES "@db_user".DPA_TIPO_ATTO (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_VIS_TIPO_FASC 
-- 
ALTER TABLE "@db_user".DPA_VIS_TIPO_FASC ADD (  FOREIGN KEY (ID_TIPO_FASC) REFERENCES "@db_user".DPA_TIPO_FASC (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table PEOPLE 
-- 
ALTER TABLE "@db_user".PEOPLE ADD (  CONSTRAINT PEOPLE_R01 FOREIGN KEY (ID_CLIENT_MODEL_PROCESSOR) REFERENCES "@db_user".DPA_CLIENT_MODEL_PROCESSORS (SYSTEM_ID) ON DELETE SET NULL ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_AMMINISTRA 
-- 
ALTER TABLE "@db_user".DPA_AMMINISTRA ADD (  CONSTRAINT DPA_AMMINISTRA_R01 FOREIGN KEY (ID_CLIENT_MODEL_PROCESSOR) REFERENCES "@db_user".DPA_CLIENT_MODEL_PROCESSORS (SYSTEM_ID) ON DELETE SET NULL ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_AREA_CONSERVAZIONE 
-- 
ALTER TABLE "@db_user".DPA_AREA_CONSERVAZIONE ADD (  CONSTRAINT DPA_AREA_CONSERVAZIONE_R01 FOREIGN KEY (VAR_TIPO_SUPPORTO) REFERENCES "@db_user".DPA_TIPO_SUPPORTO (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_ASSOCIAZIONE_TEMPLATES 
-- 
ALTER TABLE "@db_user".DPA_ASSOCIAZIONE_TEMPLATES ADD (  FOREIGN KEY (ID_OGGETTO) REFERENCES "@db_user".DPA_OGGETTI_CUSTOM (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_ASSOCIAZIONE_VALORI 
-- 
ALTER TABLE "@db_user".DPA_ASSOCIAZIONE_VALORI ADD (  FOREIGN KEY (ID_OGGETTO_CUSTOM) REFERENCES "@db_user".DPA_OGGETTI_CUSTOM (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_ASS_INDX_SIS 
-- 
ALTER TABLE "@db_user".DPA_ASS_INDX_SIS ADD (  FOREIGN KEY (ID_INDICE_SIS) REFERENCES "@db_user".DPA_INDX_SIS (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_ASS_TEMPLATES_FASC 
-- 
ALTER TABLE "@db_user".DPA_ASS_TEMPLATES_FASC ADD (  FOREIGN KEY (ID_OGGETTO) REFERENCES "@db_user".DPA_OGGETTI_CUSTOM_FASC (SYSTEM_ID) ENABLE NOVALIDATE,  CONSTRAINT FK_TEMPLATE_FASC FOREIGN KEY (ID_TEMPLATE) REFERENCES "@db_user".DPA_TIPO_FASC (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_ASS_VALORI_FASC 
-- 
ALTER TABLE "@db_user".DPA_ASS_VALORI_FASC ADD (  FOREIGN KEY (ID_OGGETTO_CUSTOM) REFERENCES "@db_user".DPA_OGGETTI_CUSTOM_FASC (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_STATI 
-- 
ALTER TABLE "@db_user".DPA_STATI ADD (  FOREIGN KEY (ID_DIAGRAMMA) REFERENCES "@db_user".DPA_DIAGRAMMI_STATO (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_SUPPORTO 
-- 
ALTER TABLE "@db_user".DPA_SUPPORTO ADD (  CONSTRAINT DPA_SUPPORTO_R01 FOREIGN KEY (ID_CONSERVAZIONE) REFERENCES "@db_user".DPA_AREA_CONSERVAZIONE (SYSTEM_ID) ENABLE NOVALIDATE,  CONSTRAINT DPA_SUPPORTO_R02 FOREIGN KEY (ID_TIPO_SUPPORTO) REFERENCES "@db_user".DPA_TIPO_SUPPORTO (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_ITEMS_CONSERVAZIONE 
-- 
ALTER TABLE "@db_user".DPA_ITEMS_CONSERVAZIONE ADD (  CONSTRAINT DPA_ITEMS_CONSERVAZIONE_R01 FOREIGN KEY (ID_CONSERVAZIONE) REFERENCES "@db_user".DPA_AREA_CONSERVAZIONE (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_LDAP_CONFIG 
-- 
ALTER TABLE "@db_user".DPA_LDAP_CONFIG ADD (  CONSTRAINT FK_LDAP_USER_ATTRIBUTES_IDAMM FOREIGN KEY (ID_AMM) REFERENCES "@db_user".DPA_AMMINISTRA (SYSTEM_ID) ON DELETE CASCADE ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_LDAP_SYNC_HISTORY 
-- 
ALTER TABLE "@db_user".DPA_LDAP_SYNC_HISTORY ADD (  CONSTRAINT DPA_LDAP_SYNC_HISTORY_R01 FOREIGN KEY (ID_AMM) REFERENCES "@db_user".DPA_AMMINISTRA (SYSTEM_ID) ON DELETE CASCADE ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_OGGETTI_CUSTOM 
-- 
ALTER TABLE "@db_user".DPA_OGGETTI_CUSTOM ADD (  FOREIGN KEY (ID_TIPO_OGGETTO) REFERENCES "@db_user".DPA_TIPO_OGGETTO (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_OGGETTI_CUSTOM_FASC 
-- 
ALTER TABLE "@db_user".DPA_OGGETTI_CUSTOM_FASC ADD (  FOREIGN KEY (ID_TIPO_OGGETTO) REFERENCES "@db_user".DPA_TIPO_OGGETTO_FASC (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_OGG_CUSTOM_COMP 
-- 
ALTER TABLE "@db_user".DPA_OGG_CUSTOM_COMP ADD (  FOREIGN KEY (ID_OGG_CUSTOM) REFERENCES "@db_user".DPA_OGGETTI_CUSTOM (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_OGG_CUSTOM_COMP_FASC 
-- 
ALTER TABLE "@db_user".DPA_OGG_CUSTOM_COMP_FASC ADD (  FOREIGN KEY (ID_OGG_CUSTOM) REFERENCES "@db_user".DPA_OGGETTI_CUSTOM_FASC (SYSTEM_ID) ENABLE NOVALIDATE)
/

-- 
-- Foreign Key Constraints for Table DPA_PASSI 
-- 
ALTER TABLE "@db_user".DPA_PASSI ADD (  FOREIGN KEY (ID_STATO) REFERENCES "@db_user".DPA_STATI (SYSTEM_ID) ENABLE NOVALIDATE,  FOREIGN KEY (ID_DIAGRAMMA) REFERENCES "@db_user".DPA_DIAGRAMMI_STATO (SYSTEM_ID) ENABLE NOVALIDATE)
/

GRANT DELETE, INSERT, SELECT, UPDATE ON "@db_user".PLAN_TABLE TO PUBLIC
/

